// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comm_2eproto;
namespace comm {
class MapPositionsUpdate;
struct MapPositionsUpdateDefaultTypeInternal;
extern MapPositionsUpdateDefaultTypeInternal _MapPositionsUpdate_default_instance_;
class Obstacle;
struct ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class PlayerPosition;
struct PlayerPositionDefaultTypeInternal;
extern PlayerPositionDefaultTypeInternal _PlayerPosition_default_instance_;
class PositionUpdate;
struct PositionUpdateDefaultTypeInternal;
extern PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
class StateUpdate;
struct StateUpdateDefaultTypeInternal;
extern StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
class WrapperMessage;
struct WrapperMessageDefaultTypeInternal;
extern WrapperMessageDefaultTypeInternal _WrapperMessage_default_instance_;
}  // namespace comm
PROTOBUF_NAMESPACE_OPEN
template<> ::comm::MapPositionsUpdate* Arena::CreateMaybeMessage<::comm::MapPositionsUpdate>(Arena*);
template<> ::comm::Obstacle* Arena::CreateMaybeMessage<::comm::Obstacle>(Arena*);
template<> ::comm::PlayerPosition* Arena::CreateMaybeMessage<::comm::PlayerPosition>(Arena*);
template<> ::comm::PositionUpdate* Arena::CreateMaybeMessage<::comm::PositionUpdate>(Arena*);
template<> ::comm::StateUpdate* Arena::CreateMaybeMessage<::comm::StateUpdate>(Arena*);
template<> ::comm::WrapperMessage* Arena::CreateMaybeMessage<::comm::WrapperMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace comm {

enum MessageType : int {
  MAP_UPDATE = 0,
  POSITION_UPDATE = 1,
  STATE_VARIANT = 3,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MAP_UPDATE;
constexpr MessageType MessageType_MAX = STATE_VARIANT;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum StateVariant : int {
  NONE = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
  StateVariant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StateVariant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StateVariant_IsValid(int value);
constexpr StateVariant StateVariant_MIN = NONE;
constexpr StateVariant StateVariant_MAX = DISCONNECTED;
constexpr int StateVariant_ARRAYSIZE = StateVariant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateVariant_descriptor();
template<typename T>
inline const std::string& StateVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateVariant_descriptor(), enum_t_value);
}
inline bool StateVariant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateVariant>(
    StateVariant_descriptor(), name, value);
}
// ===================================================================

class WrapperMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.WrapperMessage) */ {
 public:
  inline WrapperMessage() : WrapperMessage(nullptr) {}
  ~WrapperMessage() override;
  explicit PROTOBUF_CONSTEXPR WrapperMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WrapperMessage(const WrapperMessage& from);
  WrapperMessage(WrapperMessage&& from) noexcept
    : WrapperMessage() {
    *this = ::std::move(from);
  }

  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperMessage& operator=(WrapperMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WrapperMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WrapperMessage* internal_default_instance() {
    return reinterpret_cast<const WrapperMessage*>(
               &_WrapperMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrapperMessage& a, WrapperMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WrapperMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WrapperMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WrapperMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WrapperMessage& from) {
    WrapperMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.WrapperMessage";
  }
  protected:
  explicit WrapperMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .comm.MessageType type = 1;
  void clear_type();
  ::comm::MessageType type() const;
  void set_type(::comm::MessageType value);
  private:
  ::comm::MessageType _internal_type() const;
  void _internal_set_type(::comm::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:comm.WrapperMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class PositionUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.PositionUpdate) */ {
 public:
  inline PositionUpdate() : PositionUpdate(nullptr) {}
  ~PositionUpdate() override;
  explicit PROTOBUF_CONSTEXPR PositionUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionUpdate(const PositionUpdate& from);
  PositionUpdate(PositionUpdate&& from) noexcept
    : PositionUpdate() {
    *this = ::std::move(from);
  }

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionUpdate& operator=(PositionUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionUpdate* internal_default_instance() {
    return reinterpret_cast<const PositionUpdate*>(
               &_PositionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionUpdate& a, PositionUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionUpdate& from) {
    PositionUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.PositionUpdate";
  }
  protected:
  explicit PositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 entity_id = 1;
  void clear_entity_id();
  uint32_t entity_id() const;
  void set_entity_id(uint32_t value);
  private:
  uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(uint32_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:comm.PositionUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t entity_id_;
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class StateUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.StateUpdate) */ {
 public:
  inline StateUpdate() : StateUpdate(nullptr) {}
  ~StateUpdate() override;
  explicit PROTOBUF_CONSTEXPR StateUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateUpdate(const StateUpdate& from);
  StateUpdate(StateUpdate&& from) noexcept
    : StateUpdate() {
    *this = ::std::move(from);
  }

  inline StateUpdate& operator=(const StateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateUpdate& operator=(StateUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateUpdate* internal_default_instance() {
    return reinterpret_cast<const StateUpdate*>(
               &_StateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StateUpdate& a, StateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(StateUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateUpdate& from) {
    StateUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.StateUpdate";
  }
  protected:
  explicit StateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVariantFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .comm.StateVariant variant = 2;
  void clear_variant();
  ::comm::StateVariant variant() const;
  void set_variant(::comm::StateVariant value);
  private:
  ::comm::StateVariant _internal_variant() const;
  void _internal_set_variant(::comm::StateVariant value);
  public:

  // @@protoc_insertion_point(class_scope:comm.StateUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    int variant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Obstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Obstacle) */ {
 public:
  inline Obstacle() : Obstacle(nullptr) {}
  ~Obstacle() override;
  explicit PROTOBUF_CONSTEXPR Obstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Obstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Obstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Obstacle& from) {
    Obstacle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Obstacle";
  }
  protected:
  explicit Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kLeftFieldNumber = 3,
    kTopFieldNumber = 4,
  };
  // uint32 height = 1;
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // uint32 width = 2;
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // uint32 left = 3;
  void clear_left();
  uint32_t left() const;
  void set_left(uint32_t value);
  private:
  uint32_t _internal_left() const;
  void _internal_set_left(uint32_t value);
  public:

  // uint32 top = 4;
  void clear_top();
  uint32_t top() const;
  void set_top(uint32_t value);
  private:
  uint32_t _internal_top() const;
  void _internal_set_top(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Obstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t height_;
    uint32_t width_;
    uint32_t left_;
    uint32_t top_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class PlayerPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.PlayerPosition) */ {
 public:
  inline PlayerPosition() : PlayerPosition(nullptr) {}
  ~PlayerPosition() override;
  explicit PROTOBUF_CONSTEXPR PlayerPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerPosition(const PlayerPosition& from);
  PlayerPosition(PlayerPosition&& from) noexcept
    : PlayerPosition() {
    *this = ::std::move(from);
  }

  inline PlayerPosition& operator=(const PlayerPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPosition& operator=(PlayerPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerPosition* internal_default_instance() {
    return reinterpret_cast<const PlayerPosition*>(
               &_PlayerPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerPosition& a, PlayerPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerPosition& from) {
    PlayerPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.PlayerPosition";
  }
  protected:
  explicit PlayerPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 x = 2;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 3;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.PlayerPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class MapPositionsUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.MapPositionsUpdate) */ {
 public:
  inline MapPositionsUpdate() : MapPositionsUpdate(nullptr) {}
  ~MapPositionsUpdate() override;
  explicit PROTOBUF_CONSTEXPR MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapPositionsUpdate(const MapPositionsUpdate& from);
  MapPositionsUpdate(MapPositionsUpdate&& from) noexcept
    : MapPositionsUpdate() {
    *this = ::std::move(from);
  }

  inline MapPositionsUpdate& operator=(const MapPositionsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPositionsUpdate& operator=(MapPositionsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapPositionsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapPositionsUpdate* internal_default_instance() {
    return reinterpret_cast<const MapPositionsUpdate*>(
               &_MapPositionsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapPositionsUpdate& a, MapPositionsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapPositionsUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapPositionsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapPositionsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapPositionsUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapPositionsUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapPositionsUpdate& from) {
    MapPositionsUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPositionsUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.MapPositionsUpdate";
  }
  protected:
  explicit MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 1,
    kPlayersFieldNumber = 2,
  };
  // repeated .comm.Obstacle obstacles = 1;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::comm::Obstacle* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >*
      mutable_obstacles();
  private:
  const ::comm::Obstacle& _internal_obstacles(int index) const;
  ::comm::Obstacle* _internal_add_obstacles();
  public:
  const ::comm::Obstacle& obstacles(int index) const;
  ::comm::Obstacle* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >&
      obstacles() const;

  // repeated .comm.PlayerPosition players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::comm::PlayerPosition* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PlayerPosition >*
      mutable_players();
  private:
  const ::comm::PlayerPosition& _internal_players(int index) const;
  ::comm::PlayerPosition* _internal_add_players();
  public:
  const ::comm::PlayerPosition& players(int index) const;
  ::comm::PlayerPosition* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PlayerPosition >&
      players() const;

  // @@protoc_insertion_point(class_scope:comm.MapPositionsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle > obstacles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PlayerPosition > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WrapperMessage

// .comm.MessageType type = 1;
inline void WrapperMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::comm::MessageType WrapperMessage::_internal_type() const {
  return static_cast< ::comm::MessageType >(_impl_.type_);
}
inline ::comm::MessageType WrapperMessage::type() const {
  // @@protoc_insertion_point(field_get:comm.WrapperMessage.type)
  return _internal_type();
}
inline void WrapperMessage::_internal_set_type(::comm::MessageType value) {
  
  _impl_.type_ = value;
}
inline void WrapperMessage::set_type(::comm::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:comm.WrapperMessage.type)
}

// bytes payload = 2;
inline void WrapperMessage::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& WrapperMessage::payload() const {
  // @@protoc_insertion_point(field_get:comm.WrapperMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WrapperMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:comm.WrapperMessage.payload)
}
inline std::string* WrapperMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:comm.WrapperMessage.payload)
  return _s;
}
inline const std::string& WrapperMessage::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void WrapperMessage::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* WrapperMessage::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* WrapperMessage::release_payload() {
  // @@protoc_insertion_point(field_release:comm.WrapperMessage.payload)
  return _impl_.payload_.Release();
}
inline void WrapperMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:comm.WrapperMessage.payload)
}

// -------------------------------------------------------------------

// PositionUpdate

// uint32 entity_id = 1;
inline void PositionUpdate::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline uint32_t PositionUpdate::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint32_t PositionUpdate::entity_id() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.entity_id)
  return _internal_entity_id();
}
inline void PositionUpdate::_internal_set_entity_id(uint32_t value) {
  
  _impl_.entity_id_ = value;
}
inline void PositionUpdate::set_entity_id(uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.entity_id)
}

// float x = 2;
inline void PositionUpdate::clear_x() {
  _impl_.x_ = 0;
}
inline float PositionUpdate::_internal_x() const {
  return _impl_.x_;
}
inline float PositionUpdate::x() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.x)
  return _internal_x();
}
inline void PositionUpdate::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PositionUpdate::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.x)
}

// float y = 3;
inline void PositionUpdate::clear_y() {
  _impl_.y_ = 0;
}
inline float PositionUpdate::_internal_y() const {
  return _impl_.y_;
}
inline float PositionUpdate::y() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.y)
  return _internal_y();
}
inline void PositionUpdate::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PositionUpdate::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.y)
}

// -------------------------------------------------------------------

// StateUpdate

// uint32 id = 1;
inline void StateUpdate::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t StateUpdate::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t StateUpdate::id() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.id)
  return _internal_id();
}
inline void StateUpdate::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void StateUpdate::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.StateUpdate.id)
}

// .comm.StateVariant variant = 2;
inline void StateUpdate::clear_variant() {
  _impl_.variant_ = 0;
}
inline ::comm::StateVariant StateUpdate::_internal_variant() const {
  return static_cast< ::comm::StateVariant >(_impl_.variant_);
}
inline ::comm::StateVariant StateUpdate::variant() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.variant)
  return _internal_variant();
}
inline void StateUpdate::_internal_set_variant(::comm::StateVariant value) {
  
  _impl_.variant_ = value;
}
inline void StateUpdate::set_variant(::comm::StateVariant value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:comm.StateUpdate.variant)
}

// -------------------------------------------------------------------

// Obstacle

// uint32 height = 1;
inline void Obstacle::clear_height() {
  _impl_.height_ = 0u;
}
inline uint32_t Obstacle::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t Obstacle::height() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.height)
  return _internal_height();
}
inline void Obstacle::_internal_set_height(uint32_t value) {
  
  _impl_.height_ = value;
}
inline void Obstacle::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.height)
}

// uint32 width = 2;
inline void Obstacle::clear_width() {
  _impl_.width_ = 0u;
}
inline uint32_t Obstacle::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t Obstacle::width() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.width)
  return _internal_width();
}
inline void Obstacle::_internal_set_width(uint32_t value) {
  
  _impl_.width_ = value;
}
inline void Obstacle::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.width)
}

// uint32 left = 3;
inline void Obstacle::clear_left() {
  _impl_.left_ = 0u;
}
inline uint32_t Obstacle::_internal_left() const {
  return _impl_.left_;
}
inline uint32_t Obstacle::left() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.left)
  return _internal_left();
}
inline void Obstacle::_internal_set_left(uint32_t value) {
  
  _impl_.left_ = value;
}
inline void Obstacle::set_left(uint32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.left)
}

// uint32 top = 4;
inline void Obstacle::clear_top() {
  _impl_.top_ = 0u;
}
inline uint32_t Obstacle::_internal_top() const {
  return _impl_.top_;
}
inline uint32_t Obstacle::top() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.top)
  return _internal_top();
}
inline void Obstacle::_internal_set_top(uint32_t value) {
  
  _impl_.top_ = value;
}
inline void Obstacle::set_top(uint32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.top)
}

// -------------------------------------------------------------------

// PlayerPosition

// uint32 id = 1;
inline void PlayerPosition::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t PlayerPosition::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t PlayerPosition::id() const {
  // @@protoc_insertion_point(field_get:comm.PlayerPosition.id)
  return _internal_id();
}
inline void PlayerPosition::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void PlayerPosition::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.PlayerPosition.id)
}

// uint32 x = 2;
inline void PlayerPosition::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t PlayerPosition::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t PlayerPosition::x() const {
  // @@protoc_insertion_point(field_get:comm.PlayerPosition.x)
  return _internal_x();
}
inline void PlayerPosition::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void PlayerPosition::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.PlayerPosition.x)
}

// uint32 y = 3;
inline void PlayerPosition::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t PlayerPosition::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t PlayerPosition::y() const {
  // @@protoc_insertion_point(field_get:comm.PlayerPosition.y)
  return _internal_y();
}
inline void PlayerPosition::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void PlayerPosition::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.PlayerPosition.y)
}

// -------------------------------------------------------------------

// MapPositionsUpdate

// repeated .comm.Obstacle obstacles = 1;
inline int MapPositionsUpdate::_internal_obstacles_size() const {
  return _impl_.obstacles_.size();
}
inline int MapPositionsUpdate::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void MapPositionsUpdate::clear_obstacles() {
  _impl_.obstacles_.Clear();
}
inline ::comm::Obstacle* MapPositionsUpdate::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.obstacles)
  return _impl_.obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >*
MapPositionsUpdate::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.obstacles)
  return &_impl_.obstacles_;
}
inline const ::comm::Obstacle& MapPositionsUpdate::_internal_obstacles(int index) const {
  return _impl_.obstacles_.Get(index);
}
inline const ::comm::Obstacle& MapPositionsUpdate::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.obstacles)
  return _internal_obstacles(index);
}
inline ::comm::Obstacle* MapPositionsUpdate::_internal_add_obstacles() {
  return _impl_.obstacles_.Add();
}
inline ::comm::Obstacle* MapPositionsUpdate::add_obstacles() {
  ::comm::Obstacle* _add = _internal_add_obstacles();
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.obstacles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >&
MapPositionsUpdate::obstacles() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.obstacles)
  return _impl_.obstacles_;
}

// repeated .comm.PlayerPosition players = 2;
inline int MapPositionsUpdate::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int MapPositionsUpdate::players_size() const {
  return _internal_players_size();
}
inline void MapPositionsUpdate::clear_players() {
  _impl_.players_.Clear();
}
inline ::comm::PlayerPosition* MapPositionsUpdate::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PlayerPosition >*
MapPositionsUpdate::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.players)
  return &_impl_.players_;
}
inline const ::comm::PlayerPosition& MapPositionsUpdate::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::comm::PlayerPosition& MapPositionsUpdate::players(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.players)
  return _internal_players(index);
}
inline ::comm::PlayerPosition* MapPositionsUpdate::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::comm::PlayerPosition* MapPositionsUpdate::add_players() {
  ::comm::PlayerPosition* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PlayerPosition >&
MapPositionsUpdate::players() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.players)
  return _impl_.players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::comm::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::MessageType>() {
  return ::comm::MessageType_descriptor();
}
template <> struct is_proto_enum< ::comm::StateVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::StateVariant>() {
  return ::comm::StateVariant_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
