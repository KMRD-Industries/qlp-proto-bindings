// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comm_2eproto;
namespace comm {
class BytePrefix;
struct BytePrefixDefaultTypeInternal;
extern BytePrefixDefaultTypeInternal _BytePrefix_default_instance_;
class CollisionData;
struct CollisionDataDefaultTypeInternal;
extern CollisionDataDefaultTypeInternal _CollisionData_default_instance_;
class Enemy;
struct EnemyDefaultTypeInternal;
extern EnemyDefaultTypeInternal _Enemy_default_instance_;
class EnemyGotHitUpdate;
struct EnemyGotHitUpdateDefaultTypeInternal;
extern EnemyGotHitUpdateDefaultTypeInternal _EnemyGotHitUpdate_default_instance_;
class EnemyPositionsUpdate;
struct EnemyPositionsUpdateDefaultTypeInternal;
extern EnemyPositionsUpdateDefaultTypeInternal _EnemyPositionsUpdate_default_instance_;
class InitialInfo;
struct InitialInfoDefaultTypeInternal;
extern InitialInfoDefaultTypeInternal _InitialInfo_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class MapDimensionsUpdate;
struct MapDimensionsUpdateDefaultTypeInternal;
extern MapDimensionsUpdateDefaultTypeInternal _MapDimensionsUpdate_default_instance_;
class MapPositionsUpdate;
struct MapPositionsUpdateDefaultTypeInternal;
extern MapPositionsUpdateDefaultTypeInternal _MapPositionsUpdate_default_instance_;
class MovementUpdate;
struct MovementUpdateDefaultTypeInternal;
extern MovementUpdateDefaultTypeInternal _MovementUpdate_default_instance_;
class Obstacle;
struct ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class SpawningEnemiesResponse;
struct SpawningEnemiesResponseDefaultTypeInternal;
extern SpawningEnemiesResponseDefaultTypeInternal _SpawningEnemiesResponse_default_instance_;
class StateUpdate;
struct StateUpdateDefaultTypeInternal;
extern StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
class TextureData;
struct TextureDataDefaultTypeInternal;
extern TextureDataDefaultTypeInternal _TextureData_default_instance_;
}  // namespace comm
PROTOBUF_NAMESPACE_OPEN
template<> ::comm::BytePrefix* Arena::CreateMaybeMessage<::comm::BytePrefix>(Arena*);
template<> ::comm::CollisionData* Arena::CreateMaybeMessage<::comm::CollisionData>(Arena*);
template<> ::comm::Enemy* Arena::CreateMaybeMessage<::comm::Enemy>(Arena*);
template<> ::comm::EnemyGotHitUpdate* Arena::CreateMaybeMessage<::comm::EnemyGotHitUpdate>(Arena*);
template<> ::comm::EnemyPositionsUpdate* Arena::CreateMaybeMessage<::comm::EnemyPositionsUpdate>(Arena*);
template<> ::comm::InitialInfo* Arena::CreateMaybeMessage<::comm::InitialInfo>(Arena*);
template<> ::comm::Item* Arena::CreateMaybeMessage<::comm::Item>(Arena*);
template<> ::comm::MapDimensionsUpdate* Arena::CreateMaybeMessage<::comm::MapDimensionsUpdate>(Arena*);
template<> ::comm::MapPositionsUpdate* Arena::CreateMaybeMessage<::comm::MapPositionsUpdate>(Arena*);
template<> ::comm::MovementUpdate* Arena::CreateMaybeMessage<::comm::MovementUpdate>(Arena*);
template<> ::comm::Obstacle* Arena::CreateMaybeMessage<::comm::Obstacle>(Arena*);
template<> ::comm::Player* Arena::CreateMaybeMessage<::comm::Player>(Arena*);
template<> ::comm::Room* Arena::CreateMaybeMessage<::comm::Room>(Arena*);
template<> ::comm::SpawningEnemiesResponse* Arena::CreateMaybeMessage<::comm::SpawningEnemiesResponse>(Arena*);
template<> ::comm::StateUpdate* Arena::CreateMaybeMessage<::comm::StateUpdate>(Arena*);
template<> ::comm::TextureData* Arena::CreateMaybeMessage<::comm::TextureData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace comm {

enum StateVariant : int {
  NONE = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
  ROOM_CHANGED = 3,
  ROOM_CLEARED = 4,
  CHEST_OPENED = 5,
  REQUEST_ITEM_GENERATOR = 6,
  ITEM_EQUIPPED = 7,
  MAP_UPDATE = 8,
  PLAYER_POSITION_UPDATE = 9,
  MAP_DIMENSIONS_UPDATE = 10,
  SPAWN_ENEMY_REQUEST = 11,
  ENEMY_GOT_HIT_UPDATE = 12,
  StateVariant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StateVariant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StateVariant_IsValid(int value);
constexpr StateVariant StateVariant_MIN = NONE;
constexpr StateVariant StateVariant_MAX = ENEMY_GOT_HIT_UPDATE;
constexpr int StateVariant_ARRAYSIZE = StateVariant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateVariant_descriptor();
template<typename T>
inline const std::string& StateVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateVariant_descriptor(), enum_t_value);
}
inline bool StateVariant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateVariant>(
    StateVariant_descriptor(), name, value);
}
enum ItemType : int {
  UNKNOWN = 0,
  WEAPON = 1,
  ARMOUR = 2,
  POTION = 3,
  HELMET = 4,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = UNKNOWN;
constexpr ItemType ItemType_MAX = HELMET;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
// ===================================================================

class MovementUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.MovementUpdate) */ {
 public:
  inline MovementUpdate() : MovementUpdate(nullptr) {}
  ~MovementUpdate() override;
  explicit PROTOBUF_CONSTEXPR MovementUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovementUpdate(const MovementUpdate& from);
  MovementUpdate(MovementUpdate&& from) noexcept
    : MovementUpdate() {
    *this = ::std::move(from);
  }

  inline MovementUpdate& operator=(const MovementUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovementUpdate& operator=(MovementUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovementUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovementUpdate* internal_default_instance() {
    return reinterpret_cast<const MovementUpdate*>(
               &_MovementUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MovementUpdate& a, MovementUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MovementUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovementUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovementUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovementUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovementUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MovementUpdate& from) {
    MovementUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovementUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.MovementUpdate";
  }
  protected:
  explicit MovementUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrRoomFieldNumber = 8,
    kEntityIdFieldNumber = 1,
    kPositionXFieldNumber = 2,
    kPositionYFieldNumber = 3,
    kWeaponPivotXFieldNumber = 4,
    kWeaponPivotYFieldNumber = 5,
    kDirectionFieldNumber = 6,
    kAttackFieldNumber = 7,
  };
  // .comm.Room curr_room = 8;
  bool has_curr_room() const;
  private:
  bool _internal_has_curr_room() const;
  public:
  void clear_curr_room();
  const ::comm::Room& curr_room() const;
  PROTOBUF_NODISCARD ::comm::Room* release_curr_room();
  ::comm::Room* mutable_curr_room();
  void set_allocated_curr_room(::comm::Room* curr_room);
  private:
  const ::comm::Room& _internal_curr_room() const;
  ::comm::Room* _internal_mutable_curr_room();
  public:
  void unsafe_arena_set_allocated_curr_room(
      ::comm::Room* curr_room);
  ::comm::Room* unsafe_arena_release_curr_room();

  // uint32 entity_id = 1;
  void clear_entity_id();
  uint32_t entity_id() const;
  void set_entity_id(uint32_t value);
  private:
  uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(uint32_t value);
  public:

  // float position_x = 2;
  void clear_position_x();
  float position_x() const;
  void set_position_x(float value);
  private:
  float _internal_position_x() const;
  void _internal_set_position_x(float value);
  public:

  // float position_y = 3;
  void clear_position_y();
  float position_y() const;
  void set_position_y(float value);
  private:
  float _internal_position_y() const;
  void _internal_set_position_y(float value);
  public:

  // float weapon_pivot_x = 4;
  void clear_weapon_pivot_x();
  float weapon_pivot_x() const;
  void set_weapon_pivot_x(float value);
  private:
  float _internal_weapon_pivot_x() const;
  void _internal_set_weapon_pivot_x(float value);
  public:

  // float weapon_pivot_y = 5;
  void clear_weapon_pivot_y();
  float weapon_pivot_y() const;
  void set_weapon_pivot_y(float value);
  private:
  float _internal_weapon_pivot_y() const;
  void _internal_set_weapon_pivot_y(float value);
  public:

  // float direction = 6;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // bool attack = 7;
  void clear_attack();
  bool attack() const;
  void set_attack(bool value);
  private:
  bool _internal_attack() const;
  void _internal_set_attack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:comm.MovementUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::comm::Room* curr_room_;
    uint32_t entity_id_;
    float position_x_;
    float position_y_;
    float weapon_pivot_x_;
    float weapon_pivot_y_;
    float direction_;
    bool attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kIdFieldNumber = 1,
    kPositionXFieldNumber = 2,
    kPlayerAttackDamageFieldNumber = 4,
    kPositionYFieldNumber = 3,
  };
  // repeated .comm.Item items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::comm::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Item >*
      mutable_items();
  private:
  const ::comm::Item& _internal_items(int index) const;
  ::comm::Item* _internal_add_items();
  public:
  const ::comm::Item& items(int index) const;
  ::comm::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Item >&
      items() const;

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // float position_x = 2;
  void clear_position_x();
  float position_x() const;
  void set_position_x(float value);
  private:
  float _internal_position_x() const;
  void _internal_set_position_x(float value);
  public:

  // double player_attack_damage = 4;
  void clear_player_attack_damage();
  double player_attack_damage() const;
  void set_player_attack_damage(double value);
  private:
  double _internal_player_attack_damage() const;
  void _internal_set_player_attack_damage(double value);
  public:

  // float position_y = 3;
  void clear_position_y();
  float position_y() const;
  void set_position_y(float value);
  private:
  float _internal_position_y() const;
  void _internal_set_position_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Item > items_;
    uint32_t id_;
    float position_x_;
    double player_attack_damage_;
    float position_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGenFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 gen = 2;
  void clear_gen();
  uint32_t gen() const;
  void set_gen(uint32_t value);
  private:
  uint32_t _internal_gen() const;
  void _internal_set_gen(uint32_t value);
  public:

  // .comm.ItemType type = 3;
  void clear_type();
  ::comm::ItemType type() const;
  void set_type(::comm::ItemType value);
  private:
  ::comm::ItemType _internal_type() const;
  void _internal_set_type(::comm::ItemType value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t gen_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class InitialInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.InitialInfo) */ {
 public:
  inline InitialInfo() : InitialInfo(nullptr) {}
  ~InitialInfo() override;
  explicit PROTOBUF_CONSTEXPR InitialInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitialInfo(const InitialInfo& from);
  InitialInfo(InitialInfo&& from) noexcept
    : InitialInfo() {
    *this = ::std::move(from);
  }

  inline InitialInfo& operator=(const InitialInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitialInfo& operator=(InitialInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitialInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitialInfo* internal_default_instance() {
    return reinterpret_cast<const InitialInfo*>(
               &_InitialInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitialInfo& a, InitialInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InitialInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitialInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitialInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitialInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitialInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitialInfo& from) {
    InitialInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.InitialInfo";
  }
  protected:
  explicit InitialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedPlayersFieldNumber = 4,
    kPlayerFieldNumber = 1,
    kNextItemFieldNumber = 3,
    kSeedFieldNumber = 2,
  };
  // repeated .comm.Player connected_players = 4;
  int connected_players_size() const;
  private:
  int _internal_connected_players_size() const;
  public:
  void clear_connected_players();
  ::comm::Player* mutable_connected_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >*
      mutable_connected_players();
  private:
  const ::comm::Player& _internal_connected_players(int index) const;
  ::comm::Player* _internal_add_connected_players();
  public:
  const ::comm::Player& connected_players(int index) const;
  ::comm::Player* add_connected_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >&
      connected_players() const;

  // .comm.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::comm::Player& player() const;
  PROTOBUF_NODISCARD ::comm::Player* release_player();
  ::comm::Player* mutable_player();
  void set_allocated_player(::comm::Player* player);
  private:
  const ::comm::Player& _internal_player() const;
  ::comm::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::comm::Player* player);
  ::comm::Player* unsafe_arena_release_player();

  // .comm.Item next_item = 3;
  bool has_next_item() const;
  private:
  bool _internal_has_next_item() const;
  public:
  void clear_next_item();
  const ::comm::Item& next_item() const;
  PROTOBUF_NODISCARD ::comm::Item* release_next_item();
  ::comm::Item* mutable_next_item();
  void set_allocated_next_item(::comm::Item* next_item);
  private:
  const ::comm::Item& _internal_next_item() const;
  ::comm::Item* _internal_mutable_next_item();
  public:
  void unsafe_arena_set_allocated_next_item(
      ::comm::Item* next_item);
  ::comm::Item* unsafe_arena_release_next_item();

  // int64 seed = 2;
  void clear_seed();
  int64_t seed() const;
  void set_seed(int64_t value);
  private:
  int64_t _internal_seed() const;
  void _internal_set_seed(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.InitialInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player > connected_players_;
    ::comm::Player* player_;
    ::comm::Item* next_item_;
    int64_t seed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  explicit PROTOBUF_CONSTEXPR Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Room& from) {
    Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Obstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Obstacle) */ {
 public:
  inline Obstacle() : Obstacle(nullptr) {}
  ~Obstacle() override;
  explicit PROTOBUF_CONSTEXPR Obstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Obstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Obstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Obstacle& from) {
    Obstacle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Obstacle";
  }
  protected:
  explicit Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
  };
  // int32 left = 1;
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // int32 top = 2;
  void clear_top();
  int32_t top() const;
  void set_top(int32_t value);
  private:
  int32_t _internal_top() const;
  void _internal_set_top(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Obstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t left_;
    int32_t top_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Enemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Enemy) */ {
 public:
  inline Enemy() : Enemy(nullptr) {}
  ~Enemy() override;
  explicit PROTOBUF_CONSTEXPR Enemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Enemy(const Enemy& from);
  Enemy(Enemy&& from) noexcept
    : Enemy() {
    *this = ::std::move(from);
  }

  inline Enemy& operator=(const Enemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enemy& operator=(Enemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Enemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enemy* internal_default_instance() {
    return reinterpret_cast<const Enemy*>(
               &_Enemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Enemy& a, Enemy& b) {
    a.Swap(&b);
  }
  inline void Swap(Enemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Enemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Enemy& from) {
    Enemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Enemy";
  }
  protected:
  explicit Enemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 4,
    kNameFieldNumber = 5,
    kTextureDataFieldNumber = 8,
    kCollisionDataFieldNumber = 9,
    kIdFieldNumber = 1,
    kPositionXFieldNumber = 2,
    kHpFieldNumber = 6,
    kDamageFieldNumber = 7,
    kPositionYFieldNumber = 3,
  };
  // string type = 4;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .comm.TextureData texture_data = 8;
  bool has_texture_data() const;
  private:
  bool _internal_has_texture_data() const;
  public:
  void clear_texture_data();
  const ::comm::TextureData& texture_data() const;
  PROTOBUF_NODISCARD ::comm::TextureData* release_texture_data();
  ::comm::TextureData* mutable_texture_data();
  void set_allocated_texture_data(::comm::TextureData* texture_data);
  private:
  const ::comm::TextureData& _internal_texture_data() const;
  ::comm::TextureData* _internal_mutable_texture_data();
  public:
  void unsafe_arena_set_allocated_texture_data(
      ::comm::TextureData* texture_data);
  ::comm::TextureData* unsafe_arena_release_texture_data();

  // .comm.CollisionData collision_data = 9;
  bool has_collision_data() const;
  private:
  bool _internal_has_collision_data() const;
  public:
  void clear_collision_data();
  const ::comm::CollisionData& collision_data() const;
  PROTOBUF_NODISCARD ::comm::CollisionData* release_collision_data();
  ::comm::CollisionData* mutable_collision_data();
  void set_allocated_collision_data(::comm::CollisionData* collision_data);
  private:
  const ::comm::CollisionData& _internal_collision_data() const;
  ::comm::CollisionData* _internal_mutable_collision_data();
  public:
  void unsafe_arena_set_allocated_collision_data(
      ::comm::CollisionData* collision_data);
  ::comm::CollisionData* unsafe_arena_release_collision_data();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // float position_x = 2;
  void clear_position_x();
  float position_x() const;
  void set_position_x(float value);
  private:
  float _internal_position_x() const;
  void _internal_set_position_x(float value);
  public:

  // double hp = 6;
  void clear_hp();
  double hp() const;
  void set_hp(double value);
  private:
  double _internal_hp() const;
  void _internal_set_hp(double value);
  public:

  // double damage = 7;
  void clear_damage();
  double damage() const;
  void set_damage(double value);
  private:
  double _internal_damage() const;
  void _internal_set_damage(double value);
  public:

  // float position_y = 3;
  void clear_position_y();
  float position_y() const;
  void set_position_y(float value);
  private:
  float _internal_position_y() const;
  void _internal_set_position_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Enemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::comm::TextureData* texture_data_;
    ::comm::CollisionData* collision_data_;
    uint32_t id_;
    float position_x_;
    double hp_;
    double damage_;
    float position_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class TextureData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.TextureData) */ {
 public:
  inline TextureData() : TextureData(nullptr) {}
  ~TextureData() override;
  explicit PROTOBUF_CONSTEXPR TextureData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextureData(const TextureData& from);
  TextureData(TextureData&& from) noexcept
    : TextureData() {
    *this = ::std::move(from);
  }

  inline TextureData& operator=(const TextureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextureData& operator=(TextureData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TextureData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextureData* internal_default_instance() {
    return reinterpret_cast<const TextureData*>(
               &_TextureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TextureData& a, TextureData& b) {
    a.Swap(&b);
  }
  inline void Swap(TextureData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextureData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextureData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TextureData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TextureData& from) {
    TextureData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextureData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.TextureData";
  }
  protected:
  explicit TextureData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileSetFieldNumber = 2,
    kTileIdFieldNumber = 1,
    kTileLayerFieldNumber = 3,
  };
  // string tile_set = 2;
  void clear_tile_set();
  const std::string& tile_set() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tile_set(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tile_set();
  PROTOBUF_NODISCARD std::string* release_tile_set();
  void set_allocated_tile_set(std::string* tile_set);
  private:
  const std::string& _internal_tile_set() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tile_set(const std::string& value);
  std::string* _internal_mutable_tile_set();
  public:

  // uint32 tile_id = 1;
  void clear_tile_id();
  uint32_t tile_id() const;
  void set_tile_id(uint32_t value);
  private:
  uint32_t _internal_tile_id() const;
  void _internal_set_tile_id(uint32_t value);
  public:

  // int32 tile_layer = 3;
  void clear_tile_layer();
  int32_t tile_layer() const;
  void set_tile_layer(int32_t value);
  private:
  int32_t _internal_tile_layer() const;
  void _internal_set_tile_layer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.TextureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tile_set_;
    uint32_t tile_id_;
    int32_t tile_layer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class CollisionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.CollisionData) */ {
 public:
  inline CollisionData() : CollisionData(nullptr) {}
  ~CollisionData() override;
  explicit PROTOBUF_CONSTEXPR CollisionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollisionData(const CollisionData& from);
  CollisionData(CollisionData&& from) noexcept
    : CollisionData() {
    *this = ::std::move(from);
  }

  inline CollisionData& operator=(const CollisionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionData& operator=(CollisionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollisionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollisionData* internal_default_instance() {
    return reinterpret_cast<const CollisionData*>(
               &_CollisionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CollisionData& a, CollisionData& b) {
    a.Swap(&b);
  }
  inline void Swap(CollisionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollisionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollisionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollisionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollisionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollisionData& from) {
    CollisionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.CollisionData";
  }
  protected:
  explicit CollisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kXOffsetFieldNumber = 4,
    kYOffsetFieldNumber = 5,
  };
  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // float width = 2;
  void clear_width();
  float width() const;
  void set_width(float value);
  private:
  float _internal_width() const;
  void _internal_set_width(float value);
  public:

  // float height = 3;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // float x_offset = 4;
  void clear_x_offset();
  float x_offset() const;
  void set_x_offset(float value);
  private:
  float _internal_x_offset() const;
  void _internal_set_x_offset(float value);
  public:

  // float y_offset = 5;
  void clear_y_offset();
  float y_offset() const;
  void set_y_offset(float value);
  private:
  float _internal_y_offset() const;
  void _internal_set_y_offset(float value);
  public:

  // @@protoc_insertion_point(class_scope:comm.CollisionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t type_;
    float width_;
    float height_;
    float x_offset_;
    float y_offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class EnemyGotHitUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.EnemyGotHitUpdate) */ {
 public:
  inline EnemyGotHitUpdate() : EnemyGotHitUpdate(nullptr) {}
  ~EnemyGotHitUpdate() override;
  explicit PROTOBUF_CONSTEXPR EnemyGotHitUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnemyGotHitUpdate(const EnemyGotHitUpdate& from);
  EnemyGotHitUpdate(EnemyGotHitUpdate&& from) noexcept
    : EnemyGotHitUpdate() {
    *this = ::std::move(from);
  }

  inline EnemyGotHitUpdate& operator=(const EnemyGotHitUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnemyGotHitUpdate& operator=(EnemyGotHitUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnemyGotHitUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnemyGotHitUpdate* internal_default_instance() {
    return reinterpret_cast<const EnemyGotHitUpdate*>(
               &_EnemyGotHitUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EnemyGotHitUpdate& a, EnemyGotHitUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(EnemyGotHitUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnemyGotHitUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnemyGotHitUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnemyGotHitUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnemyGotHitUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnemyGotHitUpdate& from) {
    EnemyGotHitUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnemyGotHitUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.EnemyGotHitUpdate";
  }
  protected:
  explicit EnemyGotHitUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kEnemyIdFieldNumber = 2,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // uint32 enemy_id = 2;
  void clear_enemy_id();
  uint32_t enemy_id() const;
  void set_enemy_id(uint32_t value);
  private:
  uint32_t _internal_enemy_id() const;
  void _internal_set_enemy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.EnemyGotHitUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t player_id_;
    uint32_t enemy_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class EnemyPositionsUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.EnemyPositionsUpdate) */ {
 public:
  inline EnemyPositionsUpdate() : EnemyPositionsUpdate(nullptr) {}
  ~EnemyPositionsUpdate() override;
  explicit PROTOBUF_CONSTEXPR EnemyPositionsUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnemyPositionsUpdate(const EnemyPositionsUpdate& from);
  EnemyPositionsUpdate(EnemyPositionsUpdate&& from) noexcept
    : EnemyPositionsUpdate() {
    *this = ::std::move(from);
  }

  inline EnemyPositionsUpdate& operator=(const EnemyPositionsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnemyPositionsUpdate& operator=(EnemyPositionsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnemyPositionsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnemyPositionsUpdate* internal_default_instance() {
    return reinterpret_cast<const EnemyPositionsUpdate*>(
               &_EnemyPositionsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EnemyPositionsUpdate& a, EnemyPositionsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(EnemyPositionsUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnemyPositionsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnemyPositionsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnemyPositionsUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnemyPositionsUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnemyPositionsUpdate& from) {
    EnemyPositionsUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnemyPositionsUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.EnemyPositionsUpdate";
  }
  protected:
  explicit EnemyPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnemyPositionsFieldNumber = 1,
  };
  // repeated .comm.Enemy enemy_positions = 1;
  int enemy_positions_size() const;
  private:
  int _internal_enemy_positions_size() const;
  public:
  void clear_enemy_positions();
  ::comm::Enemy* mutable_enemy_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >*
      mutable_enemy_positions();
  private:
  const ::comm::Enemy& _internal_enemy_positions(int index) const;
  ::comm::Enemy* _internal_add_enemy_positions();
  public:
  const ::comm::Enemy& enemy_positions(int index) const;
  ::comm::Enemy* add_enemy_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >&
      enemy_positions() const;

  // @@protoc_insertion_point(class_scope:comm.EnemyPositionsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy > enemy_positions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class MapPositionsUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.MapPositionsUpdate) */ {
 public:
  inline MapPositionsUpdate() : MapPositionsUpdate(nullptr) {}
  ~MapPositionsUpdate() override;
  explicit PROTOBUF_CONSTEXPR MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapPositionsUpdate(const MapPositionsUpdate& from);
  MapPositionsUpdate(MapPositionsUpdate&& from) noexcept
    : MapPositionsUpdate() {
    *this = ::std::move(from);
  }

  inline MapPositionsUpdate& operator=(const MapPositionsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPositionsUpdate& operator=(MapPositionsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapPositionsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapPositionsUpdate* internal_default_instance() {
    return reinterpret_cast<const MapPositionsUpdate*>(
               &_MapPositionsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MapPositionsUpdate& a, MapPositionsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapPositionsUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapPositionsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapPositionsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapPositionsUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapPositionsUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapPositionsUpdate& from) {
    MapPositionsUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPositionsUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.MapPositionsUpdate";
  }
  protected:
  explicit MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kEnemiesFieldNumber = 2,
  };
  // repeated .comm.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::comm::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >*
      mutable_players();
  private:
  const ::comm::Player& _internal_players(int index) const;
  ::comm::Player* _internal_add_players();
  public:
  const ::comm::Player& players(int index) const;
  ::comm::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >&
      players() const;

  // repeated .comm.Enemy enemies = 2;
  int enemies_size() const;
  private:
  int _internal_enemies_size() const;
  public:
  void clear_enemies();
  ::comm::Enemy* mutable_enemies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >*
      mutable_enemies();
  private:
  const ::comm::Enemy& _internal_enemies(int index) const;
  ::comm::Enemy* _internal_add_enemies();
  public:
  const ::comm::Enemy& enemies(int index) const;
  ::comm::Enemy* add_enemies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >&
      enemies() const;

  // @@protoc_insertion_point(class_scope:comm.MapPositionsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy > enemies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class MapDimensionsUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.MapDimensionsUpdate) */ {
 public:
  inline MapDimensionsUpdate() : MapDimensionsUpdate(nullptr) {}
  ~MapDimensionsUpdate() override;
  explicit PROTOBUF_CONSTEXPR MapDimensionsUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapDimensionsUpdate(const MapDimensionsUpdate& from);
  MapDimensionsUpdate(MapDimensionsUpdate&& from) noexcept
    : MapDimensionsUpdate() {
    *this = ::std::move(from);
  }

  inline MapDimensionsUpdate& operator=(const MapDimensionsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapDimensionsUpdate& operator=(MapDimensionsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapDimensionsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapDimensionsUpdate* internal_default_instance() {
    return reinterpret_cast<const MapDimensionsUpdate*>(
               &_MapDimensionsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MapDimensionsUpdate& a, MapDimensionsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapDimensionsUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapDimensionsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapDimensionsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapDimensionsUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapDimensionsUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapDimensionsUpdate& from) {
    MapDimensionsUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapDimensionsUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.MapDimensionsUpdate";
  }
  protected:
  explicit MapDimensionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 1,
  };
  // repeated .comm.Obstacle obstacles = 1;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::comm::Obstacle* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >*
      mutable_obstacles();
  private:
  const ::comm::Obstacle& _internal_obstacles(int index) const;
  ::comm::Obstacle* _internal_add_obstacles();
  public:
  const ::comm::Obstacle& obstacles(int index) const;
  ::comm::Obstacle* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >&
      obstacles() const;

  // @@protoc_insertion_point(class_scope:comm.MapDimensionsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle > obstacles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class SpawningEnemiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.SpawningEnemiesResponse) */ {
 public:
  inline SpawningEnemiesResponse() : SpawningEnemiesResponse(nullptr) {}
  ~SpawningEnemiesResponse() override;
  explicit PROTOBUF_CONSTEXPR SpawningEnemiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawningEnemiesResponse(const SpawningEnemiesResponse& from);
  SpawningEnemiesResponse(SpawningEnemiesResponse&& from) noexcept
    : SpawningEnemiesResponse() {
    *this = ::std::move(from);
  }

  inline SpawningEnemiesResponse& operator=(const SpawningEnemiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawningEnemiesResponse& operator=(SpawningEnemiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawningEnemiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawningEnemiesResponse* internal_default_instance() {
    return reinterpret_cast<const SpawningEnemiesResponse*>(
               &_SpawningEnemiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SpawningEnemiesResponse& a, SpawningEnemiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawningEnemiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawningEnemiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawningEnemiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawningEnemiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawningEnemiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawningEnemiesResponse& from) {
    SpawningEnemiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawningEnemiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.SpawningEnemiesResponse";
  }
  protected:
  explicit SpawningEnemiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnemyIdFieldNumber = 1,
  };
  // repeated uint32 enemy_id = 1;
  int enemy_id_size() const;
  private:
  int _internal_enemy_id_size() const;
  public:
  void clear_enemy_id();
  private:
  uint32_t _internal_enemy_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_id() const;
  void _internal_add_enemy_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_id();
  public:
  uint32_t enemy_id(int index) const;
  void set_enemy_id(int index, uint32_t value);
  void add_enemy_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_id();

  // @@protoc_insertion_point(class_scope:comm.SpawningEnemiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_id_;
    mutable std::atomic<int> _enemy_id_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class BytePrefix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.BytePrefix) */ {
 public:
  inline BytePrefix() : BytePrefix(nullptr) {}
  ~BytePrefix() override;
  explicit PROTOBUF_CONSTEXPR BytePrefix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BytePrefix(const BytePrefix& from);
  BytePrefix(BytePrefix&& from) noexcept
    : BytePrefix() {
    *this = ::std::move(from);
  }

  inline BytePrefix& operator=(const BytePrefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytePrefix& operator=(BytePrefix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BytePrefix& default_instance() {
    return *internal_default_instance();
  }
  static inline const BytePrefix* internal_default_instance() {
    return reinterpret_cast<const BytePrefix*>(
               &_BytePrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BytePrefix& a, BytePrefix& b) {
    a.Swap(&b);
  }
  inline void Swap(BytePrefix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BytePrefix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BytePrefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BytePrefix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BytePrefix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BytePrefix& from) {
    BytePrefix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytePrefix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.BytePrefix";
  }
  protected:
  explicit BytePrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 1,
  };
  // uint32 bytes = 1;
  void clear_bytes();
  uint32_t bytes() const;
  void set_bytes(uint32_t value);
  private:
  uint32_t _internal_bytes() const;
  void _internal_set_bytes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.BytePrefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class StateUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.StateUpdate) */ {
 public:
  inline StateUpdate() : StateUpdate(nullptr) {}
  ~StateUpdate() override;
  explicit PROTOBUF_CONSTEXPR StateUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateUpdate(const StateUpdate& from);
  StateUpdate(StateUpdate&& from) noexcept
    : StateUpdate() {
    *this = ::std::move(from);
  }

  inline StateUpdate& operator=(const StateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateUpdate& operator=(StateUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateUpdate* internal_default_instance() {
    return reinterpret_cast<const StateUpdate*>(
               &_StateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StateUpdate& a, StateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(StateUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateUpdate& from) {
    StateUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.StateUpdate";
  }
  protected:
  explicit StateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompressedMapDimensionsUpdateFieldNumber = 10,
    kPlayerFieldNumber = 1,
    kItemFieldNumber = 2,
    kRoomFieldNumber = 4,
    kMapPositionsUpdateFieldNumber = 5,
    kPositionUpdateFieldNumber = 6,
    kEnemyPositionsUpdateFieldNumber = 7,
    kMapDimensionsUpdateFieldNumber = 8,
    kEnemyGotHitUpdateFieldNumber = 9,
    kVariantFieldNumber = 3,
  };
  // bytes compressed_map_dimensions_update = 10;
  void clear_compressed_map_dimensions_update();
  const std::string& compressed_map_dimensions_update() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compressed_map_dimensions_update(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compressed_map_dimensions_update();
  PROTOBUF_NODISCARD std::string* release_compressed_map_dimensions_update();
  void set_allocated_compressed_map_dimensions_update(std::string* compressed_map_dimensions_update);
  private:
  const std::string& _internal_compressed_map_dimensions_update() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compressed_map_dimensions_update(const std::string& value);
  std::string* _internal_mutable_compressed_map_dimensions_update();
  public:

  // .comm.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::comm::Player& player() const;
  PROTOBUF_NODISCARD ::comm::Player* release_player();
  ::comm::Player* mutable_player();
  void set_allocated_player(::comm::Player* player);
  private:
  const ::comm::Player& _internal_player() const;
  ::comm::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::comm::Player* player);
  ::comm::Player* unsafe_arena_release_player();

  // .comm.Item item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::comm::Item& item() const;
  PROTOBUF_NODISCARD ::comm::Item* release_item();
  ::comm::Item* mutable_item();
  void set_allocated_item(::comm::Item* item);
  private:
  const ::comm::Item& _internal_item() const;
  ::comm::Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::comm::Item* item);
  ::comm::Item* unsafe_arena_release_item();

  // .comm.Room room = 4;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::comm::Room& room() const;
  PROTOBUF_NODISCARD ::comm::Room* release_room();
  ::comm::Room* mutable_room();
  void set_allocated_room(::comm::Room* room);
  private:
  const ::comm::Room& _internal_room() const;
  ::comm::Room* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::comm::Room* room);
  ::comm::Room* unsafe_arena_release_room();

  // .comm.MapPositionsUpdate map_Positions_Update = 5;
  bool has_map_positions_update() const;
  private:
  bool _internal_has_map_positions_update() const;
  public:
  void clear_map_positions_update();
  const ::comm::MapPositionsUpdate& map_positions_update() const;
  PROTOBUF_NODISCARD ::comm::MapPositionsUpdate* release_map_positions_update();
  ::comm::MapPositionsUpdate* mutable_map_positions_update();
  void set_allocated_map_positions_update(::comm::MapPositionsUpdate* map_positions_update);
  private:
  const ::comm::MapPositionsUpdate& _internal_map_positions_update() const;
  ::comm::MapPositionsUpdate* _internal_mutable_map_positions_update();
  public:
  void unsafe_arena_set_allocated_map_positions_update(
      ::comm::MapPositionsUpdate* map_positions_update);
  ::comm::MapPositionsUpdate* unsafe_arena_release_map_positions_update();

  // .comm.MovementUpdate position_Update = 6;
  bool has_position_update() const;
  private:
  bool _internal_has_position_update() const;
  public:
  void clear_position_update();
  const ::comm::MovementUpdate& position_update() const;
  PROTOBUF_NODISCARD ::comm::MovementUpdate* release_position_update();
  ::comm::MovementUpdate* mutable_position_update();
  void set_allocated_position_update(::comm::MovementUpdate* position_update);
  private:
  const ::comm::MovementUpdate& _internal_position_update() const;
  ::comm::MovementUpdate* _internal_mutable_position_update();
  public:
  void unsafe_arena_set_allocated_position_update(
      ::comm::MovementUpdate* position_update);
  ::comm::MovementUpdate* unsafe_arena_release_position_update();

  // .comm.EnemyPositionsUpdate enemy_Positions_Update = 7;
  bool has_enemy_positions_update() const;
  private:
  bool _internal_has_enemy_positions_update() const;
  public:
  void clear_enemy_positions_update();
  const ::comm::EnemyPositionsUpdate& enemy_positions_update() const;
  PROTOBUF_NODISCARD ::comm::EnemyPositionsUpdate* release_enemy_positions_update();
  ::comm::EnemyPositionsUpdate* mutable_enemy_positions_update();
  void set_allocated_enemy_positions_update(::comm::EnemyPositionsUpdate* enemy_positions_update);
  private:
  const ::comm::EnemyPositionsUpdate& _internal_enemy_positions_update() const;
  ::comm::EnemyPositionsUpdate* _internal_mutable_enemy_positions_update();
  public:
  void unsafe_arena_set_allocated_enemy_positions_update(
      ::comm::EnemyPositionsUpdate* enemy_positions_update);
  ::comm::EnemyPositionsUpdate* unsafe_arena_release_enemy_positions_update();

  // .comm.MapDimensionsUpdate map_Dimensions_Update = 8;
  bool has_map_dimensions_update() const;
  private:
  bool _internal_has_map_dimensions_update() const;
  public:
  void clear_map_dimensions_update();
  const ::comm::MapDimensionsUpdate& map_dimensions_update() const;
  PROTOBUF_NODISCARD ::comm::MapDimensionsUpdate* release_map_dimensions_update();
  ::comm::MapDimensionsUpdate* mutable_map_dimensions_update();
  void set_allocated_map_dimensions_update(::comm::MapDimensionsUpdate* map_dimensions_update);
  private:
  const ::comm::MapDimensionsUpdate& _internal_map_dimensions_update() const;
  ::comm::MapDimensionsUpdate* _internal_mutable_map_dimensions_update();
  public:
  void unsafe_arena_set_allocated_map_dimensions_update(
      ::comm::MapDimensionsUpdate* map_dimensions_update);
  ::comm::MapDimensionsUpdate* unsafe_arena_release_map_dimensions_update();

  // .comm.EnemyGotHitUpdate enemy_Got_Hit_Update = 9;
  bool has_enemy_got_hit_update() const;
  private:
  bool _internal_has_enemy_got_hit_update() const;
  public:
  void clear_enemy_got_hit_update();
  const ::comm::EnemyGotHitUpdate& enemy_got_hit_update() const;
  PROTOBUF_NODISCARD ::comm::EnemyGotHitUpdate* release_enemy_got_hit_update();
  ::comm::EnemyGotHitUpdate* mutable_enemy_got_hit_update();
  void set_allocated_enemy_got_hit_update(::comm::EnemyGotHitUpdate* enemy_got_hit_update);
  private:
  const ::comm::EnemyGotHitUpdate& _internal_enemy_got_hit_update() const;
  ::comm::EnemyGotHitUpdate* _internal_mutable_enemy_got_hit_update();
  public:
  void unsafe_arena_set_allocated_enemy_got_hit_update(
      ::comm::EnemyGotHitUpdate* enemy_got_hit_update);
  ::comm::EnemyGotHitUpdate* unsafe_arena_release_enemy_got_hit_update();

  // .comm.StateVariant variant = 3;
  void clear_variant();
  ::comm::StateVariant variant() const;
  void set_variant(::comm::StateVariant value);
  private:
  ::comm::StateVariant _internal_variant() const;
  void _internal_set_variant(::comm::StateVariant value);
  public:

  // @@protoc_insertion_point(class_scope:comm.StateUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressed_map_dimensions_update_;
    ::comm::Player* player_;
    ::comm::Item* item_;
    ::comm::Room* room_;
    ::comm::MapPositionsUpdate* map_positions_update_;
    ::comm::MovementUpdate* position_update_;
    ::comm::EnemyPositionsUpdate* enemy_positions_update_;
    ::comm::MapDimensionsUpdate* map_dimensions_update_;
    ::comm::EnemyGotHitUpdate* enemy_got_hit_update_;
    int variant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MovementUpdate

// uint32 entity_id = 1;
inline void MovementUpdate::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline uint32_t MovementUpdate::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint32_t MovementUpdate::entity_id() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.entity_id)
  return _internal_entity_id();
}
inline void MovementUpdate::_internal_set_entity_id(uint32_t value) {
  
  _impl_.entity_id_ = value;
}
inline void MovementUpdate::set_entity_id(uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:comm.MovementUpdate.entity_id)
}

// float position_x = 2;
inline void MovementUpdate::clear_position_x() {
  _impl_.position_x_ = 0;
}
inline float MovementUpdate::_internal_position_x() const {
  return _impl_.position_x_;
}
inline float MovementUpdate::position_x() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.position_x)
  return _internal_position_x();
}
inline void MovementUpdate::_internal_set_position_x(float value) {
  
  _impl_.position_x_ = value;
}
inline void MovementUpdate::set_position_x(float value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:comm.MovementUpdate.position_x)
}

// float position_y = 3;
inline void MovementUpdate::clear_position_y() {
  _impl_.position_y_ = 0;
}
inline float MovementUpdate::_internal_position_y() const {
  return _impl_.position_y_;
}
inline float MovementUpdate::position_y() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.position_y)
  return _internal_position_y();
}
inline void MovementUpdate::_internal_set_position_y(float value) {
  
  _impl_.position_y_ = value;
}
inline void MovementUpdate::set_position_y(float value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:comm.MovementUpdate.position_y)
}

// float weapon_pivot_x = 4;
inline void MovementUpdate::clear_weapon_pivot_x() {
  _impl_.weapon_pivot_x_ = 0;
}
inline float MovementUpdate::_internal_weapon_pivot_x() const {
  return _impl_.weapon_pivot_x_;
}
inline float MovementUpdate::weapon_pivot_x() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.weapon_pivot_x)
  return _internal_weapon_pivot_x();
}
inline void MovementUpdate::_internal_set_weapon_pivot_x(float value) {
  
  _impl_.weapon_pivot_x_ = value;
}
inline void MovementUpdate::set_weapon_pivot_x(float value) {
  _internal_set_weapon_pivot_x(value);
  // @@protoc_insertion_point(field_set:comm.MovementUpdate.weapon_pivot_x)
}

// float weapon_pivot_y = 5;
inline void MovementUpdate::clear_weapon_pivot_y() {
  _impl_.weapon_pivot_y_ = 0;
}
inline float MovementUpdate::_internal_weapon_pivot_y() const {
  return _impl_.weapon_pivot_y_;
}
inline float MovementUpdate::weapon_pivot_y() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.weapon_pivot_y)
  return _internal_weapon_pivot_y();
}
inline void MovementUpdate::_internal_set_weapon_pivot_y(float value) {
  
  _impl_.weapon_pivot_y_ = value;
}
inline void MovementUpdate::set_weapon_pivot_y(float value) {
  _internal_set_weapon_pivot_y(value);
  // @@protoc_insertion_point(field_set:comm.MovementUpdate.weapon_pivot_y)
}

// float direction = 6;
inline void MovementUpdate::clear_direction() {
  _impl_.direction_ = 0;
}
inline float MovementUpdate::_internal_direction() const {
  return _impl_.direction_;
}
inline float MovementUpdate::direction() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.direction)
  return _internal_direction();
}
inline void MovementUpdate::_internal_set_direction(float value) {
  
  _impl_.direction_ = value;
}
inline void MovementUpdate::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:comm.MovementUpdate.direction)
}

// bool attack = 7;
inline void MovementUpdate::clear_attack() {
  _impl_.attack_ = false;
}
inline bool MovementUpdate::_internal_attack() const {
  return _impl_.attack_;
}
inline bool MovementUpdate::attack() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.attack)
  return _internal_attack();
}
inline void MovementUpdate::_internal_set_attack(bool value) {
  
  _impl_.attack_ = value;
}
inline void MovementUpdate::set_attack(bool value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:comm.MovementUpdate.attack)
}

// .comm.Room curr_room = 8;
inline bool MovementUpdate::_internal_has_curr_room() const {
  return this != internal_default_instance() && _impl_.curr_room_ != nullptr;
}
inline bool MovementUpdate::has_curr_room() const {
  return _internal_has_curr_room();
}
inline void MovementUpdate::clear_curr_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.curr_room_ != nullptr) {
    delete _impl_.curr_room_;
  }
  _impl_.curr_room_ = nullptr;
}
inline const ::comm::Room& MovementUpdate::_internal_curr_room() const {
  const ::comm::Room* p = _impl_.curr_room_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Room&>(
      ::comm::_Room_default_instance_);
}
inline const ::comm::Room& MovementUpdate::curr_room() const {
  // @@protoc_insertion_point(field_get:comm.MovementUpdate.curr_room)
  return _internal_curr_room();
}
inline void MovementUpdate::unsafe_arena_set_allocated_curr_room(
    ::comm::Room* curr_room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curr_room_);
  }
  _impl_.curr_room_ = curr_room;
  if (curr_room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.MovementUpdate.curr_room)
}
inline ::comm::Room* MovementUpdate::release_curr_room() {
  
  ::comm::Room* temp = _impl_.curr_room_;
  _impl_.curr_room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Room* MovementUpdate::unsafe_arena_release_curr_room() {
  // @@protoc_insertion_point(field_release:comm.MovementUpdate.curr_room)
  
  ::comm::Room* temp = _impl_.curr_room_;
  _impl_.curr_room_ = nullptr;
  return temp;
}
inline ::comm::Room* MovementUpdate::_internal_mutable_curr_room() {
  
  if (_impl_.curr_room_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Room>(GetArenaForAllocation());
    _impl_.curr_room_ = p;
  }
  return _impl_.curr_room_;
}
inline ::comm::Room* MovementUpdate::mutable_curr_room() {
  ::comm::Room* _msg = _internal_mutable_curr_room();
  // @@protoc_insertion_point(field_mutable:comm.MovementUpdate.curr_room)
  return _msg;
}
inline void MovementUpdate::set_allocated_curr_room(::comm::Room* curr_room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.curr_room_;
  }
  if (curr_room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(curr_room);
    if (message_arena != submessage_arena) {
      curr_room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curr_room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.curr_room_ = curr_room;
  // @@protoc_insertion_point(field_set_allocated:comm.MovementUpdate.curr_room)
}

// -------------------------------------------------------------------

// Player

// uint32 id = 1;
inline void Player::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Player::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Player::id() const {
  // @@protoc_insertion_point(field_get:comm.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Player::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.Player.id)
}

// float position_x = 2;
inline void Player::clear_position_x() {
  _impl_.position_x_ = 0;
}
inline float Player::_internal_position_x() const {
  return _impl_.position_x_;
}
inline float Player::position_x() const {
  // @@protoc_insertion_point(field_get:comm.Player.position_x)
  return _internal_position_x();
}
inline void Player::_internal_set_position_x(float value) {
  
  _impl_.position_x_ = value;
}
inline void Player::set_position_x(float value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:comm.Player.position_x)
}

// float position_y = 3;
inline void Player::clear_position_y() {
  _impl_.position_y_ = 0;
}
inline float Player::_internal_position_y() const {
  return _impl_.position_y_;
}
inline float Player::position_y() const {
  // @@protoc_insertion_point(field_get:comm.Player.position_y)
  return _internal_position_y();
}
inline void Player::_internal_set_position_y(float value) {
  
  _impl_.position_y_ = value;
}
inline void Player::set_position_y(float value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:comm.Player.position_y)
}

// double player_attack_damage = 4;
inline void Player::clear_player_attack_damage() {
  _impl_.player_attack_damage_ = 0;
}
inline double Player::_internal_player_attack_damage() const {
  return _impl_.player_attack_damage_;
}
inline double Player::player_attack_damage() const {
  // @@protoc_insertion_point(field_get:comm.Player.player_attack_damage)
  return _internal_player_attack_damage();
}
inline void Player::_internal_set_player_attack_damage(double value) {
  
  _impl_.player_attack_damage_ = value;
}
inline void Player::set_player_attack_damage(double value) {
  _internal_set_player_attack_damage(value);
  // @@protoc_insertion_point(field_set:comm.Player.player_attack_damage)
}

// repeated .comm.Item items = 5;
inline int Player::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int Player::items_size() const {
  return _internal_items_size();
}
inline void Player::clear_items() {
  _impl_.items_.Clear();
}
inline ::comm::Item* Player::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:comm.Player.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Item >*
Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:comm.Player.items)
  return &_impl_.items_;
}
inline const ::comm::Item& Player::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::comm::Item& Player::items(int index) const {
  // @@protoc_insertion_point(field_get:comm.Player.items)
  return _internal_items(index);
}
inline ::comm::Item* Player::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::comm::Item* Player::add_items() {
  ::comm::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:comm.Player.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Item >&
Player::items() const {
  // @@protoc_insertion_point(field_list:comm.Player.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// Item

// uint32 id = 1;
inline void Item::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Item::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Item::id() const {
  // @@protoc_insertion_point(field_get:comm.Item.id)
  return _internal_id();
}
inline void Item::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Item::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.Item.id)
}

// uint32 gen = 2;
inline void Item::clear_gen() {
  _impl_.gen_ = 0u;
}
inline uint32_t Item::_internal_gen() const {
  return _impl_.gen_;
}
inline uint32_t Item::gen() const {
  // @@protoc_insertion_point(field_get:comm.Item.gen)
  return _internal_gen();
}
inline void Item::_internal_set_gen(uint32_t value) {
  
  _impl_.gen_ = value;
}
inline void Item::set_gen(uint32_t value) {
  _internal_set_gen(value);
  // @@protoc_insertion_point(field_set:comm.Item.gen)
}

// .comm.ItemType type = 3;
inline void Item::clear_type() {
  _impl_.type_ = 0;
}
inline ::comm::ItemType Item::_internal_type() const {
  return static_cast< ::comm::ItemType >(_impl_.type_);
}
inline ::comm::ItemType Item::type() const {
  // @@protoc_insertion_point(field_get:comm.Item.type)
  return _internal_type();
}
inline void Item::_internal_set_type(::comm::ItemType value) {
  
  _impl_.type_ = value;
}
inline void Item::set_type(::comm::ItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:comm.Item.type)
}

// -------------------------------------------------------------------

// InitialInfo

// .comm.Player player = 1;
inline bool InitialInfo::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool InitialInfo::has_player() const {
  return _internal_has_player();
}
inline void InitialInfo::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::comm::Player& InitialInfo::_internal_player() const {
  const ::comm::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Player&>(
      ::comm::_Player_default_instance_);
}
inline const ::comm::Player& InitialInfo::player() const {
  // @@protoc_insertion_point(field_get:comm.InitialInfo.player)
  return _internal_player();
}
inline void InitialInfo::unsafe_arena_set_allocated_player(
    ::comm::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.InitialInfo.player)
}
inline ::comm::Player* InitialInfo::release_player() {
  
  ::comm::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Player* InitialInfo::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:comm.InitialInfo.player)
  
  ::comm::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::comm::Player* InitialInfo::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::comm::Player* InitialInfo::mutable_player() {
  ::comm::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:comm.InitialInfo.player)
  return _msg;
}
inline void InitialInfo::set_allocated_player(::comm::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:comm.InitialInfo.player)
}

// int64 seed = 2;
inline void InitialInfo::clear_seed() {
  _impl_.seed_ = int64_t{0};
}
inline int64_t InitialInfo::_internal_seed() const {
  return _impl_.seed_;
}
inline int64_t InitialInfo::seed() const {
  // @@protoc_insertion_point(field_get:comm.InitialInfo.seed)
  return _internal_seed();
}
inline void InitialInfo::_internal_set_seed(int64_t value) {
  
  _impl_.seed_ = value;
}
inline void InitialInfo::set_seed(int64_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:comm.InitialInfo.seed)
}

// .comm.Item next_item = 3;
inline bool InitialInfo::_internal_has_next_item() const {
  return this != internal_default_instance() && _impl_.next_item_ != nullptr;
}
inline bool InitialInfo::has_next_item() const {
  return _internal_has_next_item();
}
inline void InitialInfo::clear_next_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.next_item_ != nullptr) {
    delete _impl_.next_item_;
  }
  _impl_.next_item_ = nullptr;
}
inline const ::comm::Item& InitialInfo::_internal_next_item() const {
  const ::comm::Item* p = _impl_.next_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Item&>(
      ::comm::_Item_default_instance_);
}
inline const ::comm::Item& InitialInfo::next_item() const {
  // @@protoc_insertion_point(field_get:comm.InitialInfo.next_item)
  return _internal_next_item();
}
inline void InitialInfo::unsafe_arena_set_allocated_next_item(
    ::comm::Item* next_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.next_item_);
  }
  _impl_.next_item_ = next_item;
  if (next_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.InitialInfo.next_item)
}
inline ::comm::Item* InitialInfo::release_next_item() {
  
  ::comm::Item* temp = _impl_.next_item_;
  _impl_.next_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Item* InitialInfo::unsafe_arena_release_next_item() {
  // @@protoc_insertion_point(field_release:comm.InitialInfo.next_item)
  
  ::comm::Item* temp = _impl_.next_item_;
  _impl_.next_item_ = nullptr;
  return temp;
}
inline ::comm::Item* InitialInfo::_internal_mutable_next_item() {
  
  if (_impl_.next_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Item>(GetArenaForAllocation());
    _impl_.next_item_ = p;
  }
  return _impl_.next_item_;
}
inline ::comm::Item* InitialInfo::mutable_next_item() {
  ::comm::Item* _msg = _internal_mutable_next_item();
  // @@protoc_insertion_point(field_mutable:comm.InitialInfo.next_item)
  return _msg;
}
inline void InitialInfo::set_allocated_next_item(::comm::Item* next_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.next_item_;
  }
  if (next_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(next_item);
    if (message_arena != submessage_arena) {
      next_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.next_item_ = next_item;
  // @@protoc_insertion_point(field_set_allocated:comm.InitialInfo.next_item)
}

// repeated .comm.Player connected_players = 4;
inline int InitialInfo::_internal_connected_players_size() const {
  return _impl_.connected_players_.size();
}
inline int InitialInfo::connected_players_size() const {
  return _internal_connected_players_size();
}
inline void InitialInfo::clear_connected_players() {
  _impl_.connected_players_.Clear();
}
inline ::comm::Player* InitialInfo::mutable_connected_players(int index) {
  // @@protoc_insertion_point(field_mutable:comm.InitialInfo.connected_players)
  return _impl_.connected_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >*
InitialInfo::mutable_connected_players() {
  // @@protoc_insertion_point(field_mutable_list:comm.InitialInfo.connected_players)
  return &_impl_.connected_players_;
}
inline const ::comm::Player& InitialInfo::_internal_connected_players(int index) const {
  return _impl_.connected_players_.Get(index);
}
inline const ::comm::Player& InitialInfo::connected_players(int index) const {
  // @@protoc_insertion_point(field_get:comm.InitialInfo.connected_players)
  return _internal_connected_players(index);
}
inline ::comm::Player* InitialInfo::_internal_add_connected_players() {
  return _impl_.connected_players_.Add();
}
inline ::comm::Player* InitialInfo::add_connected_players() {
  ::comm::Player* _add = _internal_add_connected_players();
  // @@protoc_insertion_point(field_add:comm.InitialInfo.connected_players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >&
InitialInfo::connected_players() const {
  // @@protoc_insertion_point(field_list:comm.InitialInfo.connected_players)
  return _impl_.connected_players_;
}

// -------------------------------------------------------------------

// Room

// int32 x = 1;
inline void Room::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Room::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Room::x() const {
  // @@protoc_insertion_point(field_get:comm.Room.x)
  return _internal_x();
}
inline void Room::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Room::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.Room.x)
}

// int32 y = 2;
inline void Room::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Room::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Room::y() const {
  // @@protoc_insertion_point(field_get:comm.Room.y)
  return _internal_y();
}
inline void Room::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Room::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.Room.y)
}

// -------------------------------------------------------------------

// Obstacle

// int32 left = 1;
inline void Obstacle::clear_left() {
  _impl_.left_ = 0;
}
inline int32_t Obstacle::_internal_left() const {
  return _impl_.left_;
}
inline int32_t Obstacle::left() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.left)
  return _internal_left();
}
inline void Obstacle::_internal_set_left(int32_t value) {
  
  _impl_.left_ = value;
}
inline void Obstacle::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.left)
}

// int32 top = 2;
inline void Obstacle::clear_top() {
  _impl_.top_ = 0;
}
inline int32_t Obstacle::_internal_top() const {
  return _impl_.top_;
}
inline int32_t Obstacle::top() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.top)
  return _internal_top();
}
inline void Obstacle::_internal_set_top(int32_t value) {
  
  _impl_.top_ = value;
}
inline void Obstacle::set_top(int32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.top)
}

// -------------------------------------------------------------------

// Enemy

// uint32 id = 1;
inline void Enemy::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Enemy::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Enemy::id() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.id)
  return _internal_id();
}
inline void Enemy::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Enemy::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.id)
}

// float position_x = 2;
inline void Enemy::clear_position_x() {
  _impl_.position_x_ = 0;
}
inline float Enemy::_internal_position_x() const {
  return _impl_.position_x_;
}
inline float Enemy::position_x() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.position_x)
  return _internal_position_x();
}
inline void Enemy::_internal_set_position_x(float value) {
  
  _impl_.position_x_ = value;
}
inline void Enemy::set_position_x(float value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.position_x)
}

// float position_y = 3;
inline void Enemy::clear_position_y() {
  _impl_.position_y_ = 0;
}
inline float Enemy::_internal_position_y() const {
  return _impl_.position_y_;
}
inline float Enemy::position_y() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.position_y)
  return _internal_position_y();
}
inline void Enemy::_internal_set_position_y(float value) {
  
  _impl_.position_y_ = value;
}
inline void Enemy::set_position_y(float value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.position_y)
}

// string type = 4;
inline void Enemy::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Enemy::type() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Enemy::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:comm.Enemy.type)
}
inline std::string* Enemy::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:comm.Enemy.type)
  return _s;
}
inline const std::string& Enemy::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Enemy::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Enemy::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Enemy::release_type() {
  // @@protoc_insertion_point(field_release:comm.Enemy.type)
  return _impl_.type_.Release();
}
inline void Enemy::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:comm.Enemy.type)
}

// string name = 5;
inline void Enemy::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Enemy::name() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Enemy::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:comm.Enemy.name)
}
inline std::string* Enemy::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:comm.Enemy.name)
  return _s;
}
inline const std::string& Enemy::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Enemy::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Enemy::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Enemy::release_name() {
  // @@protoc_insertion_point(field_release:comm.Enemy.name)
  return _impl_.name_.Release();
}
inline void Enemy::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:comm.Enemy.name)
}

// double hp = 6;
inline void Enemy::clear_hp() {
  _impl_.hp_ = 0;
}
inline double Enemy::_internal_hp() const {
  return _impl_.hp_;
}
inline double Enemy::hp() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.hp)
  return _internal_hp();
}
inline void Enemy::_internal_set_hp(double value) {
  
  _impl_.hp_ = value;
}
inline void Enemy::set_hp(double value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.hp)
}

// double damage = 7;
inline void Enemy::clear_damage() {
  _impl_.damage_ = 0;
}
inline double Enemy::_internal_damage() const {
  return _impl_.damage_;
}
inline double Enemy::damage() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.damage)
  return _internal_damage();
}
inline void Enemy::_internal_set_damage(double value) {
  
  _impl_.damage_ = value;
}
inline void Enemy::set_damage(double value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.damage)
}

// .comm.TextureData texture_data = 8;
inline bool Enemy::_internal_has_texture_data() const {
  return this != internal_default_instance() && _impl_.texture_data_ != nullptr;
}
inline bool Enemy::has_texture_data() const {
  return _internal_has_texture_data();
}
inline void Enemy::clear_texture_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.texture_data_ != nullptr) {
    delete _impl_.texture_data_;
  }
  _impl_.texture_data_ = nullptr;
}
inline const ::comm::TextureData& Enemy::_internal_texture_data() const {
  const ::comm::TextureData* p = _impl_.texture_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::TextureData&>(
      ::comm::_TextureData_default_instance_);
}
inline const ::comm::TextureData& Enemy::texture_data() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.texture_data)
  return _internal_texture_data();
}
inline void Enemy::unsafe_arena_set_allocated_texture_data(
    ::comm::TextureData* texture_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.texture_data_);
  }
  _impl_.texture_data_ = texture_data;
  if (texture_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.Enemy.texture_data)
}
inline ::comm::TextureData* Enemy::release_texture_data() {
  
  ::comm::TextureData* temp = _impl_.texture_data_;
  _impl_.texture_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::TextureData* Enemy::unsafe_arena_release_texture_data() {
  // @@protoc_insertion_point(field_release:comm.Enemy.texture_data)
  
  ::comm::TextureData* temp = _impl_.texture_data_;
  _impl_.texture_data_ = nullptr;
  return temp;
}
inline ::comm::TextureData* Enemy::_internal_mutable_texture_data() {
  
  if (_impl_.texture_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::TextureData>(GetArenaForAllocation());
    _impl_.texture_data_ = p;
  }
  return _impl_.texture_data_;
}
inline ::comm::TextureData* Enemy::mutable_texture_data() {
  ::comm::TextureData* _msg = _internal_mutable_texture_data();
  // @@protoc_insertion_point(field_mutable:comm.Enemy.texture_data)
  return _msg;
}
inline void Enemy::set_allocated_texture_data(::comm::TextureData* texture_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.texture_data_;
  }
  if (texture_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(texture_data);
    if (message_arena != submessage_arena) {
      texture_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.texture_data_ = texture_data;
  // @@protoc_insertion_point(field_set_allocated:comm.Enemy.texture_data)
}

// .comm.CollisionData collision_data = 9;
inline bool Enemy::_internal_has_collision_data() const {
  return this != internal_default_instance() && _impl_.collision_data_ != nullptr;
}
inline bool Enemy::has_collision_data() const {
  return _internal_has_collision_data();
}
inline void Enemy::clear_collision_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.collision_data_ != nullptr) {
    delete _impl_.collision_data_;
  }
  _impl_.collision_data_ = nullptr;
}
inline const ::comm::CollisionData& Enemy::_internal_collision_data() const {
  const ::comm::CollisionData* p = _impl_.collision_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::CollisionData&>(
      ::comm::_CollisionData_default_instance_);
}
inline const ::comm::CollisionData& Enemy::collision_data() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.collision_data)
  return _internal_collision_data();
}
inline void Enemy::unsafe_arena_set_allocated_collision_data(
    ::comm::CollisionData* collision_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collision_data_);
  }
  _impl_.collision_data_ = collision_data;
  if (collision_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.Enemy.collision_data)
}
inline ::comm::CollisionData* Enemy::release_collision_data() {
  
  ::comm::CollisionData* temp = _impl_.collision_data_;
  _impl_.collision_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::CollisionData* Enemy::unsafe_arena_release_collision_data() {
  // @@protoc_insertion_point(field_release:comm.Enemy.collision_data)
  
  ::comm::CollisionData* temp = _impl_.collision_data_;
  _impl_.collision_data_ = nullptr;
  return temp;
}
inline ::comm::CollisionData* Enemy::_internal_mutable_collision_data() {
  
  if (_impl_.collision_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::CollisionData>(GetArenaForAllocation());
    _impl_.collision_data_ = p;
  }
  return _impl_.collision_data_;
}
inline ::comm::CollisionData* Enemy::mutable_collision_data() {
  ::comm::CollisionData* _msg = _internal_mutable_collision_data();
  // @@protoc_insertion_point(field_mutable:comm.Enemy.collision_data)
  return _msg;
}
inline void Enemy::set_allocated_collision_data(::comm::CollisionData* collision_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collision_data_;
  }
  if (collision_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collision_data);
    if (message_arena != submessage_arena) {
      collision_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collision_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collision_data_ = collision_data;
  // @@protoc_insertion_point(field_set_allocated:comm.Enemy.collision_data)
}

// -------------------------------------------------------------------

// TextureData

// uint32 tile_id = 1;
inline void TextureData::clear_tile_id() {
  _impl_.tile_id_ = 0u;
}
inline uint32_t TextureData::_internal_tile_id() const {
  return _impl_.tile_id_;
}
inline uint32_t TextureData::tile_id() const {
  // @@protoc_insertion_point(field_get:comm.TextureData.tile_id)
  return _internal_tile_id();
}
inline void TextureData::_internal_set_tile_id(uint32_t value) {
  
  _impl_.tile_id_ = value;
}
inline void TextureData::set_tile_id(uint32_t value) {
  _internal_set_tile_id(value);
  // @@protoc_insertion_point(field_set:comm.TextureData.tile_id)
}

// string tile_set = 2;
inline void TextureData::clear_tile_set() {
  _impl_.tile_set_.ClearToEmpty();
}
inline const std::string& TextureData::tile_set() const {
  // @@protoc_insertion_point(field_get:comm.TextureData.tile_set)
  return _internal_tile_set();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextureData::set_tile_set(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tile_set_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:comm.TextureData.tile_set)
}
inline std::string* TextureData::mutable_tile_set() {
  std::string* _s = _internal_mutable_tile_set();
  // @@protoc_insertion_point(field_mutable:comm.TextureData.tile_set)
  return _s;
}
inline const std::string& TextureData::_internal_tile_set() const {
  return _impl_.tile_set_.Get();
}
inline void TextureData::_internal_set_tile_set(const std::string& value) {
  
  _impl_.tile_set_.Set(value, GetArenaForAllocation());
}
inline std::string* TextureData::_internal_mutable_tile_set() {
  
  return _impl_.tile_set_.Mutable(GetArenaForAllocation());
}
inline std::string* TextureData::release_tile_set() {
  // @@protoc_insertion_point(field_release:comm.TextureData.tile_set)
  return _impl_.tile_set_.Release();
}
inline void TextureData::set_allocated_tile_set(std::string* tile_set) {
  if (tile_set != nullptr) {
    
  } else {
    
  }
  _impl_.tile_set_.SetAllocated(tile_set, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tile_set_.IsDefault()) {
    _impl_.tile_set_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:comm.TextureData.tile_set)
}

// int32 tile_layer = 3;
inline void TextureData::clear_tile_layer() {
  _impl_.tile_layer_ = 0;
}
inline int32_t TextureData::_internal_tile_layer() const {
  return _impl_.tile_layer_;
}
inline int32_t TextureData::tile_layer() const {
  // @@protoc_insertion_point(field_get:comm.TextureData.tile_layer)
  return _internal_tile_layer();
}
inline void TextureData::_internal_set_tile_layer(int32_t value) {
  
  _impl_.tile_layer_ = value;
}
inline void TextureData::set_tile_layer(int32_t value) {
  _internal_set_tile_layer(value);
  // @@protoc_insertion_point(field_set:comm.TextureData.tile_layer)
}

// -------------------------------------------------------------------

// CollisionData

// int32 type = 1;
inline void CollisionData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t CollisionData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t CollisionData::type() const {
  // @@protoc_insertion_point(field_get:comm.CollisionData.type)
  return _internal_type();
}
inline void CollisionData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void CollisionData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:comm.CollisionData.type)
}

// float width = 2;
inline void CollisionData::clear_width() {
  _impl_.width_ = 0;
}
inline float CollisionData::_internal_width() const {
  return _impl_.width_;
}
inline float CollisionData::width() const {
  // @@protoc_insertion_point(field_get:comm.CollisionData.width)
  return _internal_width();
}
inline void CollisionData::_internal_set_width(float value) {
  
  _impl_.width_ = value;
}
inline void CollisionData::set_width(float value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:comm.CollisionData.width)
}

// float height = 3;
inline void CollisionData::clear_height() {
  _impl_.height_ = 0;
}
inline float CollisionData::_internal_height() const {
  return _impl_.height_;
}
inline float CollisionData::height() const {
  // @@protoc_insertion_point(field_get:comm.CollisionData.height)
  return _internal_height();
}
inline void CollisionData::_internal_set_height(float value) {
  
  _impl_.height_ = value;
}
inline void CollisionData::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:comm.CollisionData.height)
}

// float x_offset = 4;
inline void CollisionData::clear_x_offset() {
  _impl_.x_offset_ = 0;
}
inline float CollisionData::_internal_x_offset() const {
  return _impl_.x_offset_;
}
inline float CollisionData::x_offset() const {
  // @@protoc_insertion_point(field_get:comm.CollisionData.x_offset)
  return _internal_x_offset();
}
inline void CollisionData::_internal_set_x_offset(float value) {
  
  _impl_.x_offset_ = value;
}
inline void CollisionData::set_x_offset(float value) {
  _internal_set_x_offset(value);
  // @@protoc_insertion_point(field_set:comm.CollisionData.x_offset)
}

// float y_offset = 5;
inline void CollisionData::clear_y_offset() {
  _impl_.y_offset_ = 0;
}
inline float CollisionData::_internal_y_offset() const {
  return _impl_.y_offset_;
}
inline float CollisionData::y_offset() const {
  // @@protoc_insertion_point(field_get:comm.CollisionData.y_offset)
  return _internal_y_offset();
}
inline void CollisionData::_internal_set_y_offset(float value) {
  
  _impl_.y_offset_ = value;
}
inline void CollisionData::set_y_offset(float value) {
  _internal_set_y_offset(value);
  // @@protoc_insertion_point(field_set:comm.CollisionData.y_offset)
}

// -------------------------------------------------------------------

// EnemyGotHitUpdate

// uint32 player_id = 1;
inline void EnemyGotHitUpdate::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t EnemyGotHitUpdate::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t EnemyGotHitUpdate::player_id() const {
  // @@protoc_insertion_point(field_get:comm.EnemyGotHitUpdate.player_id)
  return _internal_player_id();
}
inline void EnemyGotHitUpdate::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void EnemyGotHitUpdate::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:comm.EnemyGotHitUpdate.player_id)
}

// uint32 enemy_id = 2;
inline void EnemyGotHitUpdate::clear_enemy_id() {
  _impl_.enemy_id_ = 0u;
}
inline uint32_t EnemyGotHitUpdate::_internal_enemy_id() const {
  return _impl_.enemy_id_;
}
inline uint32_t EnemyGotHitUpdate::enemy_id() const {
  // @@protoc_insertion_point(field_get:comm.EnemyGotHitUpdate.enemy_id)
  return _internal_enemy_id();
}
inline void EnemyGotHitUpdate::_internal_set_enemy_id(uint32_t value) {
  
  _impl_.enemy_id_ = value;
}
inline void EnemyGotHitUpdate::set_enemy_id(uint32_t value) {
  _internal_set_enemy_id(value);
  // @@protoc_insertion_point(field_set:comm.EnemyGotHitUpdate.enemy_id)
}

// -------------------------------------------------------------------

// EnemyPositionsUpdate

// repeated .comm.Enemy enemy_positions = 1;
inline int EnemyPositionsUpdate::_internal_enemy_positions_size() const {
  return _impl_.enemy_positions_.size();
}
inline int EnemyPositionsUpdate::enemy_positions_size() const {
  return _internal_enemy_positions_size();
}
inline void EnemyPositionsUpdate::clear_enemy_positions() {
  _impl_.enemy_positions_.Clear();
}
inline ::comm::Enemy* EnemyPositionsUpdate::mutable_enemy_positions(int index) {
  // @@protoc_insertion_point(field_mutable:comm.EnemyPositionsUpdate.enemy_positions)
  return _impl_.enemy_positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >*
EnemyPositionsUpdate::mutable_enemy_positions() {
  // @@protoc_insertion_point(field_mutable_list:comm.EnemyPositionsUpdate.enemy_positions)
  return &_impl_.enemy_positions_;
}
inline const ::comm::Enemy& EnemyPositionsUpdate::_internal_enemy_positions(int index) const {
  return _impl_.enemy_positions_.Get(index);
}
inline const ::comm::Enemy& EnemyPositionsUpdate::enemy_positions(int index) const {
  // @@protoc_insertion_point(field_get:comm.EnemyPositionsUpdate.enemy_positions)
  return _internal_enemy_positions(index);
}
inline ::comm::Enemy* EnemyPositionsUpdate::_internal_add_enemy_positions() {
  return _impl_.enemy_positions_.Add();
}
inline ::comm::Enemy* EnemyPositionsUpdate::add_enemy_positions() {
  ::comm::Enemy* _add = _internal_add_enemy_positions();
  // @@protoc_insertion_point(field_add:comm.EnemyPositionsUpdate.enemy_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >&
EnemyPositionsUpdate::enemy_positions() const {
  // @@protoc_insertion_point(field_list:comm.EnemyPositionsUpdate.enemy_positions)
  return _impl_.enemy_positions_;
}

// -------------------------------------------------------------------

// MapPositionsUpdate

// repeated .comm.Player players = 1;
inline int MapPositionsUpdate::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int MapPositionsUpdate::players_size() const {
  return _internal_players_size();
}
inline void MapPositionsUpdate::clear_players() {
  _impl_.players_.Clear();
}
inline ::comm::Player* MapPositionsUpdate::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >*
MapPositionsUpdate::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.players)
  return &_impl_.players_;
}
inline const ::comm::Player& MapPositionsUpdate::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::comm::Player& MapPositionsUpdate::players(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.players)
  return _internal_players(index);
}
inline ::comm::Player* MapPositionsUpdate::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::comm::Player* MapPositionsUpdate::add_players() {
  ::comm::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Player >&
MapPositionsUpdate::players() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.players)
  return _impl_.players_;
}

// repeated .comm.Enemy enemies = 2;
inline int MapPositionsUpdate::_internal_enemies_size() const {
  return _impl_.enemies_.size();
}
inline int MapPositionsUpdate::enemies_size() const {
  return _internal_enemies_size();
}
inline void MapPositionsUpdate::clear_enemies() {
  _impl_.enemies_.Clear();
}
inline ::comm::Enemy* MapPositionsUpdate::mutable_enemies(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.enemies)
  return _impl_.enemies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >*
MapPositionsUpdate::mutable_enemies() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.enemies)
  return &_impl_.enemies_;
}
inline const ::comm::Enemy& MapPositionsUpdate::_internal_enemies(int index) const {
  return _impl_.enemies_.Get(index);
}
inline const ::comm::Enemy& MapPositionsUpdate::enemies(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.enemies)
  return _internal_enemies(index);
}
inline ::comm::Enemy* MapPositionsUpdate::_internal_add_enemies() {
  return _impl_.enemies_.Add();
}
inline ::comm::Enemy* MapPositionsUpdate::add_enemies() {
  ::comm::Enemy* _add = _internal_add_enemies();
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.enemies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >&
MapPositionsUpdate::enemies() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.enemies)
  return _impl_.enemies_;
}

// -------------------------------------------------------------------

// MapDimensionsUpdate

// repeated .comm.Obstacle obstacles = 1;
inline int MapDimensionsUpdate::_internal_obstacles_size() const {
  return _impl_.obstacles_.size();
}
inline int MapDimensionsUpdate::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void MapDimensionsUpdate::clear_obstacles() {
  _impl_.obstacles_.Clear();
}
inline ::comm::Obstacle* MapDimensionsUpdate::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapDimensionsUpdate.obstacles)
  return _impl_.obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >*
MapDimensionsUpdate::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapDimensionsUpdate.obstacles)
  return &_impl_.obstacles_;
}
inline const ::comm::Obstacle& MapDimensionsUpdate::_internal_obstacles(int index) const {
  return _impl_.obstacles_.Get(index);
}
inline const ::comm::Obstacle& MapDimensionsUpdate::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapDimensionsUpdate.obstacles)
  return _internal_obstacles(index);
}
inline ::comm::Obstacle* MapDimensionsUpdate::_internal_add_obstacles() {
  return _impl_.obstacles_.Add();
}
inline ::comm::Obstacle* MapDimensionsUpdate::add_obstacles() {
  ::comm::Obstacle* _add = _internal_add_obstacles();
  // @@protoc_insertion_point(field_add:comm.MapDimensionsUpdate.obstacles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >&
MapDimensionsUpdate::obstacles() const {
  // @@protoc_insertion_point(field_list:comm.MapDimensionsUpdate.obstacles)
  return _impl_.obstacles_;
}

// -------------------------------------------------------------------

// SpawningEnemiesResponse

// repeated uint32 enemy_id = 1;
inline int SpawningEnemiesResponse::_internal_enemy_id_size() const {
  return _impl_.enemy_id_.size();
}
inline int SpawningEnemiesResponse::enemy_id_size() const {
  return _internal_enemy_id_size();
}
inline void SpawningEnemiesResponse::clear_enemy_id() {
  _impl_.enemy_id_.Clear();
}
inline uint32_t SpawningEnemiesResponse::_internal_enemy_id(int index) const {
  return _impl_.enemy_id_.Get(index);
}
inline uint32_t SpawningEnemiesResponse::enemy_id(int index) const {
  // @@protoc_insertion_point(field_get:comm.SpawningEnemiesResponse.enemy_id)
  return _internal_enemy_id(index);
}
inline void SpawningEnemiesResponse::set_enemy_id(int index, uint32_t value) {
  _impl_.enemy_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.SpawningEnemiesResponse.enemy_id)
}
inline void SpawningEnemiesResponse::_internal_add_enemy_id(uint32_t value) {
  _impl_.enemy_id_.Add(value);
}
inline void SpawningEnemiesResponse::add_enemy_id(uint32_t value) {
  _internal_add_enemy_id(value);
  // @@protoc_insertion_point(field_add:comm.SpawningEnemiesResponse.enemy_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SpawningEnemiesResponse::_internal_enemy_id() const {
  return _impl_.enemy_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SpawningEnemiesResponse::enemy_id() const {
  // @@protoc_insertion_point(field_list:comm.SpawningEnemiesResponse.enemy_id)
  return _internal_enemy_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SpawningEnemiesResponse::_internal_mutable_enemy_id() {
  return &_impl_.enemy_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SpawningEnemiesResponse::mutable_enemy_id() {
  // @@protoc_insertion_point(field_mutable_list:comm.SpawningEnemiesResponse.enemy_id)
  return _internal_mutable_enemy_id();
}

// -------------------------------------------------------------------

// BytePrefix

// uint32 bytes = 1;
inline void BytePrefix::clear_bytes() {
  _impl_.bytes_ = 0u;
}
inline uint32_t BytePrefix::_internal_bytes() const {
  return _impl_.bytes_;
}
inline uint32_t BytePrefix::bytes() const {
  // @@protoc_insertion_point(field_get:comm.BytePrefix.bytes)
  return _internal_bytes();
}
inline void BytePrefix::_internal_set_bytes(uint32_t value) {
  
  _impl_.bytes_ = value;
}
inline void BytePrefix::set_bytes(uint32_t value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:comm.BytePrefix.bytes)
}

// -------------------------------------------------------------------

// StateUpdate

// .comm.Player player = 1;
inline bool StateUpdate::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool StateUpdate::has_player() const {
  return _internal_has_player();
}
inline void StateUpdate::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::comm::Player& StateUpdate::_internal_player() const {
  const ::comm::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Player&>(
      ::comm::_Player_default_instance_);
}
inline const ::comm::Player& StateUpdate::player() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.player)
  return _internal_player();
}
inline void StateUpdate::unsafe_arena_set_allocated_player(
    ::comm::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.player)
}
inline ::comm::Player* StateUpdate::release_player() {
  
  ::comm::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Player* StateUpdate::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.player)
  
  ::comm::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::comm::Player* StateUpdate::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::comm::Player* StateUpdate::mutable_player() {
  ::comm::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.player)
  return _msg;
}
inline void StateUpdate::set_allocated_player(::comm::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.player)
}

// .comm.Item item = 2;
inline bool StateUpdate::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool StateUpdate::has_item() const {
  return _internal_has_item();
}
inline void StateUpdate::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
inline const ::comm::Item& StateUpdate::_internal_item() const {
  const ::comm::Item* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Item&>(
      ::comm::_Item_default_instance_);
}
inline const ::comm::Item& StateUpdate::item() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.item)
  return _internal_item();
}
inline void StateUpdate::unsafe_arena_set_allocated_item(
    ::comm::Item* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.item)
}
inline ::comm::Item* StateUpdate::release_item() {
  
  ::comm::Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Item* StateUpdate::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.item)
  
  ::comm::Item* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::comm::Item* StateUpdate::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Item>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::comm::Item* StateUpdate::mutable_item() {
  ::comm::Item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.item)
  return _msg;
}
inline void StateUpdate::set_allocated_item(::comm::Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.item)
}

// .comm.StateVariant variant = 3;
inline void StateUpdate::clear_variant() {
  _impl_.variant_ = 0;
}
inline ::comm::StateVariant StateUpdate::_internal_variant() const {
  return static_cast< ::comm::StateVariant >(_impl_.variant_);
}
inline ::comm::StateVariant StateUpdate::variant() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.variant)
  return _internal_variant();
}
inline void StateUpdate::_internal_set_variant(::comm::StateVariant value) {
  
  _impl_.variant_ = value;
}
inline void StateUpdate::set_variant(::comm::StateVariant value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:comm.StateUpdate.variant)
}

// .comm.Room room = 4;
inline bool StateUpdate::_internal_has_room() const {
  return this != internal_default_instance() && _impl_.room_ != nullptr;
}
inline bool StateUpdate::has_room() const {
  return _internal_has_room();
}
inline void StateUpdate::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
inline const ::comm::Room& StateUpdate::_internal_room() const {
  const ::comm::Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Room&>(
      ::comm::_Room_default_instance_);
}
inline const ::comm::Room& StateUpdate::room() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.room)
  return _internal_room();
}
inline void StateUpdate::unsafe_arena_set_allocated_room(
    ::comm::Room* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.room)
}
inline ::comm::Room* StateUpdate::release_room() {
  
  ::comm::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Room* StateUpdate::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.room)
  
  ::comm::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::comm::Room* StateUpdate::_internal_mutable_room() {
  
  if (_impl_.room_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Room>(GetArenaForAllocation());
    _impl_.room_ = p;
  }
  return _impl_.room_;
}
inline ::comm::Room* StateUpdate::mutable_room() {
  ::comm::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.room)
  return _msg;
}
inline void StateUpdate::set_allocated_room(::comm::Room* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.room_;
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room);
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_ = room;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.room)
}

// .comm.MapPositionsUpdate map_Positions_Update = 5;
inline bool StateUpdate::_internal_has_map_positions_update() const {
  return this != internal_default_instance() && _impl_.map_positions_update_ != nullptr;
}
inline bool StateUpdate::has_map_positions_update() const {
  return _internal_has_map_positions_update();
}
inline void StateUpdate::clear_map_positions_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_positions_update_ != nullptr) {
    delete _impl_.map_positions_update_;
  }
  _impl_.map_positions_update_ = nullptr;
}
inline const ::comm::MapPositionsUpdate& StateUpdate::_internal_map_positions_update() const {
  const ::comm::MapPositionsUpdate* p = _impl_.map_positions_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::MapPositionsUpdate&>(
      ::comm::_MapPositionsUpdate_default_instance_);
}
inline const ::comm::MapPositionsUpdate& StateUpdate::map_positions_update() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.map_Positions_Update)
  return _internal_map_positions_update();
}
inline void StateUpdate::unsafe_arena_set_allocated_map_positions_update(
    ::comm::MapPositionsUpdate* map_positions_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_positions_update_);
  }
  _impl_.map_positions_update_ = map_positions_update;
  if (map_positions_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.map_Positions_Update)
}
inline ::comm::MapPositionsUpdate* StateUpdate::release_map_positions_update() {
  
  ::comm::MapPositionsUpdate* temp = _impl_.map_positions_update_;
  _impl_.map_positions_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::MapPositionsUpdate* StateUpdate::unsafe_arena_release_map_positions_update() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.map_Positions_Update)
  
  ::comm::MapPositionsUpdate* temp = _impl_.map_positions_update_;
  _impl_.map_positions_update_ = nullptr;
  return temp;
}
inline ::comm::MapPositionsUpdate* StateUpdate::_internal_mutable_map_positions_update() {
  
  if (_impl_.map_positions_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::MapPositionsUpdate>(GetArenaForAllocation());
    _impl_.map_positions_update_ = p;
  }
  return _impl_.map_positions_update_;
}
inline ::comm::MapPositionsUpdate* StateUpdate::mutable_map_positions_update() {
  ::comm::MapPositionsUpdate* _msg = _internal_mutable_map_positions_update();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.map_Positions_Update)
  return _msg;
}
inline void StateUpdate::set_allocated_map_positions_update(::comm::MapPositionsUpdate* map_positions_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.map_positions_update_;
  }
  if (map_positions_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_positions_update);
    if (message_arena != submessage_arena) {
      map_positions_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_positions_update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_positions_update_ = map_positions_update;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.map_Positions_Update)
}

// .comm.MovementUpdate position_Update = 6;
inline bool StateUpdate::_internal_has_position_update() const {
  return this != internal_default_instance() && _impl_.position_update_ != nullptr;
}
inline bool StateUpdate::has_position_update() const {
  return _internal_has_position_update();
}
inline void StateUpdate::clear_position_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_update_ != nullptr) {
    delete _impl_.position_update_;
  }
  _impl_.position_update_ = nullptr;
}
inline const ::comm::MovementUpdate& StateUpdate::_internal_position_update() const {
  const ::comm::MovementUpdate* p = _impl_.position_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::MovementUpdate&>(
      ::comm::_MovementUpdate_default_instance_);
}
inline const ::comm::MovementUpdate& StateUpdate::position_update() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.position_Update)
  return _internal_position_update();
}
inline void StateUpdate::unsafe_arena_set_allocated_position_update(
    ::comm::MovementUpdate* position_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_update_);
  }
  _impl_.position_update_ = position_update;
  if (position_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.position_Update)
}
inline ::comm::MovementUpdate* StateUpdate::release_position_update() {
  
  ::comm::MovementUpdate* temp = _impl_.position_update_;
  _impl_.position_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::MovementUpdate* StateUpdate::unsafe_arena_release_position_update() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.position_Update)
  
  ::comm::MovementUpdate* temp = _impl_.position_update_;
  _impl_.position_update_ = nullptr;
  return temp;
}
inline ::comm::MovementUpdate* StateUpdate::_internal_mutable_position_update() {
  
  if (_impl_.position_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::MovementUpdate>(GetArenaForAllocation());
    _impl_.position_update_ = p;
  }
  return _impl_.position_update_;
}
inline ::comm::MovementUpdate* StateUpdate::mutable_position_update() {
  ::comm::MovementUpdate* _msg = _internal_mutable_position_update();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.position_Update)
  return _msg;
}
inline void StateUpdate::set_allocated_position_update(::comm::MovementUpdate* position_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_update_;
  }
  if (position_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_update);
    if (message_arena != submessage_arena) {
      position_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_update_ = position_update;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.position_Update)
}

// .comm.EnemyPositionsUpdate enemy_Positions_Update = 7;
inline bool StateUpdate::_internal_has_enemy_positions_update() const {
  return this != internal_default_instance() && _impl_.enemy_positions_update_ != nullptr;
}
inline bool StateUpdate::has_enemy_positions_update() const {
  return _internal_has_enemy_positions_update();
}
inline void StateUpdate::clear_enemy_positions_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.enemy_positions_update_ != nullptr) {
    delete _impl_.enemy_positions_update_;
  }
  _impl_.enemy_positions_update_ = nullptr;
}
inline const ::comm::EnemyPositionsUpdate& StateUpdate::_internal_enemy_positions_update() const {
  const ::comm::EnemyPositionsUpdate* p = _impl_.enemy_positions_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::EnemyPositionsUpdate&>(
      ::comm::_EnemyPositionsUpdate_default_instance_);
}
inline const ::comm::EnemyPositionsUpdate& StateUpdate::enemy_positions_update() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.enemy_Positions_Update)
  return _internal_enemy_positions_update();
}
inline void StateUpdate::unsafe_arena_set_allocated_enemy_positions_update(
    ::comm::EnemyPositionsUpdate* enemy_positions_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enemy_positions_update_);
  }
  _impl_.enemy_positions_update_ = enemy_positions_update;
  if (enemy_positions_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.enemy_Positions_Update)
}
inline ::comm::EnemyPositionsUpdate* StateUpdate::release_enemy_positions_update() {
  
  ::comm::EnemyPositionsUpdate* temp = _impl_.enemy_positions_update_;
  _impl_.enemy_positions_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::EnemyPositionsUpdate* StateUpdate::unsafe_arena_release_enemy_positions_update() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.enemy_Positions_Update)
  
  ::comm::EnemyPositionsUpdate* temp = _impl_.enemy_positions_update_;
  _impl_.enemy_positions_update_ = nullptr;
  return temp;
}
inline ::comm::EnemyPositionsUpdate* StateUpdate::_internal_mutable_enemy_positions_update() {
  
  if (_impl_.enemy_positions_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::EnemyPositionsUpdate>(GetArenaForAllocation());
    _impl_.enemy_positions_update_ = p;
  }
  return _impl_.enemy_positions_update_;
}
inline ::comm::EnemyPositionsUpdate* StateUpdate::mutable_enemy_positions_update() {
  ::comm::EnemyPositionsUpdate* _msg = _internal_mutable_enemy_positions_update();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.enemy_Positions_Update)
  return _msg;
}
inline void StateUpdate::set_allocated_enemy_positions_update(::comm::EnemyPositionsUpdate* enemy_positions_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.enemy_positions_update_;
  }
  if (enemy_positions_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enemy_positions_update);
    if (message_arena != submessage_arena) {
      enemy_positions_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enemy_positions_update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enemy_positions_update_ = enemy_positions_update;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.enemy_Positions_Update)
}

// .comm.MapDimensionsUpdate map_Dimensions_Update = 8;
inline bool StateUpdate::_internal_has_map_dimensions_update() const {
  return this != internal_default_instance() && _impl_.map_dimensions_update_ != nullptr;
}
inline bool StateUpdate::has_map_dimensions_update() const {
  return _internal_has_map_dimensions_update();
}
inline void StateUpdate::clear_map_dimensions_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_dimensions_update_ != nullptr) {
    delete _impl_.map_dimensions_update_;
  }
  _impl_.map_dimensions_update_ = nullptr;
}
inline const ::comm::MapDimensionsUpdate& StateUpdate::_internal_map_dimensions_update() const {
  const ::comm::MapDimensionsUpdate* p = _impl_.map_dimensions_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::MapDimensionsUpdate&>(
      ::comm::_MapDimensionsUpdate_default_instance_);
}
inline const ::comm::MapDimensionsUpdate& StateUpdate::map_dimensions_update() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.map_Dimensions_Update)
  return _internal_map_dimensions_update();
}
inline void StateUpdate::unsafe_arena_set_allocated_map_dimensions_update(
    ::comm::MapDimensionsUpdate* map_dimensions_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_dimensions_update_);
  }
  _impl_.map_dimensions_update_ = map_dimensions_update;
  if (map_dimensions_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.map_Dimensions_Update)
}
inline ::comm::MapDimensionsUpdate* StateUpdate::release_map_dimensions_update() {
  
  ::comm::MapDimensionsUpdate* temp = _impl_.map_dimensions_update_;
  _impl_.map_dimensions_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::MapDimensionsUpdate* StateUpdate::unsafe_arena_release_map_dimensions_update() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.map_Dimensions_Update)
  
  ::comm::MapDimensionsUpdate* temp = _impl_.map_dimensions_update_;
  _impl_.map_dimensions_update_ = nullptr;
  return temp;
}
inline ::comm::MapDimensionsUpdate* StateUpdate::_internal_mutable_map_dimensions_update() {
  
  if (_impl_.map_dimensions_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::MapDimensionsUpdate>(GetArenaForAllocation());
    _impl_.map_dimensions_update_ = p;
  }
  return _impl_.map_dimensions_update_;
}
inline ::comm::MapDimensionsUpdate* StateUpdate::mutable_map_dimensions_update() {
  ::comm::MapDimensionsUpdate* _msg = _internal_mutable_map_dimensions_update();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.map_Dimensions_Update)
  return _msg;
}
inline void StateUpdate::set_allocated_map_dimensions_update(::comm::MapDimensionsUpdate* map_dimensions_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.map_dimensions_update_;
  }
  if (map_dimensions_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_dimensions_update);
    if (message_arena != submessage_arena) {
      map_dimensions_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_dimensions_update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.map_dimensions_update_ = map_dimensions_update;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.map_Dimensions_Update)
}

// .comm.EnemyGotHitUpdate enemy_Got_Hit_Update = 9;
inline bool StateUpdate::_internal_has_enemy_got_hit_update() const {
  return this != internal_default_instance() && _impl_.enemy_got_hit_update_ != nullptr;
}
inline bool StateUpdate::has_enemy_got_hit_update() const {
  return _internal_has_enemy_got_hit_update();
}
inline void StateUpdate::clear_enemy_got_hit_update() {
  if (GetArenaForAllocation() == nullptr && _impl_.enemy_got_hit_update_ != nullptr) {
    delete _impl_.enemy_got_hit_update_;
  }
  _impl_.enemy_got_hit_update_ = nullptr;
}
inline const ::comm::EnemyGotHitUpdate& StateUpdate::_internal_enemy_got_hit_update() const {
  const ::comm::EnemyGotHitUpdate* p = _impl_.enemy_got_hit_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::EnemyGotHitUpdate&>(
      ::comm::_EnemyGotHitUpdate_default_instance_);
}
inline const ::comm::EnemyGotHitUpdate& StateUpdate::enemy_got_hit_update() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.enemy_Got_Hit_Update)
  return _internal_enemy_got_hit_update();
}
inline void StateUpdate::unsafe_arena_set_allocated_enemy_got_hit_update(
    ::comm::EnemyGotHitUpdate* enemy_got_hit_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enemy_got_hit_update_);
  }
  _impl_.enemy_got_hit_update_ = enemy_got_hit_update;
  if (enemy_got_hit_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.enemy_Got_Hit_Update)
}
inline ::comm::EnemyGotHitUpdate* StateUpdate::release_enemy_got_hit_update() {
  
  ::comm::EnemyGotHitUpdate* temp = _impl_.enemy_got_hit_update_;
  _impl_.enemy_got_hit_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::EnemyGotHitUpdate* StateUpdate::unsafe_arena_release_enemy_got_hit_update() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.enemy_Got_Hit_Update)
  
  ::comm::EnemyGotHitUpdate* temp = _impl_.enemy_got_hit_update_;
  _impl_.enemy_got_hit_update_ = nullptr;
  return temp;
}
inline ::comm::EnemyGotHitUpdate* StateUpdate::_internal_mutable_enemy_got_hit_update() {
  
  if (_impl_.enemy_got_hit_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::EnemyGotHitUpdate>(GetArenaForAllocation());
    _impl_.enemy_got_hit_update_ = p;
  }
  return _impl_.enemy_got_hit_update_;
}
inline ::comm::EnemyGotHitUpdate* StateUpdate::mutable_enemy_got_hit_update() {
  ::comm::EnemyGotHitUpdate* _msg = _internal_mutable_enemy_got_hit_update();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.enemy_Got_Hit_Update)
  return _msg;
}
inline void StateUpdate::set_allocated_enemy_got_hit_update(::comm::EnemyGotHitUpdate* enemy_got_hit_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.enemy_got_hit_update_;
  }
  if (enemy_got_hit_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enemy_got_hit_update);
    if (message_arena != submessage_arena) {
      enemy_got_hit_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enemy_got_hit_update, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enemy_got_hit_update_ = enemy_got_hit_update;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.enemy_Got_Hit_Update)
}

// bytes compressed_map_dimensions_update = 10;
inline void StateUpdate::clear_compressed_map_dimensions_update() {
  _impl_.compressed_map_dimensions_update_.ClearToEmpty();
}
inline const std::string& StateUpdate::compressed_map_dimensions_update() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.compressed_map_dimensions_update)
  return _internal_compressed_map_dimensions_update();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StateUpdate::set_compressed_map_dimensions_update(ArgT0&& arg0, ArgT... args) {
 
 _impl_.compressed_map_dimensions_update_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:comm.StateUpdate.compressed_map_dimensions_update)
}
inline std::string* StateUpdate::mutable_compressed_map_dimensions_update() {
  std::string* _s = _internal_mutable_compressed_map_dimensions_update();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.compressed_map_dimensions_update)
  return _s;
}
inline const std::string& StateUpdate::_internal_compressed_map_dimensions_update() const {
  return _impl_.compressed_map_dimensions_update_.Get();
}
inline void StateUpdate::_internal_set_compressed_map_dimensions_update(const std::string& value) {
  
  _impl_.compressed_map_dimensions_update_.Set(value, GetArenaForAllocation());
}
inline std::string* StateUpdate::_internal_mutable_compressed_map_dimensions_update() {
  
  return _impl_.compressed_map_dimensions_update_.Mutable(GetArenaForAllocation());
}
inline std::string* StateUpdate::release_compressed_map_dimensions_update() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.compressed_map_dimensions_update)
  return _impl_.compressed_map_dimensions_update_.Release();
}
inline void StateUpdate::set_allocated_compressed_map_dimensions_update(std::string* compressed_map_dimensions_update) {
  if (compressed_map_dimensions_update != nullptr) {
    
  } else {
    
  }
  _impl_.compressed_map_dimensions_update_.SetAllocated(compressed_map_dimensions_update, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compressed_map_dimensions_update_.IsDefault()) {
    _impl_.compressed_map_dimensions_update_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.compressed_map_dimensions_update)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::comm::StateVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::StateVariant>() {
  return ::comm::StateVariant_descriptor();
}
template <> struct is_proto_enum< ::comm::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::ItemType>() {
  return ::comm::ItemType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
