// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comm_2eproto;
namespace comm {
class Enemy;
struct EnemyDefaultTypeInternal;
extern EnemyDefaultTypeInternal _Enemy_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class MapPositionsUpdate;
struct MapPositionsUpdateDefaultTypeInternal;
extern MapPositionsUpdateDefaultTypeInternal _MapPositionsUpdate_default_instance_;
class Obstacle;
struct ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class PositionUpdate;
struct PositionUpdateDefaultTypeInternal;
extern PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class StateUpdate;
struct StateUpdateDefaultTypeInternal;
extern StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
}  // namespace comm
PROTOBUF_NAMESPACE_OPEN
template<> ::comm::Enemy* Arena::CreateMaybeMessage<::comm::Enemy>(Arena*);
template<> ::comm::GameState* Arena::CreateMaybeMessage<::comm::GameState>(Arena*);
template<> ::comm::MapPositionsUpdate* Arena::CreateMaybeMessage<::comm::MapPositionsUpdate>(Arena*);
template<> ::comm::Obstacle* Arena::CreateMaybeMessage<::comm::Obstacle>(Arena*);
template<> ::comm::PositionUpdate* Arena::CreateMaybeMessage<::comm::PositionUpdate>(Arena*);
template<> ::comm::Room* Arena::CreateMaybeMessage<::comm::Room>(Arena*);
template<> ::comm::StateUpdate* Arena::CreateMaybeMessage<::comm::StateUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace comm {

enum StateVariant : int {
  NONE = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
  ROOM_CHANGED = 3,
  MAP_UPDATE = 4,
  PLAYER_POSITION_UPDATE = 5,
  StateVariant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StateVariant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StateVariant_IsValid(int value);
constexpr StateVariant StateVariant_MIN = NONE;
constexpr StateVariant StateVariant_MAX = PLAYER_POSITION_UPDATE;
constexpr int StateVariant_ARRAYSIZE = StateVariant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateVariant_descriptor();
template<typename T>
inline const std::string& StateVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateVariant_descriptor(), enum_t_value);
}
inline bool StateVariant_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateVariant>(
    StateVariant_descriptor(), name, value);
}
// ===================================================================

class PositionUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.PositionUpdate) */ {
 public:
  inline PositionUpdate() : PositionUpdate(nullptr) {}
  ~PositionUpdate() override;
  explicit PROTOBUF_CONSTEXPR PositionUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionUpdate(const PositionUpdate& from);
  PositionUpdate(PositionUpdate&& from) noexcept
    : PositionUpdate() {
    *this = ::std::move(from);
  }

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionUpdate& operator=(PositionUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionUpdate* internal_default_instance() {
    return reinterpret_cast<const PositionUpdate*>(
               &_PositionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionUpdate& a, PositionUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionUpdate& from) {
    PositionUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.PositionUpdate";
  }
  protected:
  explicit PositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrRoomFieldNumber = 5,
    kEntityIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kDirectionFieldNumber = 4,
  };
  // .comm.Room curr_room = 5;
  bool has_curr_room() const;
  private:
  bool _internal_has_curr_room() const;
  public:
  void clear_curr_room();
  const ::comm::Room& curr_room() const;
  PROTOBUF_NODISCARD ::comm::Room* release_curr_room();
  ::comm::Room* mutable_curr_room();
  void set_allocated_curr_room(::comm::Room* curr_room);
  private:
  const ::comm::Room& _internal_curr_room() const;
  ::comm::Room* _internal_mutable_curr_room();
  public:
  void unsafe_arena_set_allocated_curr_room(
      ::comm::Room* curr_room);
  ::comm::Room* unsafe_arena_release_curr_room();

  // uint32 entity_id = 1;
  void clear_entity_id();
  uint32_t entity_id() const;
  void set_entity_id(uint32_t value);
  private:
  uint32_t _internal_entity_id() const;
  void _internal_set_entity_id(uint32_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float direction = 4;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // @@protoc_insertion_point(class_scope:comm.PositionUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::comm::Room* curr_room_;
    uint32_t entity_id_;
    float x_;
    float y_;
    float direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class GameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit PROTOBUF_CONSTEXPR GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameState& from) {
    GameState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedPlayersFieldNumber = 3,
    kSeedFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated uint32 connected_players = 3;
  int connected_players_size() const;
  private:
  int _internal_connected_players_size() const;
  public:
  void clear_connected_players();
  private:
  uint32_t _internal_connected_players(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_connected_players() const;
  void _internal_add_connected_players(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_connected_players();
  public:
  uint32_t connected_players(int index) const;
  void set_connected_players(int index, uint32_t value);
  void add_connected_players(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      connected_players() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_connected_players();

  // int64 seed = 2;
  void clear_seed();
  int64_t seed() const;
  void set_seed(int64_t value);
  private:
  int64_t _internal_seed() const;
  void _internal_set_seed(int64_t value);
  public:

  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > connected_players_;
    mutable std::atomic<int> _connected_players_cached_byte_size_;
    int64_t seed_;
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  explicit PROTOBUF_CONSTEXPR Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Room& from) {
    Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Obstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Obstacle) */ {
 public:
  inline Obstacle() : Obstacle(nullptr) {}
  ~Obstacle() override;
  explicit PROTOBUF_CONSTEXPR Obstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Obstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Obstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Obstacle& from) {
    Obstacle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Obstacle";
  }
  protected:
  explicit Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kLeftFieldNumber = 3,
    kTopFieldNumber = 4,
  };
  // int32 height = 1;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 width = 2;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 left = 3;
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // int32 top = 4;
  void clear_top();
  int32_t top() const;
  void set_top(int32_t value);
  private:
  int32_t _internal_top() const;
  void _internal_set_top(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Obstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t height_;
    int32_t width_;
    int32_t left_;
    int32_t top_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class Enemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.Enemy) */ {
 public:
  inline Enemy() : Enemy(nullptr) {}
  ~Enemy() override;
  explicit PROTOBUF_CONSTEXPR Enemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Enemy(const Enemy& from);
  Enemy(Enemy&& from) noexcept
    : Enemy() {
    *this = ::std::move(from);
  }

  inline Enemy& operator=(const Enemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enemy& operator=(Enemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Enemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enemy* internal_default_instance() {
    return reinterpret_cast<const Enemy*>(
               &_Enemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Enemy& a, Enemy& b) {
    a.Swap(&b);
  }
  inline void Swap(Enemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Enemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Enemy& from) {
    Enemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.Enemy";
  }
  protected:
  explicit Enemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:comm.Enemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class MapPositionsUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.MapPositionsUpdate) */ {
 public:
  inline MapPositionsUpdate() : MapPositionsUpdate(nullptr) {}
  ~MapPositionsUpdate() override;
  explicit PROTOBUF_CONSTEXPR MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapPositionsUpdate(const MapPositionsUpdate& from);
  MapPositionsUpdate(MapPositionsUpdate&& from) noexcept
    : MapPositionsUpdate() {
    *this = ::std::move(from);
  }

  inline MapPositionsUpdate& operator=(const MapPositionsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPositionsUpdate& operator=(MapPositionsUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapPositionsUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapPositionsUpdate* internal_default_instance() {
    return reinterpret_cast<const MapPositionsUpdate*>(
               &_MapPositionsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapPositionsUpdate& a, MapPositionsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapPositionsUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapPositionsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapPositionsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapPositionsUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapPositionsUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapPositionsUpdate& from) {
    MapPositionsUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPositionsUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.MapPositionsUpdate";
  }
  protected:
  explicit MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 1,
    kPlayersFieldNumber = 2,
    kEnemiesFieldNumber = 3,
  };
  // repeated .comm.Obstacle obstacles = 1;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::comm::Obstacle* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >*
      mutable_obstacles();
  private:
  const ::comm::Obstacle& _internal_obstacles(int index) const;
  ::comm::Obstacle* _internal_add_obstacles();
  public:
  const ::comm::Obstacle& obstacles(int index) const;
  ::comm::Obstacle* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >&
      obstacles() const;

  // repeated .comm.PositionUpdate players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::comm::PositionUpdate* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PositionUpdate >*
      mutable_players();
  private:
  const ::comm::PositionUpdate& _internal_players(int index) const;
  ::comm::PositionUpdate* _internal_add_players();
  public:
  const ::comm::PositionUpdate& players(int index) const;
  ::comm::PositionUpdate* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PositionUpdate >&
      players() const;

  // repeated .comm.Enemy enemies = 3;
  int enemies_size() const;
  private:
  int _internal_enemies_size() const;
  public:
  void clear_enemies();
  ::comm::Enemy* mutable_enemies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >*
      mutable_enemies();
  private:
  const ::comm::Enemy& _internal_enemies(int index) const;
  ::comm::Enemy* _internal_add_enemies();
  public:
  const ::comm::Enemy& enemies(int index) const;
  ::comm::Enemy* add_enemies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >&
      enemies() const;

  // @@protoc_insertion_point(class_scope:comm.MapPositionsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle > obstacles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PositionUpdate > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy > enemies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class StateUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.StateUpdate) */ {
 public:
  inline StateUpdate() : StateUpdate(nullptr) {}
  ~StateUpdate() override;
  explicit PROTOBUF_CONSTEXPR StateUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StateUpdate(const StateUpdate& from);
  StateUpdate(StateUpdate&& from) noexcept
    : StateUpdate() {
    *this = ::std::move(from);
  }

  inline StateUpdate& operator=(const StateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateUpdate& operator=(StateUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateUpdate* internal_default_instance() {
    return reinterpret_cast<const StateUpdate*>(
               &_StateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StateUpdate& a, StateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(StateUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StateUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StateUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StateUpdate& from) {
    StateUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.StateUpdate";
  }
  protected:
  explicit StateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomFieldNumber = 3,
    kMapPositionsUpdateFieldNumber = 4,
    kPositionUpdateFieldNumber = 5,
    kIdFieldNumber = 1,
    kVariantFieldNumber = 2,
  };
  // .comm.Room room = 3;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::comm::Room& room() const;
  PROTOBUF_NODISCARD ::comm::Room* release_room();
  ::comm::Room* mutable_room();
  void set_allocated_room(::comm::Room* room);
  private:
  const ::comm::Room& _internal_room() const;
  ::comm::Room* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::comm::Room* room);
  ::comm::Room* unsafe_arena_release_room();

  // .comm.MapPositionsUpdate mapPositionsUpdate = 4;
  bool has_mappositionsupdate() const;
  private:
  bool _internal_has_mappositionsupdate() const;
  public:
  void clear_mappositionsupdate();
  const ::comm::MapPositionsUpdate& mappositionsupdate() const;
  PROTOBUF_NODISCARD ::comm::MapPositionsUpdate* release_mappositionsupdate();
  ::comm::MapPositionsUpdate* mutable_mappositionsupdate();
  void set_allocated_mappositionsupdate(::comm::MapPositionsUpdate* mappositionsupdate);
  private:
  const ::comm::MapPositionsUpdate& _internal_mappositionsupdate() const;
  ::comm::MapPositionsUpdate* _internal_mutable_mappositionsupdate();
  public:
  void unsafe_arena_set_allocated_mappositionsupdate(
      ::comm::MapPositionsUpdate* mappositionsupdate);
  ::comm::MapPositionsUpdate* unsafe_arena_release_mappositionsupdate();

  // .comm.PositionUpdate positionUpdate = 5;
  bool has_positionupdate() const;
  private:
  bool _internal_has_positionupdate() const;
  public:
  void clear_positionupdate();
  const ::comm::PositionUpdate& positionupdate() const;
  PROTOBUF_NODISCARD ::comm::PositionUpdate* release_positionupdate();
  ::comm::PositionUpdate* mutable_positionupdate();
  void set_allocated_positionupdate(::comm::PositionUpdate* positionupdate);
  private:
  const ::comm::PositionUpdate& _internal_positionupdate() const;
  ::comm::PositionUpdate* _internal_mutable_positionupdate();
  public:
  void unsafe_arena_set_allocated_positionupdate(
      ::comm::PositionUpdate* positionupdate);
  ::comm::PositionUpdate* unsafe_arena_release_positionupdate();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .comm.StateVariant variant = 2;
  void clear_variant();
  ::comm::StateVariant variant() const;
  void set_variant(::comm::StateVariant value);
  private:
  ::comm::StateVariant _internal_variant() const;
  void _internal_set_variant(::comm::StateVariant value);
  public:

  // @@protoc_insertion_point(class_scope:comm.StateUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::comm::Room* room_;
    ::comm::MapPositionsUpdate* mappositionsupdate_;
    ::comm::PositionUpdate* positionupdate_;
    uint32_t id_;
    int variant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_comm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionUpdate

// uint32 entity_id = 1;
inline void PositionUpdate::clear_entity_id() {
  _impl_.entity_id_ = 0u;
}
inline uint32_t PositionUpdate::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint32_t PositionUpdate::entity_id() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.entity_id)
  return _internal_entity_id();
}
inline void PositionUpdate::_internal_set_entity_id(uint32_t value) {
  
  _impl_.entity_id_ = value;
}
inline void PositionUpdate::set_entity_id(uint32_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.entity_id)
}

// float x = 2;
inline void PositionUpdate::clear_x() {
  _impl_.x_ = 0;
}
inline float PositionUpdate::_internal_x() const {
  return _impl_.x_;
}
inline float PositionUpdate::x() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.x)
  return _internal_x();
}
inline void PositionUpdate::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PositionUpdate::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.x)
}

// float y = 3;
inline void PositionUpdate::clear_y() {
  _impl_.y_ = 0;
}
inline float PositionUpdate::_internal_y() const {
  return _impl_.y_;
}
inline float PositionUpdate::y() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.y)
  return _internal_y();
}
inline void PositionUpdate::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PositionUpdate::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.y)
}

// float direction = 4;
inline void PositionUpdate::clear_direction() {
  _impl_.direction_ = 0;
}
inline float PositionUpdate::_internal_direction() const {
  return _impl_.direction_;
}
inline float PositionUpdate::direction() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.direction)
  return _internal_direction();
}
inline void PositionUpdate::_internal_set_direction(float value) {
  
  _impl_.direction_ = value;
}
inline void PositionUpdate::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.direction)
}

// .comm.Room curr_room = 5;
inline bool PositionUpdate::_internal_has_curr_room() const {
  return this != internal_default_instance() && _impl_.curr_room_ != nullptr;
}
inline bool PositionUpdate::has_curr_room() const {
  return _internal_has_curr_room();
}
inline void PositionUpdate::clear_curr_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.curr_room_ != nullptr) {
    delete _impl_.curr_room_;
  }
  _impl_.curr_room_ = nullptr;
}
inline const ::comm::Room& PositionUpdate::_internal_curr_room() const {
  const ::comm::Room* p = _impl_.curr_room_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Room&>(
      ::comm::_Room_default_instance_);
}
inline const ::comm::Room& PositionUpdate::curr_room() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.curr_room)
  return _internal_curr_room();
}
inline void PositionUpdate::unsafe_arena_set_allocated_curr_room(
    ::comm::Room* curr_room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curr_room_);
  }
  _impl_.curr_room_ = curr_room;
  if (curr_room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.PositionUpdate.curr_room)
}
inline ::comm::Room* PositionUpdate::release_curr_room() {
  
  ::comm::Room* temp = _impl_.curr_room_;
  _impl_.curr_room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Room* PositionUpdate::unsafe_arena_release_curr_room() {
  // @@protoc_insertion_point(field_release:comm.PositionUpdate.curr_room)
  
  ::comm::Room* temp = _impl_.curr_room_;
  _impl_.curr_room_ = nullptr;
  return temp;
}
inline ::comm::Room* PositionUpdate::_internal_mutable_curr_room() {
  
  if (_impl_.curr_room_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Room>(GetArenaForAllocation());
    _impl_.curr_room_ = p;
  }
  return _impl_.curr_room_;
}
inline ::comm::Room* PositionUpdate::mutable_curr_room() {
  ::comm::Room* _msg = _internal_mutable_curr_room();
  // @@protoc_insertion_point(field_mutable:comm.PositionUpdate.curr_room)
  return _msg;
}
inline void PositionUpdate::set_allocated_curr_room(::comm::Room* curr_room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.curr_room_;
  }
  if (curr_room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(curr_room);
    if (message_arena != submessage_arena) {
      curr_room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curr_room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.curr_room_ = curr_room;
  // @@protoc_insertion_point(field_set_allocated:comm.PositionUpdate.curr_room)
}

// -------------------------------------------------------------------

// GameState

// uint32 player_id = 1;
inline void GameState::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t GameState::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t GameState::player_id() const {
  // @@protoc_insertion_point(field_get:comm.GameState.player_id)
  return _internal_player_id();
}
inline void GameState::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void GameState::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:comm.GameState.player_id)
}

// int64 seed = 2;
inline void GameState::clear_seed() {
  _impl_.seed_ = int64_t{0};
}
inline int64_t GameState::_internal_seed() const {
  return _impl_.seed_;
}
inline int64_t GameState::seed() const {
  // @@protoc_insertion_point(field_get:comm.GameState.seed)
  return _internal_seed();
}
inline void GameState::_internal_set_seed(int64_t value) {
  
  _impl_.seed_ = value;
}
inline void GameState::set_seed(int64_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:comm.GameState.seed)
}

// repeated uint32 connected_players = 3;
inline int GameState::_internal_connected_players_size() const {
  return _impl_.connected_players_.size();
}
inline int GameState::connected_players_size() const {
  return _internal_connected_players_size();
}
inline void GameState::clear_connected_players() {
  _impl_.connected_players_.Clear();
}
inline uint32_t GameState::_internal_connected_players(int index) const {
  return _impl_.connected_players_.Get(index);
}
inline uint32_t GameState::connected_players(int index) const {
  // @@protoc_insertion_point(field_get:comm.GameState.connected_players)
  return _internal_connected_players(index);
}
inline void GameState::set_connected_players(int index, uint32_t value) {
  _impl_.connected_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.GameState.connected_players)
}
inline void GameState::_internal_add_connected_players(uint32_t value) {
  _impl_.connected_players_.Add(value);
}
inline void GameState::add_connected_players(uint32_t value) {
  _internal_add_connected_players(value);
  // @@protoc_insertion_point(field_add:comm.GameState.connected_players)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GameState::_internal_connected_players() const {
  return _impl_.connected_players_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
GameState::connected_players() const {
  // @@protoc_insertion_point(field_list:comm.GameState.connected_players)
  return _internal_connected_players();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GameState::_internal_mutable_connected_players() {
  return &_impl_.connected_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
GameState::mutable_connected_players() {
  // @@protoc_insertion_point(field_mutable_list:comm.GameState.connected_players)
  return _internal_mutable_connected_players();
}

// -------------------------------------------------------------------

// Room

// int32 x = 1;
inline void Room::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Room::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Room::x() const {
  // @@protoc_insertion_point(field_get:comm.Room.x)
  return _internal_x();
}
inline void Room::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Room::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.Room.x)
}

// int32 y = 2;
inline void Room::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Room::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Room::y() const {
  // @@protoc_insertion_point(field_get:comm.Room.y)
  return _internal_y();
}
inline void Room::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Room::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.Room.y)
}

// -------------------------------------------------------------------

// Obstacle

// int32 height = 1;
inline void Obstacle::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Obstacle::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Obstacle::height() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.height)
  return _internal_height();
}
inline void Obstacle::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Obstacle::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.height)
}

// int32 width = 2;
inline void Obstacle::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Obstacle::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Obstacle::width() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.width)
  return _internal_width();
}
inline void Obstacle::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Obstacle::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.width)
}

// int32 left = 3;
inline void Obstacle::clear_left() {
  _impl_.left_ = 0;
}
inline int32_t Obstacle::_internal_left() const {
  return _impl_.left_;
}
inline int32_t Obstacle::left() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.left)
  return _internal_left();
}
inline void Obstacle::_internal_set_left(int32_t value) {
  
  _impl_.left_ = value;
}
inline void Obstacle::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.left)
}

// int32 top = 4;
inline void Obstacle::clear_top() {
  _impl_.top_ = 0;
}
inline int32_t Obstacle::_internal_top() const {
  return _impl_.top_;
}
inline int32_t Obstacle::top() const {
  // @@protoc_insertion_point(field_get:comm.Obstacle.top)
  return _internal_top();
}
inline void Obstacle::_internal_set_top(int32_t value) {
  
  _impl_.top_ = value;
}
inline void Obstacle::set_top(int32_t value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:comm.Obstacle.top)
}

// -------------------------------------------------------------------

// Enemy

// uint32 id = 1;
inline void Enemy::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Enemy::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Enemy::id() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.id)
  return _internal_id();
}
inline void Enemy::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Enemy::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.id)
}

// int32 x = 2;
inline void Enemy::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Enemy::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Enemy::x() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.x)
  return _internal_x();
}
inline void Enemy::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Enemy::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.x)
}

// int32 y = 3;
inline void Enemy::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Enemy::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Enemy::y() const {
  // @@protoc_insertion_point(field_get:comm.Enemy.y)
  return _internal_y();
}
inline void Enemy::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Enemy::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.Enemy.y)
}

// -------------------------------------------------------------------

// MapPositionsUpdate

// repeated .comm.Obstacle obstacles = 1;
inline int MapPositionsUpdate::_internal_obstacles_size() const {
  return _impl_.obstacles_.size();
}
inline int MapPositionsUpdate::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void MapPositionsUpdate::clear_obstacles() {
  _impl_.obstacles_.Clear();
}
inline ::comm::Obstacle* MapPositionsUpdate::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.obstacles)
  return _impl_.obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >*
MapPositionsUpdate::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.obstacles)
  return &_impl_.obstacles_;
}
inline const ::comm::Obstacle& MapPositionsUpdate::_internal_obstacles(int index) const {
  return _impl_.obstacles_.Get(index);
}
inline const ::comm::Obstacle& MapPositionsUpdate::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.obstacles)
  return _internal_obstacles(index);
}
inline ::comm::Obstacle* MapPositionsUpdate::_internal_add_obstacles() {
  return _impl_.obstacles_.Add();
}
inline ::comm::Obstacle* MapPositionsUpdate::add_obstacles() {
  ::comm::Obstacle* _add = _internal_add_obstacles();
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.obstacles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Obstacle >&
MapPositionsUpdate::obstacles() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.obstacles)
  return _impl_.obstacles_;
}

// repeated .comm.PositionUpdate players = 2;
inline int MapPositionsUpdate::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int MapPositionsUpdate::players_size() const {
  return _internal_players_size();
}
inline void MapPositionsUpdate::clear_players() {
  _impl_.players_.Clear();
}
inline ::comm::PositionUpdate* MapPositionsUpdate::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PositionUpdate >*
MapPositionsUpdate::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.players)
  return &_impl_.players_;
}
inline const ::comm::PositionUpdate& MapPositionsUpdate::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::comm::PositionUpdate& MapPositionsUpdate::players(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.players)
  return _internal_players(index);
}
inline ::comm::PositionUpdate* MapPositionsUpdate::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::comm::PositionUpdate* MapPositionsUpdate::add_players() {
  ::comm::PositionUpdate* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::PositionUpdate >&
MapPositionsUpdate::players() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.players)
  return _impl_.players_;
}

// repeated .comm.Enemy enemies = 3;
inline int MapPositionsUpdate::_internal_enemies_size() const {
  return _impl_.enemies_.size();
}
inline int MapPositionsUpdate::enemies_size() const {
  return _internal_enemies_size();
}
inline void MapPositionsUpdate::clear_enemies() {
  _impl_.enemies_.Clear();
}
inline ::comm::Enemy* MapPositionsUpdate::mutable_enemies(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.enemies)
  return _impl_.enemies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >*
MapPositionsUpdate::mutable_enemies() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.enemies)
  return &_impl_.enemies_;
}
inline const ::comm::Enemy& MapPositionsUpdate::_internal_enemies(int index) const {
  return _impl_.enemies_.Get(index);
}
inline const ::comm::Enemy& MapPositionsUpdate::enemies(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.enemies)
  return _internal_enemies(index);
}
inline ::comm::Enemy* MapPositionsUpdate::_internal_add_enemies() {
  return _impl_.enemies_.Add();
}
inline ::comm::Enemy* MapPositionsUpdate::add_enemies() {
  ::comm::Enemy* _add = _internal_add_enemies();
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.enemies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::Enemy >&
MapPositionsUpdate::enemies() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.enemies)
  return _impl_.enemies_;
}

// -------------------------------------------------------------------

// StateUpdate

// uint32 id = 1;
inline void StateUpdate::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t StateUpdate::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t StateUpdate::id() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.id)
  return _internal_id();
}
inline void StateUpdate::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void StateUpdate::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.StateUpdate.id)
}

// .comm.StateVariant variant = 2;
inline void StateUpdate::clear_variant() {
  _impl_.variant_ = 0;
}
inline ::comm::StateVariant StateUpdate::_internal_variant() const {
  return static_cast< ::comm::StateVariant >(_impl_.variant_);
}
inline ::comm::StateVariant StateUpdate::variant() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.variant)
  return _internal_variant();
}
inline void StateUpdate::_internal_set_variant(::comm::StateVariant value) {
  
  _impl_.variant_ = value;
}
inline void StateUpdate::set_variant(::comm::StateVariant value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:comm.StateUpdate.variant)
}

// .comm.Room room = 3;
inline bool StateUpdate::_internal_has_room() const {
  return this != internal_default_instance() && _impl_.room_ != nullptr;
}
inline bool StateUpdate::has_room() const {
  return _internal_has_room();
}
inline void StateUpdate::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
inline const ::comm::Room& StateUpdate::_internal_room() const {
  const ::comm::Room* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::Room&>(
      ::comm::_Room_default_instance_);
}
inline const ::comm::Room& StateUpdate::room() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.room)
  return _internal_room();
}
inline void StateUpdate::unsafe_arena_set_allocated_room(
    ::comm::Room* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.room)
}
inline ::comm::Room* StateUpdate::release_room() {
  
  ::comm::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::Room* StateUpdate::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.room)
  
  ::comm::Room* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::comm::Room* StateUpdate::_internal_mutable_room() {
  
  if (_impl_.room_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::Room>(GetArenaForAllocation());
    _impl_.room_ = p;
  }
  return _impl_.room_;
}
inline ::comm::Room* StateUpdate::mutable_room() {
  ::comm::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.room)
  return _msg;
}
inline void StateUpdate::set_allocated_room(::comm::Room* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.room_;
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room);
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_ = room;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.room)
}

// .comm.MapPositionsUpdate mapPositionsUpdate = 4;
inline bool StateUpdate::_internal_has_mappositionsupdate() const {
  return this != internal_default_instance() && _impl_.mappositionsupdate_ != nullptr;
}
inline bool StateUpdate::has_mappositionsupdate() const {
  return _internal_has_mappositionsupdate();
}
inline void StateUpdate::clear_mappositionsupdate() {
  if (GetArenaForAllocation() == nullptr && _impl_.mappositionsupdate_ != nullptr) {
    delete _impl_.mappositionsupdate_;
  }
  _impl_.mappositionsupdate_ = nullptr;
}
inline const ::comm::MapPositionsUpdate& StateUpdate::_internal_mappositionsupdate() const {
  const ::comm::MapPositionsUpdate* p = _impl_.mappositionsupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::MapPositionsUpdate&>(
      ::comm::_MapPositionsUpdate_default_instance_);
}
inline const ::comm::MapPositionsUpdate& StateUpdate::mappositionsupdate() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.mapPositionsUpdate)
  return _internal_mappositionsupdate();
}
inline void StateUpdate::unsafe_arena_set_allocated_mappositionsupdate(
    ::comm::MapPositionsUpdate* mappositionsupdate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mappositionsupdate_);
  }
  _impl_.mappositionsupdate_ = mappositionsupdate;
  if (mappositionsupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.mapPositionsUpdate)
}
inline ::comm::MapPositionsUpdate* StateUpdate::release_mappositionsupdate() {
  
  ::comm::MapPositionsUpdate* temp = _impl_.mappositionsupdate_;
  _impl_.mappositionsupdate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::MapPositionsUpdate* StateUpdate::unsafe_arena_release_mappositionsupdate() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.mapPositionsUpdate)
  
  ::comm::MapPositionsUpdate* temp = _impl_.mappositionsupdate_;
  _impl_.mappositionsupdate_ = nullptr;
  return temp;
}
inline ::comm::MapPositionsUpdate* StateUpdate::_internal_mutable_mappositionsupdate() {
  
  if (_impl_.mappositionsupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::MapPositionsUpdate>(GetArenaForAllocation());
    _impl_.mappositionsupdate_ = p;
  }
  return _impl_.mappositionsupdate_;
}
inline ::comm::MapPositionsUpdate* StateUpdate::mutable_mappositionsupdate() {
  ::comm::MapPositionsUpdate* _msg = _internal_mutable_mappositionsupdate();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.mapPositionsUpdate)
  return _msg;
}
inline void StateUpdate::set_allocated_mappositionsupdate(::comm::MapPositionsUpdate* mappositionsupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mappositionsupdate_;
  }
  if (mappositionsupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mappositionsupdate);
    if (message_arena != submessage_arena) {
      mappositionsupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mappositionsupdate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mappositionsupdate_ = mappositionsupdate;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.mapPositionsUpdate)
}

// .comm.PositionUpdate positionUpdate = 5;
inline bool StateUpdate::_internal_has_positionupdate() const {
  return this != internal_default_instance() && _impl_.positionupdate_ != nullptr;
}
inline bool StateUpdate::has_positionupdate() const {
  return _internal_has_positionupdate();
}
inline void StateUpdate::clear_positionupdate() {
  if (GetArenaForAllocation() == nullptr && _impl_.positionupdate_ != nullptr) {
    delete _impl_.positionupdate_;
  }
  _impl_.positionupdate_ = nullptr;
}
inline const ::comm::PositionUpdate& StateUpdate::_internal_positionupdate() const {
  const ::comm::PositionUpdate* p = _impl_.positionupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::comm::PositionUpdate&>(
      ::comm::_PositionUpdate_default_instance_);
}
inline const ::comm::PositionUpdate& StateUpdate::positionupdate() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.positionUpdate)
  return _internal_positionupdate();
}
inline void StateUpdate::unsafe_arena_set_allocated_positionupdate(
    ::comm::PositionUpdate* positionupdate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.positionupdate_);
  }
  _impl_.positionupdate_ = positionupdate;
  if (positionupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.StateUpdate.positionUpdate)
}
inline ::comm::PositionUpdate* StateUpdate::release_positionupdate() {
  
  ::comm::PositionUpdate* temp = _impl_.positionupdate_;
  _impl_.positionupdate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::comm::PositionUpdate* StateUpdate::unsafe_arena_release_positionupdate() {
  // @@protoc_insertion_point(field_release:comm.StateUpdate.positionUpdate)
  
  ::comm::PositionUpdate* temp = _impl_.positionupdate_;
  _impl_.positionupdate_ = nullptr;
  return temp;
}
inline ::comm::PositionUpdate* StateUpdate::_internal_mutable_positionupdate() {
  
  if (_impl_.positionupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::comm::PositionUpdate>(GetArenaForAllocation());
    _impl_.positionupdate_ = p;
  }
  return _impl_.positionupdate_;
}
inline ::comm::PositionUpdate* StateUpdate::mutable_positionupdate() {
  ::comm::PositionUpdate* _msg = _internal_mutable_positionupdate();
  // @@protoc_insertion_point(field_mutable:comm.StateUpdate.positionUpdate)
  return _msg;
}
inline void StateUpdate::set_allocated_positionupdate(::comm::PositionUpdate* positionupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.positionupdate_;
  }
  if (positionupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(positionupdate);
    if (message_arena != submessage_arena) {
      positionupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positionupdate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.positionupdate_ = positionupdate;
  // @@protoc_insertion_point(field_set_allocated:comm.StateUpdate.positionUpdate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::comm::StateVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::StateVariant>() {
  return ::comm::StateVariant_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
