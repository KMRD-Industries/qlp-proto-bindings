// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comm_2eproto;
namespace comm {
class EnemyPosition;
class EnemyPositionDefaultTypeInternal;
extern EnemyPositionDefaultTypeInternal _EnemyPosition_default_instance_;
class MapPositionsUpdate;
class MapPositionsUpdateDefaultTypeInternal;
extern MapPositionsUpdateDefaultTypeInternal _MapPositionsUpdate_default_instance_;
class ObstaclePosition;
class ObstaclePositionDefaultTypeInternal;
extern ObstaclePositionDefaultTypeInternal _ObstaclePosition_default_instance_;
class PositionUpdate;
class PositionUpdateDefaultTypeInternal;
extern PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
class StateUpdate;
class StateUpdateDefaultTypeInternal;
extern StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
class WrapperMessage;
class WrapperMessageDefaultTypeInternal;
extern WrapperMessageDefaultTypeInternal _WrapperMessage_default_instance_;
}  // namespace comm
PROTOBUF_NAMESPACE_OPEN
template<> ::comm::EnemyPosition* Arena::CreateMaybeMessage<::comm::EnemyPosition>(Arena*);
template<> ::comm::MapPositionsUpdate* Arena::CreateMaybeMessage<::comm::MapPositionsUpdate>(Arena*);
template<> ::comm::ObstaclePosition* Arena::CreateMaybeMessage<::comm::ObstaclePosition>(Arena*);
template<> ::comm::PositionUpdate* Arena::CreateMaybeMessage<::comm::PositionUpdate>(Arena*);
template<> ::comm::StateUpdate* Arena::CreateMaybeMessage<::comm::StateUpdate>(Arena*);
template<> ::comm::WrapperMessage* Arena::CreateMaybeMessage<::comm::WrapperMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace comm {

enum MessageType : int {
  MAP_UPDATE = 0,
  POSITION_UPDATE = 1,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MAP_UPDATE;
constexpr MessageType MessageType_MAX = POSITION_UPDATE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum StateVariant : int {
  NONE = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
  StateVariant_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateVariant_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateVariant_IsValid(int value);
constexpr StateVariant StateVariant_MIN = NONE;
constexpr StateVariant StateVariant_MAX = DISCONNECTED;
constexpr int StateVariant_ARRAYSIZE = StateVariant_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateVariant_descriptor();
template<typename T>
inline const std::string& StateVariant_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateVariant>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateVariant_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateVariant_descriptor(), enum_t_value);
}
inline bool StateVariant_Parse(
    const std::string& name, StateVariant* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateVariant>(
    StateVariant_descriptor(), name, value);
}
// ===================================================================

class WrapperMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.WrapperMessage) */ {
 public:
  inline WrapperMessage() : WrapperMessage(nullptr) {};
  virtual ~WrapperMessage();

  WrapperMessage(const WrapperMessage& from);
  WrapperMessage(WrapperMessage&& from) noexcept
    : WrapperMessage() {
    *this = ::std::move(from);
  }

  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrapperMessage& operator=(WrapperMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WrapperMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrapperMessage* internal_default_instance() {
    return reinterpret_cast<const WrapperMessage*>(
               &_WrapperMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WrapperMessage& a, WrapperMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WrapperMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WrapperMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrapperMessage* New() const final {
    return CreateMaybeMessage<WrapperMessage>(nullptr);
  }

  WrapperMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrapperMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WrapperMessage& from);
  void MergeFrom(const WrapperMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WrapperMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.WrapperMessage";
  }
  protected:
  explicit WrapperMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comm_2eproto);
    return ::descriptor_table_comm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .comm.MessageType type = 1;
  void clear_type();
  ::comm::MessageType type() const;
  void set_type(::comm::MessageType value);
  private:
  ::comm::MessageType _internal_type() const;
  void _internal_set_type(::comm::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:comm.WrapperMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class PositionUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.PositionUpdate) */ {
 public:
  inline PositionUpdate() : PositionUpdate(nullptr) {};
  virtual ~PositionUpdate();

  PositionUpdate(const PositionUpdate& from);
  PositionUpdate(PositionUpdate&& from) noexcept
    : PositionUpdate() {
    *this = ::std::move(from);
  }

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionUpdate& operator=(PositionUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionUpdate* internal_default_instance() {
    return reinterpret_cast<const PositionUpdate*>(
               &_PositionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionUpdate& a, PositionUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionUpdate* New() const final {
    return CreateMaybeMessage<PositionUpdate>(nullptr);
  }

  PositionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionUpdate& from);
  void MergeFrom(const PositionUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.PositionUpdate";
  }
  protected:
  explicit PositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comm_2eproto);
    return ::descriptor_table_comm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // uint32 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:comm.PositionUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entity_id_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class StateUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.StateUpdate) */ {
 public:
  inline StateUpdate() : StateUpdate(nullptr) {};
  virtual ~StateUpdate();

  StateUpdate(const StateUpdate& from);
  StateUpdate(StateUpdate&& from) noexcept
    : StateUpdate() {
    *this = ::std::move(from);
  }

  inline StateUpdate& operator=(const StateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateUpdate& operator=(StateUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateUpdate* internal_default_instance() {
    return reinterpret_cast<const StateUpdate*>(
               &_StateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StateUpdate& a, StateUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(StateUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateUpdate* New() const final {
    return CreateMaybeMessage<StateUpdate>(nullptr);
  }

  StateUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateUpdate& from);
  void MergeFrom(const StateUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.StateUpdate";
  }
  protected:
  explicit StateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comm_2eproto);
    return ::descriptor_table_comm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVariantFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .comm.StateVariant variant = 2;
  void clear_variant();
  ::comm::StateVariant variant() const;
  void set_variant(::comm::StateVariant value);
  private:
  ::comm::StateVariant _internal_variant() const;
  void _internal_set_variant(::comm::StateVariant value);
  public:

  // @@protoc_insertion_point(class_scope:comm.StateUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int variant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class ObstaclePosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.ObstaclePosition) */ {
 public:
  inline ObstaclePosition() : ObstaclePosition(nullptr) {};
  virtual ~ObstaclePosition();

  ObstaclePosition(const ObstaclePosition& from);
  ObstaclePosition(ObstaclePosition&& from) noexcept
    : ObstaclePosition() {
    *this = ::std::move(from);
  }

  inline ObstaclePosition& operator=(const ObstaclePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstaclePosition& operator=(ObstaclePosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObstaclePosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstaclePosition* internal_default_instance() {
    return reinterpret_cast<const ObstaclePosition*>(
               &_ObstaclePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObstaclePosition& a, ObstaclePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstaclePosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstaclePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObstaclePosition* New() const final {
    return CreateMaybeMessage<ObstaclePosition>(nullptr);
  }

  ObstaclePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObstaclePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObstaclePosition& from);
  void MergeFrom(const ObstaclePosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstaclePosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.ObstaclePosition";
  }
  protected:
  explicit ObstaclePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comm_2eproto);
    return ::descriptor_table_comm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kLeftFieldNumber = 3,
    kTopFieldNumber = 4,
  };
  // uint32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 left = 3;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::uint32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 top = 4;
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::uint32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:comm.ObstaclePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 left_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class EnemyPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.EnemyPosition) */ {
 public:
  inline EnemyPosition() : EnemyPosition(nullptr) {};
  virtual ~EnemyPosition();

  EnemyPosition(const EnemyPosition& from);
  EnemyPosition(EnemyPosition&& from) noexcept
    : EnemyPosition() {
    *this = ::std::move(from);
  }

  inline EnemyPosition& operator=(const EnemyPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnemyPosition& operator=(EnemyPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnemyPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnemyPosition* internal_default_instance() {
    return reinterpret_cast<const EnemyPosition*>(
               &_EnemyPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EnemyPosition& a, EnemyPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(EnemyPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnemyPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnemyPosition* New() const final {
    return CreateMaybeMessage<EnemyPosition>(nullptr);
  }

  EnemyPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnemyPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnemyPosition& from);
  void MergeFrom(const EnemyPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnemyPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.EnemyPosition";
  }
  protected:
  explicit EnemyPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comm_2eproto);
    return ::descriptor_table_comm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // uint32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:comm.EnemyPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comm_2eproto;
};
// -------------------------------------------------------------------

class MapPositionsUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comm.MapPositionsUpdate) */ {
 public:
  inline MapPositionsUpdate() : MapPositionsUpdate(nullptr) {};
  virtual ~MapPositionsUpdate();

  MapPositionsUpdate(const MapPositionsUpdate& from);
  MapPositionsUpdate(MapPositionsUpdate&& from) noexcept
    : MapPositionsUpdate() {
    *this = ::std::move(from);
  }

  inline MapPositionsUpdate& operator=(const MapPositionsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPositionsUpdate& operator=(MapPositionsUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapPositionsUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapPositionsUpdate* internal_default_instance() {
    return reinterpret_cast<const MapPositionsUpdate*>(
               &_MapPositionsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapPositionsUpdate& a, MapPositionsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapPositionsUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapPositionsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapPositionsUpdate* New() const final {
    return CreateMaybeMessage<MapPositionsUpdate>(nullptr);
  }

  MapPositionsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapPositionsUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapPositionsUpdate& from);
  void MergeFrom(const MapPositionsUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPositionsUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comm.MapPositionsUpdate";
  }
  protected:
  explicit MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comm_2eproto);
    return ::descriptor_table_comm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclePositionsFieldNumber = 1,
    kEnemyPositionsFieldNumber = 2,
  };
  // repeated .comm.ObstaclePosition obstaclePositions = 1;
  int obstaclepositions_size() const;
  private:
  int _internal_obstaclepositions_size() const;
  public:
  void clear_obstaclepositions();
  ::comm::ObstaclePosition* mutable_obstaclepositions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::ObstaclePosition >*
      mutable_obstaclepositions();
  private:
  const ::comm::ObstaclePosition& _internal_obstaclepositions(int index) const;
  ::comm::ObstaclePosition* _internal_add_obstaclepositions();
  public:
  const ::comm::ObstaclePosition& obstaclepositions(int index) const;
  ::comm::ObstaclePosition* add_obstaclepositions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::ObstaclePosition >&
      obstaclepositions() const;

  // repeated .comm.EnemyPosition enemyPositions = 2;
  int enemypositions_size() const;
  private:
  int _internal_enemypositions_size() const;
  public:
  void clear_enemypositions();
  ::comm::EnemyPosition* mutable_enemypositions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::EnemyPosition >*
      mutable_enemypositions();
  private:
  const ::comm::EnemyPosition& _internal_enemypositions(int index) const;
  ::comm::EnemyPosition* _internal_add_enemypositions();
  public:
  const ::comm::EnemyPosition& enemypositions(int index) const;
  ::comm::EnemyPosition* add_enemypositions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::EnemyPosition >&
      enemypositions() const;

  // @@protoc_insertion_point(class_scope:comm.MapPositionsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::ObstaclePosition > obstaclepositions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::EnemyPosition > enemypositions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WrapperMessage

// .comm.MessageType type = 1;
inline void WrapperMessage::clear_type() {
  type_ = 0;
}
inline ::comm::MessageType WrapperMessage::_internal_type() const {
  return static_cast< ::comm::MessageType >(type_);
}
inline ::comm::MessageType WrapperMessage::type() const {
  // @@protoc_insertion_point(field_get:comm.WrapperMessage.type)
  return _internal_type();
}
inline void WrapperMessage::_internal_set_type(::comm::MessageType value) {
  
  type_ = value;
}
inline void WrapperMessage::set_type(::comm::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:comm.WrapperMessage.type)
}

// bytes payload = 2;
inline void WrapperMessage::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WrapperMessage::payload() const {
  // @@protoc_insertion_point(field_get:comm.WrapperMessage.payload)
  return _internal_payload();
}
inline void WrapperMessage::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:comm.WrapperMessage.payload)
}
inline std::string* WrapperMessage::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:comm.WrapperMessage.payload)
  return _internal_mutable_payload();
}
inline const std::string& WrapperMessage::_internal_payload() const {
  return payload_.Get();
}
inline void WrapperMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WrapperMessage::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:comm.WrapperMessage.payload)
}
inline void WrapperMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:comm.WrapperMessage.payload)
}
inline void WrapperMessage::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:comm.WrapperMessage.payload)
}
inline std::string* WrapperMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WrapperMessage::release_payload() {
  // @@protoc_insertion_point(field_release:comm.WrapperMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WrapperMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:comm.WrapperMessage.payload)
}
inline std::string* WrapperMessage::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:comm.WrapperMessage.payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WrapperMessage::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comm.WrapperMessage.payload)
}

// -------------------------------------------------------------------

// PositionUpdate

// uint32 entity_id = 1;
inline void PositionUpdate::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionUpdate::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PositionUpdate::entity_id() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.entity_id)
  return _internal_entity_id();
}
inline void PositionUpdate::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entity_id_ = value;
}
inline void PositionUpdate::set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.entity_id)
}

// float x = 2;
inline void PositionUpdate::clear_x() {
  x_ = 0;
}
inline float PositionUpdate::_internal_x() const {
  return x_;
}
inline float PositionUpdate::x() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.x)
  return _internal_x();
}
inline void PositionUpdate::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PositionUpdate::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.x)
}

// float y = 3;
inline void PositionUpdate::clear_y() {
  y_ = 0;
}
inline float PositionUpdate::_internal_y() const {
  return y_;
}
inline float PositionUpdate::y() const {
  // @@protoc_insertion_point(field_get:comm.PositionUpdate.y)
  return _internal_y();
}
inline void PositionUpdate::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PositionUpdate::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.PositionUpdate.y)
}

// -------------------------------------------------------------------

// StateUpdate

// uint32 id = 1;
inline void StateUpdate::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StateUpdate::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StateUpdate::id() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.id)
  return _internal_id();
}
inline void StateUpdate::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void StateUpdate::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comm.StateUpdate.id)
}

// .comm.StateVariant variant = 2;
inline void StateUpdate::clear_variant() {
  variant_ = 0;
}
inline ::comm::StateVariant StateUpdate::_internal_variant() const {
  return static_cast< ::comm::StateVariant >(variant_);
}
inline ::comm::StateVariant StateUpdate::variant() const {
  // @@protoc_insertion_point(field_get:comm.StateUpdate.variant)
  return _internal_variant();
}
inline void StateUpdate::_internal_set_variant(::comm::StateVariant value) {
  
  variant_ = value;
}
inline void StateUpdate::set_variant(::comm::StateVariant value) {
  _internal_set_variant(value);
  // @@protoc_insertion_point(field_set:comm.StateUpdate.variant)
}

// -------------------------------------------------------------------

// ObstaclePosition

// uint32 height = 1;
inline void ObstaclePosition::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::height() const {
  // @@protoc_insertion_point(field_get:comm.ObstaclePosition.height)
  return _internal_height();
}
inline void ObstaclePosition::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void ObstaclePosition::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:comm.ObstaclePosition.height)
}

// uint32 width = 2;
inline void ObstaclePosition::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::width() const {
  // @@protoc_insertion_point(field_get:comm.ObstaclePosition.width)
  return _internal_width();
}
inline void ObstaclePosition::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void ObstaclePosition::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:comm.ObstaclePosition.width)
}

// uint32 left = 3;
inline void ObstaclePosition::clear_left() {
  left_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::left() const {
  // @@protoc_insertion_point(field_get:comm.ObstaclePosition.left)
  return _internal_left();
}
inline void ObstaclePosition::_internal_set_left(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  left_ = value;
}
inline void ObstaclePosition::set_left(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:comm.ObstaclePosition.left)
}

// uint32 top = 4;
inline void ObstaclePosition::clear_top() {
  top_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObstaclePosition::top() const {
  // @@protoc_insertion_point(field_get:comm.ObstaclePosition.top)
  return _internal_top();
}
inline void ObstaclePosition::_internal_set_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  top_ = value;
}
inline void ObstaclePosition::set_top(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:comm.ObstaclePosition.top)
}

// -------------------------------------------------------------------

// EnemyPosition

// uint32 x = 1;
inline void EnemyPosition::clear_x() {
  x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnemyPosition::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnemyPosition::x() const {
  // @@protoc_insertion_point(field_get:comm.EnemyPosition.x)
  return _internal_x();
}
inline void EnemyPosition::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_ = value;
}
inline void EnemyPosition::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:comm.EnemyPosition.x)
}

// uint32 y = 2;
inline void EnemyPosition::clear_y() {
  y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnemyPosition::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnemyPosition::y() const {
  // @@protoc_insertion_point(field_get:comm.EnemyPosition.y)
  return _internal_y();
}
inline void EnemyPosition::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_ = value;
}
inline void EnemyPosition::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:comm.EnemyPosition.y)
}

// -------------------------------------------------------------------

// MapPositionsUpdate

// repeated .comm.ObstaclePosition obstaclePositions = 1;
inline int MapPositionsUpdate::_internal_obstaclepositions_size() const {
  return obstaclepositions_.size();
}
inline int MapPositionsUpdate::obstaclepositions_size() const {
  return _internal_obstaclepositions_size();
}
inline void MapPositionsUpdate::clear_obstaclepositions() {
  obstaclepositions_.Clear();
}
inline ::comm::ObstaclePosition* MapPositionsUpdate::mutable_obstaclepositions(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.obstaclePositions)
  return obstaclepositions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::ObstaclePosition >*
MapPositionsUpdate::mutable_obstaclepositions() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.obstaclePositions)
  return &obstaclepositions_;
}
inline const ::comm::ObstaclePosition& MapPositionsUpdate::_internal_obstaclepositions(int index) const {
  return obstaclepositions_.Get(index);
}
inline const ::comm::ObstaclePosition& MapPositionsUpdate::obstaclepositions(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.obstaclePositions)
  return _internal_obstaclepositions(index);
}
inline ::comm::ObstaclePosition* MapPositionsUpdate::_internal_add_obstaclepositions() {
  return obstaclepositions_.Add();
}
inline ::comm::ObstaclePosition* MapPositionsUpdate::add_obstaclepositions() {
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.obstaclePositions)
  return _internal_add_obstaclepositions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::ObstaclePosition >&
MapPositionsUpdate::obstaclepositions() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.obstaclePositions)
  return obstaclepositions_;
}

// repeated .comm.EnemyPosition enemyPositions = 2;
inline int MapPositionsUpdate::_internal_enemypositions_size() const {
  return enemypositions_.size();
}
inline int MapPositionsUpdate::enemypositions_size() const {
  return _internal_enemypositions_size();
}
inline void MapPositionsUpdate::clear_enemypositions() {
  enemypositions_.Clear();
}
inline ::comm::EnemyPosition* MapPositionsUpdate::mutable_enemypositions(int index) {
  // @@protoc_insertion_point(field_mutable:comm.MapPositionsUpdate.enemyPositions)
  return enemypositions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::EnemyPosition >*
MapPositionsUpdate::mutable_enemypositions() {
  // @@protoc_insertion_point(field_mutable_list:comm.MapPositionsUpdate.enemyPositions)
  return &enemypositions_;
}
inline const ::comm::EnemyPosition& MapPositionsUpdate::_internal_enemypositions(int index) const {
  return enemypositions_.Get(index);
}
inline const ::comm::EnemyPosition& MapPositionsUpdate::enemypositions(int index) const {
  // @@protoc_insertion_point(field_get:comm.MapPositionsUpdate.enemyPositions)
  return _internal_enemypositions(index);
}
inline ::comm::EnemyPosition* MapPositionsUpdate::_internal_add_enemypositions() {
  return enemypositions_.Add();
}
inline ::comm::EnemyPosition* MapPositionsUpdate::add_enemypositions() {
  // @@protoc_insertion_point(field_add:comm.MapPositionsUpdate.enemyPositions)
  return _internal_add_enemypositions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::comm::EnemyPosition >&
MapPositionsUpdate::enemypositions() const {
  // @@protoc_insertion_point(field_list:comm.MapPositionsUpdate.enemyPositions)
  return enemypositions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::comm::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::MessageType>() {
  return ::comm::MessageType_descriptor();
}
template <> struct is_proto_enum< ::comm::StateVariant> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comm::StateVariant>() {
  return ::comm::StateVariant_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comm_2eproto
