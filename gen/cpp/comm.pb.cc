// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace comm {
PROTOBUF_CONSTEXPR PositionUpdate::PositionUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.curr_room_)*/nullptr
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionUpdateDefaultTypeInternal() {}
  union {
    PositionUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
PROTOBUF_CONSTEXPR GameState::GameState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connected_players_)*/{}
  , /*decltype(_impl_._connected_players_cached_byte_size_)*/{0}
  , /*decltype(_impl_.seed_)*/int64_t{0}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateDefaultTypeInternal() {}
  union {
    GameState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateDefaultTypeInternal _GameState_default_instance_;
PROTOBUF_CONSTEXPR Room::Room(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;
PROTOBUF_CONSTEXPR Obstacle::Obstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.top_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleDefaultTypeInternal() {}
  union {
    Obstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleDefaultTypeInternal _Obstacle_default_instance_;
PROTOBUF_CONSTEXPR Enemy::Enemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.texturedata_)*/nullptr
  , /*decltype(_impl_.collisiondata_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnemyDefaultTypeInternal() {}
  union {
    Enemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnemyDefaultTypeInternal _Enemy_default_instance_;
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.playerattackdamage_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_CONSTEXPR TextureData::TextureData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tileset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tileid_)*/0
  , /*decltype(_impl_.tilelayer_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextureDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextureDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextureDataDefaultTypeInternal() {}
  union {
    TextureData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextureDataDefaultTypeInternal _TextureData_default_instance_;
PROTOBUF_CONSTEXPR CollisionData::CollisionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.xoffset_)*/0
  , /*decltype(_impl_.yoffset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollisionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionDataDefaultTypeInternal() {}
  union {
    CollisionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionDataDefaultTypeInternal _CollisionData_default_instance_;
PROTOBUF_CONSTEXPR EnemyGotHitUpdate::EnemyGotHitUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0u
  , /*decltype(_impl_.enemyid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnemyGotHitUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnemyGotHitUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnemyGotHitUpdateDefaultTypeInternal() {}
  union {
    EnemyGotHitUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnemyGotHitUpdateDefaultTypeInternal _EnemyGotHitUpdate_default_instance_;
PROTOBUF_CONSTEXPR EnemyPositionsUpdate::EnemyPositionsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enemypositions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnemyPositionsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnemyPositionsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnemyPositionsUpdateDefaultTypeInternal() {}
  union {
    EnemyPositionsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnemyPositionsUpdateDefaultTypeInternal _EnemyPositionsUpdate_default_instance_;
PROTOBUF_CONSTEXPR MapPositionsUpdate::MapPositionsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.enemies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapPositionsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapPositionsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapPositionsUpdateDefaultTypeInternal() {}
  union {
    MapPositionsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapPositionsUpdateDefaultTypeInternal _MapPositionsUpdate_default_instance_;
PROTOBUF_CONSTEXPR MapDimensionsUpdate::MapDimensionsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obstacles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapDimensionsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDimensionsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDimensionsUpdateDefaultTypeInternal() {}
  union {
    MapDimensionsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDimensionsUpdateDefaultTypeInternal _MapDimensionsUpdate_default_instance_;
PROTOBUF_CONSTEXPR SpawningEnemiesResponse::SpawningEnemiesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enemyid_)*/{}
  , /*decltype(_impl_._enemyid_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawningEnemiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawningEnemiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawningEnemiesResponseDefaultTypeInternal() {}
  union {
    SpawningEnemiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawningEnemiesResponseDefaultTypeInternal _SpawningEnemiesResponse_default_instance_;
PROTOBUF_CONSTEXPR StateUpdate::StateUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.mappositionsupdate_)*/nullptr
  , /*decltype(_impl_.positionupdate_)*/nullptr
  , /*decltype(_impl_.enemypositionsupdate_)*/nullptr
  , /*decltype(_impl_.mapdimensionsupdate_)*/nullptr
  , /*decltype(_impl_.enemygothitupdate_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.variant_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StateUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateUpdateDefaultTypeInternal() {}
  union {
    StateUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
}  // namespace comm
static ::_pb::Metadata file_level_metadata_comm_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_comm_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_comm_2eproto = nullptr;

const uint32_t TableStruct_comm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::PositionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::PositionUpdate, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::comm::PositionUpdate, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::comm::PositionUpdate, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::comm::PositionUpdate, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::comm::PositionUpdate, _impl_.curr_room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::GameState, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::comm::GameState, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::comm::GameState, _impl_.connected_players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Room, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::comm::Room, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _impl_.top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.texturedata_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.collisiondata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.playerattackdamage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _impl_.tileid_),
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _impl_.tileset_),
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _impl_.tilelayer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.xoffset_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.yoffset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyGotHitUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyGotHitUpdate, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::comm::EnemyGotHitUpdate, _impl_.enemyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyPositionsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyPositionsUpdate, _impl_.enemypositions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::MapPositionsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::MapPositionsUpdate, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::comm::MapPositionsUpdate, _impl_.enemies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::MapDimensionsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::MapDimensionsUpdate, _impl_.obstacles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::SpawningEnemiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::SpawningEnemiesResponse, _impl_.enemyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.variant_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.mappositionsupdate_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.positionupdate_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.enemypositionsupdate_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.mapdimensionsupdate_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.enemygothitupdate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::comm::PositionUpdate)},
  { 11, -1, -1, sizeof(::comm::GameState)},
  { 20, -1, -1, sizeof(::comm::Room)},
  { 28, -1, -1, sizeof(::comm::Obstacle)},
  { 38, -1, -1, sizeof(::comm::Enemy)},
  { 53, -1, -1, sizeof(::comm::Player)},
  { 63, -1, -1, sizeof(::comm::TextureData)},
  { 72, -1, -1, sizeof(::comm::CollisionData)},
  { 83, -1, -1, sizeof(::comm::EnemyGotHitUpdate)},
  { 91, -1, -1, sizeof(::comm::EnemyPositionsUpdate)},
  { 98, -1, -1, sizeof(::comm::MapPositionsUpdate)},
  { 106, -1, -1, sizeof(::comm::MapDimensionsUpdate)},
  { 113, -1, -1, sizeof(::comm::SpawningEnemiesResponse)},
  { 120, -1, -1, sizeof(::comm::StateUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::comm::_PositionUpdate_default_instance_._instance,
  &::comm::_GameState_default_instance_._instance,
  &::comm::_Room_default_instance_._instance,
  &::comm::_Obstacle_default_instance_._instance,
  &::comm::_Enemy_default_instance_._instance,
  &::comm::_Player_default_instance_._instance,
  &::comm::_TextureData_default_instance_._instance,
  &::comm::_CollisionData_default_instance_._instance,
  &::comm::_EnemyGotHitUpdate_default_instance_._instance,
  &::comm::_EnemyPositionsUpdate_default_instance_._instance,
  &::comm::_MapPositionsUpdate_default_instance_._instance,
  &::comm::_MapDimensionsUpdate_default_instance_._instance,
  &::comm::_SpawningEnemiesResponse_default_instance_._instance,
  &::comm::_StateUpdate_default_instance_._instance,
};

const char descriptor_table_protodef_comm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ncomm.proto\022\004comm\"k\n\016PositionUpdate\022\021\n\t"
  "entity_id\030\001 \001(\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\021\n"
  "\tdirection\030\004 \001(\002\022\035\n\tcurr_room\030\005 \001(\0132\n.co"
  "mm.Room\"G\n\tGameState\022\021\n\tplayer_id\030\001 \001(\r\022"
  "\014\n\004seed\030\002 \001(\003\022\031\n\021connected_players\030\003 \003(\r"
  "\"\034\n\004Room\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"D\n\010Obstac"
  "le\022\016\n\006height\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\022\014\n\004lef"
  "t\030\003 \001(\005\022\013\n\003top\030\004 \001(\005\"\265\001\n\005Enemy\022\n\n\002id\030\001 \001"
  "(\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\014\n\004type\030\004 \001(\t\022\014"
  "\n\004name\030\005 \001(\t\022\n\n\002hp\030\006 \001(\001\022\016\n\006damage\030\007 \001(\001"
  "\022&\n\013textureData\030\010 \001(\0132\021.comm.TextureData"
  "\022*\n\rcollisionData\030\t \001(\0132\023.comm.Collision"
  "Data\"F\n\006Player\022\n\n\002id\030\001 \001(\r\022\t\n\001x\030\002 \001(\002\022\t\n"
  "\001y\030\003 \001(\002\022\032\n\022playerAttackDamage\030\004 \001(\001\"A\n\013"
  "TextureData\022\016\n\006tileId\030\001 \001(\005\022\017\n\007tileSet\030\002"
  " \001(\t\022\021\n\ttileLayer\030\003 \001(\005\"^\n\rCollisionData"
  "\022\014\n\004type\030\001 \001(\005\022\r\n\005width\030\002 \001(\002\022\016\n\006height\030"
  "\003 \001(\002\022\017\n\007xOffset\030\004 \001(\002\022\017\n\007yOffset\030\005 \001(\002\""
  "6\n\021EnemyGotHitUpdate\022\020\n\010playerId\030\001 \001(\r\022\017"
  "\n\007enemyId\030\002 \001(\r\";\n\024EnemyPositionsUpdate\022"
  "#\n\016enemyPositions\030\001 \003(\0132\013.comm.Enemy\"Q\n\022"
  "MapPositionsUpdate\022\035\n\007players\030\001 \003(\0132\014.co"
  "mm.Player\022\034\n\007enemies\030\002 \003(\0132\013.comm.Enemy\""
  "8\n\023MapDimensionsUpdate\022!\n\tobstacles\030\001 \003("
  "\0132\016.comm.Obstacle\"*\n\027SpawningEnemiesResp"
  "onse\022\017\n\007enemyId\030\001 \003(\r\"\342\002\n\013StateUpdate\022\n\n"
  "\002id\030\001 \001(\r\022#\n\007variant\030\002 \001(\0162\022.comm.StateV"
  "ariant\022\030\n\004room\030\003 \001(\0132\n.comm.Room\0224\n\022mapP"
  "ositionsUpdate\030\004 \001(\0132\030.comm.MapPositions"
  "Update\022,\n\016positionUpdate\030\005 \001(\0132\024.comm.Po"
  "sitionUpdate\0228\n\024enemyPositionsUpdate\030\006 \001"
  "(\0132\032.comm.EnemyPositionsUpdate\0226\n\023mapDim"
  "ensionsUpdate\030\007 \001(\0132\031.comm.MapDimensions"
  "Update\0222\n\021enemyGotHitUpdate\030\010 \001(\0132\027.comm"
  ".EnemyGotHitUpdate*\305\001\n\014StateVariant\022\010\n\004N"
  "ONE\020\000\022\r\n\tCONNECTED\020\001\022\020\n\014DISCONNECTED\020\002\022\020"
  "\n\014ROOM_CHANGED\020\003\022\016\n\nMAP_UPDATE\020\004\022\032\n\026PLAY"
  "ER_POSITION_UPDATE\020\005\022\031\n\025MAP_DIMENSIONS_U"
  "PDATE\020\006\022\027\n\023SPAWN_ENEMY_REQUEST\020\007\022\030\n\024ENEM"
  "Y_GOT_HIT_UPDATE\020\010B6Z4github.com/kmrd-in"
  "dustries/qlp-proto-bindings/gen/gob\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_comm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_comm_2eproto = {
    false, false, 1642, descriptor_table_protodef_comm_2eproto,
    "comm.proto",
    &descriptor_table_comm_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_comm_2eproto::offsets,
    file_level_metadata_comm_2eproto, file_level_enum_descriptors_comm_2eproto,
    file_level_service_descriptors_comm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_comm_2eproto_getter() {
  return &descriptor_table_comm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_comm_2eproto(&descriptor_table_comm_2eproto);
namespace comm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_comm_2eproto);
  return file_level_enum_descriptors_comm_2eproto[0];
}
bool StateVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PositionUpdate::_Internal {
 public:
  static const ::comm::Room& curr_room(const PositionUpdate* msg);
};

const ::comm::Room&
PositionUpdate::_Internal::curr_room(const PositionUpdate* msg) {
  return *msg->_impl_.curr_room_;
}
PositionUpdate::PositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.PositionUpdate)
}
PositionUpdate::PositionUpdate(const PositionUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.curr_room_){nullptr}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.direction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curr_room()) {
    _this->_impl_.curr_room_ = new ::comm::Room(*from._impl_.curr_room_);
  }
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:comm.PositionUpdate)
}

inline void PositionUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.curr_room_){nullptr}
    , decltype(_impl_.entity_id_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.direction_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionUpdate::~PositionUpdate() {
  // @@protoc_insertion_point(destructor:comm.PositionUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.curr_room_;
}

void PositionUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.PositionUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.curr_room_ != nullptr) {
    delete _impl_.curr_room_;
  }
  _impl_.curr_room_ = nullptr;
  ::memset(&_impl_.entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .comm.Room curr_room = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_curr_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.PositionUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_direction(), target);
  }

  // .comm.Room curr_room = 5;
  if (this->_internal_has_curr_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::curr_room(this),
        _Internal::curr_room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.PositionUpdate)
  return target;
}

size_t PositionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.PositionUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .comm.Room curr_room = 5;
  if (this->_internal_has_curr_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.curr_room_);
  }

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float direction = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionUpdate::GetClassData() const { return &_class_data_; }


void PositionUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionUpdate*>(&to_msg);
  auto& from = static_cast<const PositionUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_curr_room()) {
    _this->_internal_mutable_curr_room()->::comm::Room::MergeFrom(
        from._internal_curr_room());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = from._internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionUpdate::CopyFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionUpdate::IsInitialized() const {
  return true;
}

void PositionUpdate::InternalSwap(PositionUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionUpdate, _impl_.direction_)
      + sizeof(PositionUpdate::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(PositionUpdate, _impl_.curr_room_)>(
          reinterpret_cast<char*>(&_impl_.curr_room_),
          reinterpret_cast<char*>(&other->_impl_.curr_room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[0]);
}

// ===================================================================

class GameState::_Internal {
 public:
};

GameState::GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.GameState)
}
GameState::GameState(const GameState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connected_players_){from._impl_.connected_players_}
    , /*decltype(_impl_._connected_players_cached_byte_size_)*/{0}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.seed_, &from._impl_.seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:comm.GameState)
}

inline void GameState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connected_players_){arena}
    , /*decltype(_impl_._connected_players_cached_byte_size_)*/{0}
    , decltype(_impl_.seed_){int64_t{0}}
    , decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:comm.GameState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connected_players_.~RepeatedField();
}

void GameState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.GameState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connected_players_.Clear();
  ::memset(&_impl_.seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_id_) -
      reinterpret_cast<char*>(&_impl_.seed_)) + sizeof(_impl_.player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 connected_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_connected_players(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_connected_players(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.GameState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int64 seed = 2;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seed(), target);
  }

  // repeated uint32 connected_players = 3;
  {
    int byte_size = _impl_._connected_players_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_connected_players(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.GameState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 connected_players = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.connected_players_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._connected_players_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 seed = 2;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seed());
  }

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameState::GetClassData() const { return &_class_data_; }


void GameState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameState*>(&to_msg);
  auto& from = static_cast<const GameState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.GameState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connected_players_.MergeFrom(from._impl_.connected_players_);
  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::InternalSwap(GameState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connected_players_.InternalSwap(&other->_impl_.connected_players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, _impl_.player_id_)
      + sizeof(GameState::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(GameState, _impl_.seed_)>(
          reinterpret_cast<char*>(&_impl_.seed_),
          reinterpret_cast<char*>(&other->_impl_.seed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[1]);
}

// ===================================================================

class Room::_Internal {
 public:
};

Room::Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Room* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:comm.Room)
}

inline void Room::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:comm.Room)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Room::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Room::GetClassData() const { return &_class_data_; }


void Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Room)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, _impl_.y_)
      + sizeof(Room::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Room, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[2]);
}

// ===================================================================

class Obstacle::_Internal {
 public:
};

Obstacle::Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Obstacle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.left_){}
    , decltype(_impl_.top_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.top_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.top_));
  // @@protoc_insertion_point(copy_constructor:comm.Obstacle)
}

inline void Obstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.height_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.top_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:comm.Obstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Obstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Obstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Obstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.top_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.top_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Obstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Obstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 left = 3;
  if (this->_internal_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_left(), target);
  }

  // int32 top = 4;
  if (this->_internal_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Obstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 left = 3;
  if (this->_internal_left() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
  }

  // int32 top = 4;
  if (this->_internal_top() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Obstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Obstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Obstacle::GetClassData() const { return &_class_data_; }


void Obstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Obstacle*>(&to_msg);
  auto& from = static_cast<const Obstacle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Obstacle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_left() != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  if (from._internal_top() != 0) {
    _this->_internal_set_top(from._internal_top());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obstacle, _impl_.top_)
      + sizeof(Obstacle::_impl_.top_)
      - PROTOBUF_FIELD_OFFSET(Obstacle, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[3]);
}

// ===================================================================

class Enemy::_Internal {
 public:
  static const ::comm::TextureData& texturedata(const Enemy* msg);
  static const ::comm::CollisionData& collisiondata(const Enemy* msg);
};

const ::comm::TextureData&
Enemy::_Internal::texturedata(const Enemy* msg) {
  return *msg->_impl_.texturedata_;
}
const ::comm::CollisionData&
Enemy::_Internal::collisiondata(const Enemy* msg) {
  return *msg->_impl_.collisiondata_;
}
Enemy::Enemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Enemy)
}
Enemy::Enemy(const Enemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Enemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.texturedata_){nullptr}
    , decltype(_impl_.collisiondata_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_texturedata()) {
    _this->_impl_.texturedata_ = new ::comm::TextureData(*from._impl_.texturedata_);
  }
  if (from._internal_has_collisiondata()) {
    _this->_impl_.collisiondata_ = new ::comm::CollisionData(*from._impl_.collisiondata_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:comm.Enemy)
}

inline void Enemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.texturedata_){nullptr}
    , decltype(_impl_.collisiondata_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Enemy::~Enemy() {
  // @@protoc_insertion_point(destructor:comm.Enemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Enemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.texturedata_;
  if (this != internal_default_instance()) delete _impl_.collisiondata_;
}

void Enemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Enemy::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Enemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.texturedata_ != nullptr) {
    delete _impl_.texturedata_;
  }
  _impl_.texturedata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collisiondata_ != nullptr) {
    delete _impl_.collisiondata_;
  }
  _impl_.collisiondata_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Enemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "comm.Enemy.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "comm.Enemy.name"));
        } else
          goto handle_unusual;
        continue;
      // double hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double damage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .comm.TextureData textureData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_texturedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.CollisionData collisionData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_collisiondata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Enemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Enemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "comm.Enemy.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "comm.Enemy.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // double hp = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hp = this->_internal_hp();
  uint64_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_hp(), target);
  }

  // double damage = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = this->_internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_damage(), target);
  }

  // .comm.TextureData textureData = 8;
  if (this->_internal_has_texturedata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::texturedata(this),
        _Internal::texturedata(this).GetCachedSize(), target, stream);
  }

  // .comm.CollisionData collisionData = 9;
  if (this->_internal_has_collisiondata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::collisiondata(this),
        _Internal::collisiondata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Enemy)
  return target;
}

size_t Enemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Enemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 4;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .comm.TextureData textureData = 8;
  if (this->_internal_has_texturedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texturedata_);
  }

  // .comm.CollisionData collisionData = 9;
  if (this->_internal_has_collisiondata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collisiondata_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // double hp = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hp = this->_internal_hp();
  uint64_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 8;
  }

  // double damage = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = this->_internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 8;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Enemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Enemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Enemy::GetClassData() const { return &_class_data_; }


void Enemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Enemy*>(&to_msg);
  auto& from = static_cast<const Enemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Enemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_texturedata()) {
    _this->_internal_mutable_texturedata()->::comm::TextureData::MergeFrom(
        from._internal_texturedata());
  }
  if (from._internal_has_collisiondata()) {
    _this->_internal_mutable_collisiondata()->::comm::CollisionData::MergeFrom(
        from._internal_collisiondata());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hp = from._internal_hp();
  uint64_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = from._internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Enemy::CopyFrom(const Enemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Enemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enemy::IsInitialized() const {
  return true;
}

void Enemy::InternalSwap(Enemy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Enemy, _impl_.y_)
      + sizeof(Enemy::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Enemy, _impl_.texturedata_)>(
          reinterpret_cast<char*>(&_impl_.texturedata_),
          reinterpret_cast<char*>(&other->_impl_.texturedata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Enemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[4]);
}

// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.playerattackdamage_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:comm.Player)
}

inline void Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.playerattackdamage_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:comm.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double playerAttackDamage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.playerattackdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // double playerAttackDamage = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_playerattackdamage = this->_internal_playerattackdamage();
  uint64_t raw_playerattackdamage;
  memcpy(&raw_playerattackdamage, &tmp_playerattackdamage, sizeof(tmp_playerattackdamage));
  if (raw_playerattackdamage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_playerattackdamage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // double playerAttackDamage = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_playerattackdamage = this->_internal_playerattackdamage();
  uint64_t raw_playerattackdamage;
  memcpy(&raw_playerattackdamage, &tmp_playerattackdamage, sizeof(tmp_playerattackdamage));
  if (raw_playerattackdamage != 0) {
    total_size += 1 + 8;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_playerattackdamage = from._internal_playerattackdamage();
  uint64_t raw_playerattackdamage;
  memcpy(&raw_playerattackdamage, &tmp_playerattackdamage, sizeof(tmp_playerattackdamage));
  if (raw_playerattackdamage != 0) {
    _this->_internal_set_playerattackdamage(from._internal_playerattackdamage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, _impl_.y_)
      + sizeof(Player::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Player, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[5]);
}

// ===================================================================

class TextureData::_Internal {
 public:
};

TextureData::TextureData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.TextureData)
}
TextureData::TextureData(const TextureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextureData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tileset_){}
    , decltype(_impl_.tileid_){}
    , decltype(_impl_.tilelayer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tileset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tileset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tileset().empty()) {
    _this->_impl_.tileset_.Set(from._internal_tileset(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tileid_, &from._impl_.tileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tilelayer_) -
    reinterpret_cast<char*>(&_impl_.tileid_)) + sizeof(_impl_.tilelayer_));
  // @@protoc_insertion_point(copy_constructor:comm.TextureData)
}

inline void TextureData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tileset_){}
    , decltype(_impl_.tileid_){0}
    , decltype(_impl_.tilelayer_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tileset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tileset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextureData::~TextureData() {
  // @@protoc_insertion_point(destructor:comm.TextureData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextureData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tileset_.Destroy();
}

void TextureData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextureData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.TextureData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tileset_.ClearToEmpty();
  ::memset(&_impl_.tileid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tilelayer_) -
      reinterpret_cast<char*>(&_impl_.tileid_)) + sizeof(_impl_.tilelayer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextureData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tileId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tileSet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tileset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "comm.TextureData.tileSet"));
        } else
          goto handle_unusual;
        continue;
      // int32 tileLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tilelayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextureData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.TextureData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tileId = 1;
  if (this->_internal_tileid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tileid(), target);
  }

  // string tileSet = 2;
  if (!this->_internal_tileset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tileset().data(), static_cast<int>(this->_internal_tileset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "comm.TextureData.tileSet");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tileset(), target);
  }

  // int32 tileLayer = 3;
  if (this->_internal_tilelayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tilelayer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.TextureData)
  return target;
}

size_t TextureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.TextureData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tileSet = 2;
  if (!this->_internal_tileset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tileset());
  }

  // int32 tileId = 1;
  if (this->_internal_tileid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tileid());
  }

  // int32 tileLayer = 3;
  if (this->_internal_tilelayer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tilelayer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextureData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextureData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextureData::GetClassData() const { return &_class_data_; }


void TextureData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextureData*>(&to_msg);
  auto& from = static_cast<const TextureData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.TextureData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tileset().empty()) {
    _this->_internal_set_tileset(from._internal_tileset());
  }
  if (from._internal_tileid() != 0) {
    _this->_internal_set_tileid(from._internal_tileid());
  }
  if (from._internal_tilelayer() != 0) {
    _this->_internal_set_tilelayer(from._internal_tilelayer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextureData::CopyFrom(const TextureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.TextureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureData::IsInitialized() const {
  return true;
}

void TextureData::InternalSwap(TextureData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tileset_, lhs_arena,
      &other->_impl_.tileset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextureData, _impl_.tilelayer_)
      + sizeof(TextureData::_impl_.tilelayer_)
      - PROTOBUF_FIELD_OFFSET(TextureData, _impl_.tileid_)>(
          reinterpret_cast<char*>(&_impl_.tileid_),
          reinterpret_cast<char*>(&other->_impl_.tileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextureData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[6]);
}

// ===================================================================

class CollisionData::_Internal {
 public:
};

CollisionData::CollisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.CollisionData)
}
CollisionData::CollisionData(const CollisionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollisionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.xoffset_){}
    , decltype(_impl_.yoffset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yoffset_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.yoffset_));
  // @@protoc_insertion_point(copy_constructor:comm.CollisionData)
}

inline void CollisionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.xoffset_){0}
    , decltype(_impl_.yoffset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollisionData::~CollisionData() {
  // @@protoc_insertion_point(destructor:comm.CollisionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollisionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollisionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.CollisionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yoffset_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.yoffset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollisionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float xOffset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.xoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yOffset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.yoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollisionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.CollisionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float width = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  // float height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_height(), target);
  }

  // float xOffset = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xoffset = this->_internal_xoffset();
  uint32_t raw_xoffset;
  memcpy(&raw_xoffset, &tmp_xoffset, sizeof(tmp_xoffset));
  if (raw_xoffset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_xoffset(), target);
  }

  // float yOffset = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yoffset = this->_internal_yoffset();
  uint32_t raw_yoffset;
  memcpy(&raw_yoffset, &tmp_yoffset, sizeof(tmp_yoffset));
  if (raw_yoffset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_yoffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.CollisionData)
  return target;
}

size_t CollisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.CollisionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // float width = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  // float height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  // float xOffset = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xoffset = this->_internal_xoffset();
  uint32_t raw_xoffset;
  memcpy(&raw_xoffset, &tmp_xoffset, sizeof(tmp_xoffset));
  if (raw_xoffset != 0) {
    total_size += 1 + 4;
  }

  // float yOffset = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yoffset = this->_internal_yoffset();
  uint32_t raw_yoffset;
  memcpy(&raw_yoffset, &tmp_yoffset, sizeof(tmp_yoffset));
  if (raw_yoffset != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollisionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollisionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollisionData::GetClassData() const { return &_class_data_; }


void CollisionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollisionData*>(&to_msg);
  auto& from = static_cast<const CollisionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.CollisionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_xoffset = from._internal_xoffset();
  uint32_t raw_xoffset;
  memcpy(&raw_xoffset, &tmp_xoffset, sizeof(tmp_xoffset));
  if (raw_xoffset != 0) {
    _this->_internal_set_xoffset(from._internal_xoffset());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yoffset = from._internal_yoffset();
  uint32_t raw_yoffset;
  memcpy(&raw_yoffset, &tmp_yoffset, sizeof(tmp_yoffset));
  if (raw_yoffset != 0) {
    _this->_internal_set_yoffset(from._internal_yoffset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionData::CopyFrom(const CollisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.CollisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionData::IsInitialized() const {
  return true;
}

void CollisionData::InternalSwap(CollisionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollisionData, _impl_.yoffset_)
      + sizeof(CollisionData::_impl_.yoffset_)
      - PROTOBUF_FIELD_OFFSET(CollisionData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollisionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[7]);
}

// ===================================================================

class EnemyGotHitUpdate::_Internal {
 public:
};

EnemyGotHitUpdate::EnemyGotHitUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.EnemyGotHitUpdate)
}
EnemyGotHitUpdate::EnemyGotHitUpdate(const EnemyGotHitUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnemyGotHitUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.enemyid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enemyid_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.enemyid_));
  // @@protoc_insertion_point(copy_constructor:comm.EnemyGotHitUpdate)
}

inline void EnemyGotHitUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0u}
    , decltype(_impl_.enemyid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnemyGotHitUpdate::~EnemyGotHitUpdate() {
  // @@protoc_insertion_point(destructor:comm.EnemyGotHitUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnemyGotHitUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnemyGotHitUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnemyGotHitUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.EnemyGotHitUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enemyid_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.enemyid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnemyGotHitUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enemyId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enemyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnemyGotHitUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.EnemyGotHitUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerid(), target);
  }

  // uint32 enemyId = 2;
  if (this->_internal_enemyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enemyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.EnemyGotHitUpdate)
  return target;
}

size_t EnemyGotHitUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.EnemyGotHitUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  // uint32 enemyId = 2;
  if (this->_internal_enemyid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enemyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnemyGotHitUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnemyGotHitUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnemyGotHitUpdate::GetClassData() const { return &_class_data_; }


void EnemyGotHitUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnemyGotHitUpdate*>(&to_msg);
  auto& from = static_cast<const EnemyGotHitUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.EnemyGotHitUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_enemyid() != 0) {
    _this->_internal_set_enemyid(from._internal_enemyid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnemyGotHitUpdate::CopyFrom(const EnemyGotHitUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.EnemyGotHitUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyGotHitUpdate::IsInitialized() const {
  return true;
}

void EnemyGotHitUpdate::InternalSwap(EnemyGotHitUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnemyGotHitUpdate, _impl_.enemyid_)
      + sizeof(EnemyGotHitUpdate::_impl_.enemyid_)
      - PROTOBUF_FIELD_OFFSET(EnemyGotHitUpdate, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnemyGotHitUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[8]);
}

// ===================================================================

class EnemyPositionsUpdate::_Internal {
 public:
};

EnemyPositionsUpdate::EnemyPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.EnemyPositionsUpdate)
}
EnemyPositionsUpdate::EnemyPositionsUpdate(const EnemyPositionsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnemyPositionsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enemypositions_){from._impl_.enemypositions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.EnemyPositionsUpdate)
}

inline void EnemyPositionsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enemypositions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnemyPositionsUpdate::~EnemyPositionsUpdate() {
  // @@protoc_insertion_point(destructor:comm.EnemyPositionsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnemyPositionsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enemypositions_.~RepeatedPtrField();
}

void EnemyPositionsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnemyPositionsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.EnemyPositionsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enemypositions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnemyPositionsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .comm.Enemy enemyPositions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemypositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnemyPositionsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.EnemyPositionsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .comm.Enemy enemyPositions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enemypositions_size()); i < n; i++) {
    const auto& repfield = this->_internal_enemypositions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.EnemyPositionsUpdate)
  return target;
}

size_t EnemyPositionsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.EnemyPositionsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Enemy enemyPositions = 1;
  total_size += 1UL * this->_internal_enemypositions_size();
  for (const auto& msg : this->_impl_.enemypositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnemyPositionsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnemyPositionsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnemyPositionsUpdate::GetClassData() const { return &_class_data_; }


void EnemyPositionsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnemyPositionsUpdate*>(&to_msg);
  auto& from = static_cast<const EnemyPositionsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.EnemyPositionsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enemypositions_.MergeFrom(from._impl_.enemypositions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnemyPositionsUpdate::CopyFrom(const EnemyPositionsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.EnemyPositionsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyPositionsUpdate::IsInitialized() const {
  return true;
}

void EnemyPositionsUpdate::InternalSwap(EnemyPositionsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enemypositions_.InternalSwap(&other->_impl_.enemypositions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnemyPositionsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[9]);
}

// ===================================================================

class MapPositionsUpdate::_Internal {
 public:
};

MapPositionsUpdate::MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.MapPositionsUpdate)
}
MapPositionsUpdate::MapPositionsUpdate(const MapPositionsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapPositionsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.enemies_){from._impl_.enemies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.MapPositionsUpdate)
}

inline void MapPositionsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.enemies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapPositionsUpdate::~MapPositionsUpdate() {
  // @@protoc_insertion_point(destructor:comm.MapPositionsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapPositionsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.enemies_.~RepeatedPtrField();
}

void MapPositionsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapPositionsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.MapPositionsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.enemies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapPositionsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .comm.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .comm.Enemy enemies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapPositionsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.MapPositionsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .comm.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .comm.Enemy enemies = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enemies_size()); i < n; i++) {
    const auto& repfield = this->_internal_enemies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MapPositionsUpdate)
  return target;
}

size_t MapPositionsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.MapPositionsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .comm.Enemy enemies = 2;
  total_size += 1UL * this->_internal_enemies_size();
  for (const auto& msg : this->_impl_.enemies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapPositionsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapPositionsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapPositionsUpdate::GetClassData() const { return &_class_data_; }


void MapPositionsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapPositionsUpdate*>(&to_msg);
  auto& from = static_cast<const MapPositionsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.MapPositionsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.enemies_.MergeFrom(from._impl_.enemies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapPositionsUpdate::CopyFrom(const MapPositionsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.MapPositionsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPositionsUpdate::IsInitialized() const {
  return true;
}

void MapPositionsUpdate::InternalSwap(MapPositionsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.enemies_.InternalSwap(&other->_impl_.enemies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPositionsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[10]);
}

// ===================================================================

class MapDimensionsUpdate::_Internal {
 public:
};

MapDimensionsUpdate::MapDimensionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.MapDimensionsUpdate)
}
MapDimensionsUpdate::MapDimensionsUpdate(const MapDimensionsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapDimensionsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacles_){from._impl_.obstacles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.MapDimensionsUpdate)
}

inline void MapDimensionsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapDimensionsUpdate::~MapDimensionsUpdate() {
  // @@protoc_insertion_point(destructor:comm.MapDimensionsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapDimensionsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacles_.~RepeatedPtrField();
}

void MapDimensionsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapDimensionsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.MapDimensionsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obstacles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapDimensionsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .comm.Obstacle obstacles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapDimensionsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.MapDimensionsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .comm.Obstacle obstacles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacles_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MapDimensionsUpdate)
  return target;
}

size_t MapDimensionsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.MapDimensionsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Obstacle obstacles = 1;
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->_impl_.obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapDimensionsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapDimensionsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapDimensionsUpdate::GetClassData() const { return &_class_data_; }


void MapDimensionsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapDimensionsUpdate*>(&to_msg);
  auto& from = static_cast<const MapDimensionsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.MapDimensionsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obstacles_.MergeFrom(from._impl_.obstacles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapDimensionsUpdate::CopyFrom(const MapDimensionsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.MapDimensionsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapDimensionsUpdate::IsInitialized() const {
  return true;
}

void MapDimensionsUpdate::InternalSwap(MapDimensionsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.obstacles_.InternalSwap(&other->_impl_.obstacles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapDimensionsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[11]);
}

// ===================================================================

class SpawningEnemiesResponse::_Internal {
 public:
};

SpawningEnemiesResponse::SpawningEnemiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.SpawningEnemiesResponse)
}
SpawningEnemiesResponse::SpawningEnemiesResponse(const SpawningEnemiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawningEnemiesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enemyid_){from._impl_.enemyid_}
    , /*decltype(_impl_._enemyid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.SpawningEnemiesResponse)
}

inline void SpawningEnemiesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enemyid_){arena}
    , /*decltype(_impl_._enemyid_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawningEnemiesResponse::~SpawningEnemiesResponse() {
  // @@protoc_insertion_point(destructor:comm.SpawningEnemiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawningEnemiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enemyid_.~RepeatedField();
}

void SpawningEnemiesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawningEnemiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.SpawningEnemiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enemyid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawningEnemiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 enemyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemyid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_enemyid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawningEnemiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.SpawningEnemiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 enemyId = 1;
  {
    int byte_size = _impl_._enemyid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_enemyid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.SpawningEnemiesResponse)
  return target;
}

size_t SpawningEnemiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.SpawningEnemiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 enemyId = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemyid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._enemyid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawningEnemiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawningEnemiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawningEnemiesResponse::GetClassData() const { return &_class_data_; }


void SpawningEnemiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawningEnemiesResponse*>(&to_msg);
  auto& from = static_cast<const SpawningEnemiesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.SpawningEnemiesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enemyid_.MergeFrom(from._impl_.enemyid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawningEnemiesResponse::CopyFrom(const SpawningEnemiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.SpawningEnemiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawningEnemiesResponse::IsInitialized() const {
  return true;
}

void SpawningEnemiesResponse::InternalSwap(SpawningEnemiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enemyid_.InternalSwap(&other->_impl_.enemyid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawningEnemiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[12]);
}

// ===================================================================

class StateUpdate::_Internal {
 public:
  static const ::comm::Room& room(const StateUpdate* msg);
  static const ::comm::MapPositionsUpdate& mappositionsupdate(const StateUpdate* msg);
  static const ::comm::PositionUpdate& positionupdate(const StateUpdate* msg);
  static const ::comm::EnemyPositionsUpdate& enemypositionsupdate(const StateUpdate* msg);
  static const ::comm::MapDimensionsUpdate& mapdimensionsupdate(const StateUpdate* msg);
  static const ::comm::EnemyGotHitUpdate& enemygothitupdate(const StateUpdate* msg);
};

const ::comm::Room&
StateUpdate::_Internal::room(const StateUpdate* msg) {
  return *msg->_impl_.room_;
}
const ::comm::MapPositionsUpdate&
StateUpdate::_Internal::mappositionsupdate(const StateUpdate* msg) {
  return *msg->_impl_.mappositionsupdate_;
}
const ::comm::PositionUpdate&
StateUpdate::_Internal::positionupdate(const StateUpdate* msg) {
  return *msg->_impl_.positionupdate_;
}
const ::comm::EnemyPositionsUpdate&
StateUpdate::_Internal::enemypositionsupdate(const StateUpdate* msg) {
  return *msg->_impl_.enemypositionsupdate_;
}
const ::comm::MapDimensionsUpdate&
StateUpdate::_Internal::mapdimensionsupdate(const StateUpdate* msg) {
  return *msg->_impl_.mapdimensionsupdate_;
}
const ::comm::EnemyGotHitUpdate&
StateUpdate::_Internal::enemygothitupdate(const StateUpdate* msg) {
  return *msg->_impl_.enemygothitupdate_;
}
StateUpdate::StateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.StateUpdate)
}
StateUpdate::StateUpdate(const StateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StateUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , decltype(_impl_.mappositionsupdate_){nullptr}
    , decltype(_impl_.positionupdate_){nullptr}
    , decltype(_impl_.enemypositionsupdate_){nullptr}
    , decltype(_impl_.mapdimensionsupdate_){nullptr}
    , decltype(_impl_.enemygothitupdate_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.variant_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::comm::Room(*from._impl_.room_);
  }
  if (from._internal_has_mappositionsupdate()) {
    _this->_impl_.mappositionsupdate_ = new ::comm::MapPositionsUpdate(*from._impl_.mappositionsupdate_);
  }
  if (from._internal_has_positionupdate()) {
    _this->_impl_.positionupdate_ = new ::comm::PositionUpdate(*from._impl_.positionupdate_);
  }
  if (from._internal_has_enemypositionsupdate()) {
    _this->_impl_.enemypositionsupdate_ = new ::comm::EnemyPositionsUpdate(*from._impl_.enemypositionsupdate_);
  }
  if (from._internal_has_mapdimensionsupdate()) {
    _this->_impl_.mapdimensionsupdate_ = new ::comm::MapDimensionsUpdate(*from._impl_.mapdimensionsupdate_);
  }
  if (from._internal_has_enemygothitupdate()) {
    _this->_impl_.enemygothitupdate_ = new ::comm::EnemyGotHitUpdate(*from._impl_.enemygothitupdate_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.variant_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.variant_));
  // @@protoc_insertion_point(copy_constructor:comm.StateUpdate)
}

inline void StateUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_){nullptr}
    , decltype(_impl_.mappositionsupdate_){nullptr}
    , decltype(_impl_.positionupdate_){nullptr}
    , decltype(_impl_.enemypositionsupdate_){nullptr}
    , decltype(_impl_.mapdimensionsupdate_){nullptr}
    , decltype(_impl_.enemygothitupdate_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.variant_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StateUpdate::~StateUpdate() {
  // @@protoc_insertion_point(destructor:comm.StateUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.mappositionsupdate_;
  if (this != internal_default_instance()) delete _impl_.positionupdate_;
  if (this != internal_default_instance()) delete _impl_.enemypositionsupdate_;
  if (this != internal_default_instance()) delete _impl_.mapdimensionsupdate_;
  if (this != internal_default_instance()) delete _impl_.enemygothitupdate_;
}

void StateUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.StateUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mappositionsupdate_ != nullptr) {
    delete _impl_.mappositionsupdate_;
  }
  _impl_.mappositionsupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.positionupdate_ != nullptr) {
    delete _impl_.positionupdate_;
  }
  _impl_.positionupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enemypositionsupdate_ != nullptr) {
    delete _impl_.enemypositionsupdate_;
  }
  _impl_.enemypositionsupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mapdimensionsupdate_ != nullptr) {
    delete _impl_.mapdimensionsupdate_;
  }
  _impl_.mapdimensionsupdate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enemygothitupdate_ != nullptr) {
    delete _impl_.enemygothitupdate_;
  }
  _impl_.enemygothitupdate_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.variant_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.variant_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.StateVariant variant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_variant(static_cast<::comm::StateVariant>(val));
        } else
          goto handle_unusual;
        continue;
      // .comm.Room room = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.MapPositionsUpdate mapPositionsUpdate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mappositionsupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.PositionUpdate positionUpdate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.EnemyPositionsUpdate enemyPositionsUpdate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_enemypositionsupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.MapDimensionsUpdate mapDimensionsUpdate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapdimensionsupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.EnemyGotHitUpdate enemyGotHitUpdate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_enemygothitupdate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.StateUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .comm.StateVariant variant = 2;
  if (this->_internal_variant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_variant(), target);
  }

  // .comm.Room room = 3;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // .comm.MapPositionsUpdate mapPositionsUpdate = 4;
  if (this->_internal_has_mappositionsupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mappositionsupdate(this),
        _Internal::mappositionsupdate(this).GetCachedSize(), target, stream);
  }

  // .comm.PositionUpdate positionUpdate = 5;
  if (this->_internal_has_positionupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::positionupdate(this),
        _Internal::positionupdate(this).GetCachedSize(), target, stream);
  }

  // .comm.EnemyPositionsUpdate enemyPositionsUpdate = 6;
  if (this->_internal_has_enemypositionsupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::enemypositionsupdate(this),
        _Internal::enemypositionsupdate(this).GetCachedSize(), target, stream);
  }

  // .comm.MapDimensionsUpdate mapDimensionsUpdate = 7;
  if (this->_internal_has_mapdimensionsupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mapdimensionsupdate(this),
        _Internal::mapdimensionsupdate(this).GetCachedSize(), target, stream);
  }

  // .comm.EnemyGotHitUpdate enemyGotHitUpdate = 8;
  if (this->_internal_has_enemygothitupdate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::enemygothitupdate(this),
        _Internal::enemygothitupdate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.StateUpdate)
  return target;
}

size_t StateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.StateUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .comm.Room room = 3;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // .comm.MapPositionsUpdate mapPositionsUpdate = 4;
  if (this->_internal_has_mappositionsupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mappositionsupdate_);
  }

  // .comm.PositionUpdate positionUpdate = 5;
  if (this->_internal_has_positionupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.positionupdate_);
  }

  // .comm.EnemyPositionsUpdate enemyPositionsUpdate = 6;
  if (this->_internal_has_enemypositionsupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enemypositionsupdate_);
  }

  // .comm.MapDimensionsUpdate mapDimensionsUpdate = 7;
  if (this->_internal_has_mapdimensionsupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mapdimensionsupdate_);
  }

  // .comm.EnemyGotHitUpdate enemyGotHitUpdate = 8;
  if (this->_internal_has_enemygothitupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enemygothitupdate_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .comm.StateVariant variant = 2;
  if (this->_internal_variant() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_variant());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StateUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateUpdate::GetClassData() const { return &_class_data_; }


void StateUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StateUpdate*>(&to_msg);
  auto& from = static_cast<const StateUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.StateUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::comm::Room::MergeFrom(
        from._internal_room());
  }
  if (from._internal_has_mappositionsupdate()) {
    _this->_internal_mutable_mappositionsupdate()->::comm::MapPositionsUpdate::MergeFrom(
        from._internal_mappositionsupdate());
  }
  if (from._internal_has_positionupdate()) {
    _this->_internal_mutable_positionupdate()->::comm::PositionUpdate::MergeFrom(
        from._internal_positionupdate());
  }
  if (from._internal_has_enemypositionsupdate()) {
    _this->_internal_mutable_enemypositionsupdate()->::comm::EnemyPositionsUpdate::MergeFrom(
        from._internal_enemypositionsupdate());
  }
  if (from._internal_has_mapdimensionsupdate()) {
    _this->_internal_mutable_mapdimensionsupdate()->::comm::MapDimensionsUpdate::MergeFrom(
        from._internal_mapdimensionsupdate());
  }
  if (from._internal_has_enemygothitupdate()) {
    _this->_internal_mutable_enemygothitupdate()->::comm::EnemyGotHitUpdate::MergeFrom(
        from._internal_enemygothitupdate());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_variant() != 0) {
    _this->_internal_set_variant(from._internal_variant());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateUpdate::CopyFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.StateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateUpdate::IsInitialized() const {
  return true;
}

void StateUpdate::InternalSwap(StateUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateUpdate, _impl_.variant_)
      + sizeof(StateUpdate::_impl_.variant_)
      - PROTOBUF_FIELD_OFFSET(StateUpdate, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace comm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::comm::PositionUpdate*
Arena::CreateMaybeMessage< ::comm::PositionUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::PositionUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::GameState*
Arena::CreateMaybeMessage< ::comm::GameState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::GameState >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Room*
Arena::CreateMaybeMessage< ::comm::Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Room >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Obstacle*
Arena::CreateMaybeMessage< ::comm::Obstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Enemy*
Arena::CreateMaybeMessage< ::comm::Enemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Enemy >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Player*
Arena::CreateMaybeMessage< ::comm::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::TextureData*
Arena::CreateMaybeMessage< ::comm::TextureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::TextureData >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::CollisionData*
Arena::CreateMaybeMessage< ::comm::CollisionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::CollisionData >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::EnemyGotHitUpdate*
Arena::CreateMaybeMessage< ::comm::EnemyGotHitUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::EnemyGotHitUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::EnemyPositionsUpdate*
Arena::CreateMaybeMessage< ::comm::EnemyPositionsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::EnemyPositionsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::MapPositionsUpdate*
Arena::CreateMaybeMessage< ::comm::MapPositionsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::MapPositionsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::MapDimensionsUpdate*
Arena::CreateMaybeMessage< ::comm::MapDimensionsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::MapDimensionsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::SpawningEnemiesResponse*
Arena::CreateMaybeMessage< ::comm::SpawningEnemiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::SpawningEnemiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::StateUpdate*
Arena::CreateMaybeMessage< ::comm::StateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::StateUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
