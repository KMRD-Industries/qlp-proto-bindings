// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comm.proto

#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace comm {
PROTOBUF_CONSTEXPR MovementUpdate::MovementUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.curr_room_)*/nullptr
  , /*decltype(_impl_.entity_id_)*/0u
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.weapon_pivot_x_)*/0
  , /*decltype(_impl_.weapon_pivot_y_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.attack_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MovementUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MovementUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MovementUpdateDefaultTypeInternal() {}
  union {
    MovementUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MovementUpdateDefaultTypeInternal _MovementUpdate_default_instance_;
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.player_attack_damage_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.gen_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR InitialInfo::InitialInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connected_players_)*/{}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.next_item_)*/nullptr
  , /*decltype(_impl_.seed_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitialInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitialInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitialInfoDefaultTypeInternal() {}
  union {
    InitialInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitialInfoDefaultTypeInternal _InitialInfo_default_instance_;
PROTOBUF_CONSTEXPR Room::Room(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;
PROTOBUF_CONSTEXPR Obstacle::Obstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.top_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleDefaultTypeInternal() {}
  union {
    Obstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleDefaultTypeInternal _Obstacle_default_instance_;
PROTOBUF_CONSTEXPR Enemy::Enemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.texture_data_)*/nullptr
  , /*decltype(_impl_.collision_data_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnemyDefaultTypeInternal() {}
  union {
    Enemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnemyDefaultTypeInternal _Enemy_default_instance_;
PROTOBUF_CONSTEXPR TextureData::TextureData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tile_set_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tile_id_)*/0u
  , /*decltype(_impl_.tile_layer_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TextureDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextureDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextureDataDefaultTypeInternal() {}
  union {
    TextureData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextureDataDefaultTypeInternal _TextureData_default_instance_;
PROTOBUF_CONSTEXPR CollisionData::CollisionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.x_offset_)*/0
  , /*decltype(_impl_.y_offset_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollisionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionDataDefaultTypeInternal() {}
  union {
    CollisionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionDataDefaultTypeInternal _CollisionData_default_instance_;
PROTOBUF_CONSTEXPR EnemyGotHitUpdate::EnemyGotHitUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.enemy_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnemyGotHitUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnemyGotHitUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnemyGotHitUpdateDefaultTypeInternal() {}
  union {
    EnemyGotHitUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnemyGotHitUpdateDefaultTypeInternal _EnemyGotHitUpdate_default_instance_;
PROTOBUF_CONSTEXPR EnemyPositionsUpdate::EnemyPositionsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enemy_positions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnemyPositionsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnemyPositionsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnemyPositionsUpdateDefaultTypeInternal() {}
  union {
    EnemyPositionsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnemyPositionsUpdateDefaultTypeInternal _EnemyPositionsUpdate_default_instance_;
PROTOBUF_CONSTEXPR MapPositionsUpdate::MapPositionsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.enemies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapPositionsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapPositionsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapPositionsUpdateDefaultTypeInternal() {}
  union {
    MapPositionsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapPositionsUpdateDefaultTypeInternal _MapPositionsUpdate_default_instance_;
PROTOBUF_CONSTEXPR MapDimensionsUpdate::MapDimensionsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obstacles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapDimensionsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDimensionsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDimensionsUpdateDefaultTypeInternal() {}
  union {
    MapDimensionsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDimensionsUpdateDefaultTypeInternal _MapDimensionsUpdate_default_instance_;
PROTOBUF_CONSTEXPR SpawningEnemiesResponse::SpawningEnemiesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enemy_id_)*/{}
  , /*decltype(_impl_._enemy_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawningEnemiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawningEnemiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawningEnemiesResponseDefaultTypeInternal() {}
  union {
    SpawningEnemiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawningEnemiesResponseDefaultTypeInternal _SpawningEnemiesResponse_default_instance_;
PROTOBUF_CONSTEXPR BytePrefix::BytePrefix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bytes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BytePrefixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BytePrefixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BytePrefixDefaultTypeInternal() {}
  union {
    BytePrefix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BytePrefixDefaultTypeInternal _BytePrefix_default_instance_;
PROTOBUF_CONSTEXPR StateUpdate::StateUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compressed_map_dimensions_update_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.map_positions_update_)*/nullptr
  , /*decltype(_impl_.movement_update_)*/nullptr
  , /*decltype(_impl_.enemy_positions_update_)*/nullptr
  , /*decltype(_impl_.map_dimensions_update_)*/nullptr
  , /*decltype(_impl_.enemy_got_hit_update_)*/nullptr
  , /*decltype(_impl_.variant_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StateUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateUpdateDefaultTypeInternal() {}
  union {
    StateUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
}  // namespace comm
static ::_pb::Metadata file_level_metadata_comm_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_comm_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_comm_2eproto = nullptr;

const uint32_t TableStruct_comm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.weapon_pivot_x_),
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.weapon_pivot_y_),
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.attack_),
  PROTOBUF_FIELD_OFFSET(::comm::MovementUpdate, _impl_.curr_room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.player_attack_damage_),
  PROTOBUF_FIELD_OFFSET(::comm::Player, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::comm::Item, _impl_.gen_),
  PROTOBUF_FIELD_OFFSET(::comm::Item, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::InitialInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::InitialInfo, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::comm::InitialInfo, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::comm::InitialInfo, _impl_.next_item_),
  PROTOBUF_FIELD_OFFSET(::comm::InitialInfo, _impl_.connected_players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Room, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::comm::Room, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::comm::Obstacle, _impl_.top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.texture_data_),
  PROTOBUF_FIELD_OFFSET(::comm::Enemy, _impl_.collision_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _impl_.tile_id_),
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _impl_.tile_set_),
  PROTOBUF_FIELD_OFFSET(::comm::TextureData, _impl_.tile_layer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.x_offset_),
  PROTOBUF_FIELD_OFFSET(::comm::CollisionData, _impl_.y_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyGotHitUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyGotHitUpdate, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::comm::EnemyGotHitUpdate, _impl_.enemy_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyPositionsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::EnemyPositionsUpdate, _impl_.enemy_positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::MapPositionsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::MapPositionsUpdate, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::comm::MapPositionsUpdate, _impl_.enemies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::MapDimensionsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::MapDimensionsUpdate, _impl_.obstacles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::SpawningEnemiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::SpawningEnemiesResponse, _impl_.enemy_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::BytePrefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::BytePrefix, _impl_.bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.variant_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.map_positions_update_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.movement_update_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.enemy_positions_update_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.map_dimensions_update_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.enemy_got_hit_update_),
  PROTOBUF_FIELD_OFFSET(::comm::StateUpdate, _impl_.compressed_map_dimensions_update_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::comm::MovementUpdate)},
  { 14, -1, -1, sizeof(::comm::Player)},
  { 25, -1, -1, sizeof(::comm::Item)},
  { 34, -1, -1, sizeof(::comm::InitialInfo)},
  { 44, -1, -1, sizeof(::comm::Room)},
  { 52, -1, -1, sizeof(::comm::Obstacle)},
  { 60, -1, -1, sizeof(::comm::Enemy)},
  { 75, -1, -1, sizeof(::comm::TextureData)},
  { 84, -1, -1, sizeof(::comm::CollisionData)},
  { 95, -1, -1, sizeof(::comm::EnemyGotHitUpdate)},
  { 103, -1, -1, sizeof(::comm::EnemyPositionsUpdate)},
  { 110, -1, -1, sizeof(::comm::MapPositionsUpdate)},
  { 118, -1, -1, sizeof(::comm::MapDimensionsUpdate)},
  { 125, -1, -1, sizeof(::comm::SpawningEnemiesResponse)},
  { 132, -1, -1, sizeof(::comm::BytePrefix)},
  { 139, -1, -1, sizeof(::comm::StateUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::comm::_MovementUpdate_default_instance_._instance,
  &::comm::_Player_default_instance_._instance,
  &::comm::_Item_default_instance_._instance,
  &::comm::_InitialInfo_default_instance_._instance,
  &::comm::_Room_default_instance_._instance,
  &::comm::_Obstacle_default_instance_._instance,
  &::comm::_Enemy_default_instance_._instance,
  &::comm::_TextureData_default_instance_._instance,
  &::comm::_CollisionData_default_instance_._instance,
  &::comm::_EnemyGotHitUpdate_default_instance_._instance,
  &::comm::_EnemyPositionsUpdate_default_instance_._instance,
  &::comm::_MapPositionsUpdate_default_instance_._instance,
  &::comm::_MapDimensionsUpdate_default_instance_._instance,
  &::comm::_SpawningEnemiesResponse_default_instance_._instance,
  &::comm::_BytePrefix_default_instance_._instance,
  &::comm::_StateUpdate_default_instance_._instance,
};

const char descriptor_table_protodef_comm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ncomm.proto\022\004comm\"\275\001\n\016MovementUpdate\022\021\n"
  "\tentity_id\030\001 \001(\r\022\022\n\nposition_x\030\002 \001(\002\022\022\n\n"
  "position_y\030\003 \001(\002\022\026\n\016weapon_pivot_x\030\004 \001(\002"
  "\022\026\n\016weapon_pivot_y\030\005 \001(\002\022\021\n\tdirection\030\006 "
  "\001(\002\022\016\n\006attack\030\007 \001(\010\022\035\n\tcurr_room\030\010 \001(\0132\n"
  ".comm.Room\"u\n\006Player\022\n\n\002id\030\001 \001(\r\022\022\n\nposi"
  "tion_x\030\002 \001(\002\022\022\n\nposition_y\030\003 \001(\002\022\034\n\024play"
  "er_attack_damage\030\004 \001(\001\022\031\n\005items\030\005 \003(\0132\n."
  "comm.Item\"=\n\004Item\022\n\n\002id\030\001 \001(\r\022\013\n\003gen\030\002 \001"
  "(\r\022\034\n\004type\030\003 \001(\0162\016.comm.ItemType\"\201\001\n\013Ini"
  "tialInfo\022\034\n\006player\030\001 \001(\0132\014.comm.Player\022\014"
  "\n\004seed\030\002 \001(\003\022\035\n\tnext_item\030\003 \001(\0132\n.comm.I"
  "tem\022\'\n\021connected_players\030\004 \003(\0132\014.comm.Pl"
  "ayer\"\034\n\004Room\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"%\n\010Ob"
  "stacle\022\014\n\004left\030\001 \001(\005\022\013\n\003top\030\002 \001(\005\"\311\001\n\005En"
  "emy\022\n\n\002id\030\001 \001(\r\022\022\n\nposition_x\030\002 \001(\002\022\022\n\np"
  "osition_y\030\003 \001(\002\022\014\n\004type\030\004 \001(\t\022\014\n\004name\030\005 "
  "\001(\t\022\n\n\002hp\030\006 \001(\001\022\016\n\006damage\030\007 \001(\001\022\'\n\014textu"
  "re_data\030\010 \001(\0132\021.comm.TextureData\022+\n\016coll"
  "ision_data\030\t \001(\0132\023.comm.CollisionData\"D\n"
  "\013TextureData\022\017\n\007tile_id\030\001 \001(\r\022\020\n\010tile_se"
  "t\030\002 \001(\t\022\022\n\ntile_layer\030\003 \001(\005\"`\n\rCollision"
  "Data\022\014\n\004type\030\001 \001(\005\022\r\n\005width\030\002 \001(\002\022\016\n\006hei"
  "ght\030\003 \001(\002\022\020\n\010x_offset\030\004 \001(\002\022\020\n\010y_offset\030"
  "\005 \001(\002\"8\n\021EnemyGotHitUpdate\022\021\n\tplayer_id\030"
  "\001 \001(\r\022\020\n\010enemy_id\030\002 \001(\r\"<\n\024EnemyPosition"
  "sUpdate\022$\n\017enemy_positions\030\001 \003(\0132\013.comm."
  "Enemy\"Q\n\022MapPositionsUpdate\022\035\n\007players\030\001"
  " \003(\0132\014.comm.Player\022\034\n\007enemies\030\002 \003(\0132\013.co"
  "mm.Enemy\"8\n\023MapDimensionsUpdate\022!\n\tobsta"
  "cles\030\001 \003(\0132\016.comm.Obstacle\"+\n\027SpawningEn"
  "emiesResponse\022\020\n\010enemy_id\030\001 \003(\r\"\033\n\nByteP"
  "refix\022\r\n\005bytes\030\001 \001(\r\"\302\003\n\013StateUpdate\022\034\n\006"
  "player\030\001 \001(\0132\014.comm.Player\022\030\n\004item\030\002 \001(\013"
  "2\n.comm.Item\022#\n\007variant\030\003 \001(\0162\022.comm.Sta"
  "teVariant\022\030\n\004room\030\004 \001(\0132\n.comm.Room\0226\n\024m"
  "ap_positions_update\030\005 \001(\0132\030.comm.MapPosi"
  "tionsUpdate\022-\n\017movement_update\030\006 \001(\0132\024.c"
  "omm.MovementUpdate\022:\n\026enemy_positions_up"
  "date\030\007 \001(\0132\032.comm.EnemyPositionsUpdate\0228"
  "\n\025map_dimensions_update\030\010 \001(\0132\031.comm.Map"
  "DimensionsUpdate\0225\n\024enemy_got_hit_update"
  "\030\t \001(\0132\027.comm.EnemyGotHitUpdate\022(\n compr"
  "essed_map_dimensions_update\030\n \001(\014*\230\002\n\014St"
  "ateVariant\022\010\n\004NONE\020\000\022\r\n\tCONNECTED\020\001\022\020\n\014D"
  "ISCONNECTED\020\002\022\020\n\014ROOM_CHANGED\020\003\022\020\n\014ROOM_"
  "CLEARED\020\004\022\020\n\014CHEST_OPENED\020\005\022\032\n\026REQUEST_I"
  "TEM_GENERATOR\020\006\022\021\n\rITEM_EQUIPPED\020\007\022\016\n\nMA"
  "P_UPDATE\020\010\022\032\n\026PLAYER_POSITION_UPDATE\020\t\022\031"
  "\n\025MAP_DIMENSIONS_UPDATE\020\n\022\027\n\023SPAWN_ENEMY"
  "_REQUEST\020\013\022\030\n\024ENEMY_GOT_HIT_UPDATE\020\014*G\n\010"
  "ItemType\022\013\n\007UNKNOWN\020\000\022\n\n\006WEAPON\020\001\022\n\n\006ARM"
  "OUR\020\002\022\n\n\006POTION\020\003\022\n\n\006HELMET\020\004B6Z4github."
  "com/kmrd-industries/qlp-proto-bindings/g"
  "en/gob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_comm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_comm_2eproto = {
    false, false, 2173, descriptor_table_protodef_comm_2eproto,
    "comm.proto",
    &descriptor_table_comm_2eproto_once, nullptr, 0, 16,
    schemas, file_default_instances, TableStruct_comm_2eproto::offsets,
    file_level_metadata_comm_2eproto, file_level_enum_descriptors_comm_2eproto,
    file_level_service_descriptors_comm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_comm_2eproto_getter() {
  return &descriptor_table_comm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_comm_2eproto(&descriptor_table_comm_2eproto);
namespace comm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_comm_2eproto);
  return file_level_enum_descriptors_comm_2eproto[0];
}
bool StateVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_comm_2eproto);
  return file_level_enum_descriptors_comm_2eproto[1];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MovementUpdate::_Internal {
 public:
  static const ::comm::Room& curr_room(const MovementUpdate* msg);
};

const ::comm::Room&
MovementUpdate::_Internal::curr_room(const MovementUpdate* msg) {
  return *msg->_impl_.curr_room_;
}
MovementUpdate::MovementUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.MovementUpdate)
}
MovementUpdate::MovementUpdate(const MovementUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MovementUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.curr_room_){nullptr}
    , decltype(_impl_.entity_id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.weapon_pivot_x_){}
    , decltype(_impl_.weapon_pivot_y_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.attack_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curr_room()) {
    _this->_impl_.curr_room_ = new ::comm::Room(*from._impl_.curr_room_);
  }
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.attack_));
  // @@protoc_insertion_point(copy_constructor:comm.MovementUpdate)
}

inline void MovementUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.curr_room_){nullptr}
    , decltype(_impl_.entity_id_){0u}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.weapon_pivot_x_){0}
    , decltype(_impl_.weapon_pivot_y_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.attack_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MovementUpdate::~MovementUpdate() {
  // @@protoc_insertion_point(destructor:comm.MovementUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MovementUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.curr_room_;
}

void MovementUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MovementUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.MovementUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.curr_room_ != nullptr) {
    delete _impl_.curr_room_;
  }
  _impl_.curr_room_ = nullptr;
  ::memset(&_impl_.entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_) -
      reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.attack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovementUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float weapon_pivot_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.weapon_pivot_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float weapon_pivot_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.weapon_pivot_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool attack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.Room curr_room = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_curr_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MovementUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.MovementUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity_id(), target);
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_position_x(), target);
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_position_y(), target);
  }

  // float weapon_pivot_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_pivot_x = this->_internal_weapon_pivot_x();
  uint32_t raw_weapon_pivot_x;
  memcpy(&raw_weapon_pivot_x, &tmp_weapon_pivot_x, sizeof(tmp_weapon_pivot_x));
  if (raw_weapon_pivot_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_weapon_pivot_x(), target);
  }

  // float weapon_pivot_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_pivot_y = this->_internal_weapon_pivot_y();
  uint32_t raw_weapon_pivot_y;
  memcpy(&raw_weapon_pivot_y, &tmp_weapon_pivot_y, sizeof(tmp_weapon_pivot_y));
  if (raw_weapon_pivot_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_weapon_pivot_y(), target);
  }

  // float direction = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_direction(), target);
  }

  // bool attack = 7;
  if (this->_internal_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_attack(), target);
  }

  // .comm.Room curr_room = 8;
  if (this->_internal_has_curr_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::curr_room(this),
        _Internal::curr_room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MovementUpdate)
  return target;
}

size_t MovementUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.MovementUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .comm.Room curr_room = 8;
  if (this->_internal_has_curr_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.curr_room_);
  }

  // uint32 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entity_id());
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    total_size += 1 + 4;
  }

  // float weapon_pivot_x = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_pivot_x = this->_internal_weapon_pivot_x();
  uint32_t raw_weapon_pivot_x;
  memcpy(&raw_weapon_pivot_x, &tmp_weapon_pivot_x, sizeof(tmp_weapon_pivot_x));
  if (raw_weapon_pivot_x != 0) {
    total_size += 1 + 4;
  }

  // float weapon_pivot_y = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_pivot_y = this->_internal_weapon_pivot_y();
  uint32_t raw_weapon_pivot_y;
  memcpy(&raw_weapon_pivot_y, &tmp_weapon_pivot_y, sizeof(tmp_weapon_pivot_y));
  if (raw_weapon_pivot_y != 0) {
    total_size += 1 + 4;
  }

  // float direction = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = this->_internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 4;
  }

  // bool attack = 7;
  if (this->_internal_attack() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MovementUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MovementUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MovementUpdate::GetClassData() const { return &_class_data_; }


void MovementUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MovementUpdate*>(&to_msg);
  auto& from = static_cast<const MovementUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.MovementUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_curr_room()) {
    _this->_internal_mutable_curr_room()->::comm::Room::MergeFrom(
        from._internal_curr_room());
  }
  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = from._internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    _this->_internal_set_position_y(from._internal_position_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_pivot_x = from._internal_weapon_pivot_x();
  uint32_t raw_weapon_pivot_x;
  memcpy(&raw_weapon_pivot_x, &tmp_weapon_pivot_x, sizeof(tmp_weapon_pivot_x));
  if (raw_weapon_pivot_x != 0) {
    _this->_internal_set_weapon_pivot_x(from._internal_weapon_pivot_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_pivot_y = from._internal_weapon_pivot_y();
  uint32_t raw_weapon_pivot_y;
  memcpy(&raw_weapon_pivot_y, &tmp_weapon_pivot_y, sizeof(tmp_weapon_pivot_y));
  if (raw_weapon_pivot_y != 0) {
    _this->_internal_set_weapon_pivot_y(from._internal_weapon_pivot_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_direction = from._internal_direction();
  uint32_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_attack() != 0) {
    _this->_internal_set_attack(from._internal_attack());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MovementUpdate::CopyFrom(const MovementUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.MovementUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovementUpdate::IsInitialized() const {
  return true;
}

void MovementUpdate::InternalSwap(MovementUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovementUpdate, _impl_.attack_)
      + sizeof(MovementUpdate::_impl_.attack_)
      - PROTOBUF_FIELD_OFFSET(MovementUpdate, _impl_.curr_room_)>(
          reinterpret_cast<char*>(&_impl_.curr_room_),
          reinterpret_cast<char*>(&other->_impl_.curr_room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovementUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[0]);
}

// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.player_attack_damage_){}
    , decltype(_impl_.position_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_y_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.position_y_));
  // @@protoc_insertion_point(copy_constructor:comm.Player)
}

inline void Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.player_attack_damage_){0}
    , decltype(_impl_.position_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:comm.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.position_y_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.position_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double player_attack_damage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.player_attack_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .comm.Item items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_position_x(), target);
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_position_y(), target);
  }

  // double player_attack_damage = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_player_attack_damage = this->_internal_player_attack_damage();
  uint64_t raw_player_attack_damage;
  memcpy(&raw_player_attack_damage, &tmp_player_attack_damage, sizeof(tmp_player_attack_damage));
  if (raw_player_attack_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_player_attack_damage(), target);
  }

  // repeated .comm.Item items = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Item items = 5;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // double player_attack_damage = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_player_attack_damage = this->_internal_player_attack_damage();
  uint64_t raw_player_attack_damage;
  memcpy(&raw_player_attack_damage, &tmp_player_attack_damage, sizeof(tmp_player_attack_damage));
  if (raw_player_attack_damage != 0) {
    total_size += 1 + 8;
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_player_attack_damage = from._internal_player_attack_damage();
  uint64_t raw_player_attack_damage;
  memcpy(&raw_player_attack_damage, &tmp_player_attack_damage, sizeof(tmp_player_attack_damage));
  if (raw_player_attack_damage != 0) {
    _this->_internal_set_player_attack_damage(from._internal_player_attack_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = from._internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    _this->_internal_set_position_y(from._internal_position_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, _impl_.position_y_)
      + sizeof(Player::_impl_.position_y_)
      - PROTOBUF_FIELD_OFFSET(Player, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[1]);
}

// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.gen_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:comm.Item)
}

inline void Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.gen_){0u}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:comm.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 gen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.ItemType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::comm::ItemType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 gen = 2;
  if (this->_internal_gen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gen(), target);
  }

  // .comm.ItemType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 gen = 2;
  if (this->_internal_gen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gen());
  }

  // .comm.ItemType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_gen() != 0) {
    _this->_internal_set_gen(from._internal_gen());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, _impl_.type_)
      + sizeof(Item::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Item, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[2]);
}

// ===================================================================

class InitialInfo::_Internal {
 public:
  static const ::comm::Player& player(const InitialInfo* msg);
  static const ::comm::Item& next_item(const InitialInfo* msg);
};

const ::comm::Player&
InitialInfo::_Internal::player(const InitialInfo* msg) {
  return *msg->_impl_.player_;
}
const ::comm::Item&
InitialInfo::_Internal::next_item(const InitialInfo* msg) {
  return *msg->_impl_.next_item_;
}
InitialInfo::InitialInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.InitialInfo)
}
InitialInfo::InitialInfo(const InitialInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitialInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connected_players_){from._impl_.connected_players_}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.next_item_){nullptr}
    , decltype(_impl_.seed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::comm::Player(*from._impl_.player_);
  }
  if (from._internal_has_next_item()) {
    _this->_impl_.next_item_ = new ::comm::Item(*from._impl_.next_item_);
  }
  _this->_impl_.seed_ = from._impl_.seed_;
  // @@protoc_insertion_point(copy_constructor:comm.InitialInfo)
}

inline void InitialInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connected_players_){arena}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.next_item_){nullptr}
    , decltype(_impl_.seed_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InitialInfo::~InitialInfo() {
  // @@protoc_insertion_point(destructor:comm.InitialInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitialInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connected_players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.next_item_;
}

void InitialInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitialInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.InitialInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connected_players_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.next_item_ != nullptr) {
    delete _impl_.next_item_;
  }
  _impl_.next_item_ = nullptr;
  _impl_.seed_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitialInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .comm.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.Item next_item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .comm.Player connected_players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connected_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitialInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.InitialInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .comm.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // int64 seed = 2;
  if (this->_internal_seed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seed(), target);
  }

  // .comm.Item next_item = 3;
  if (this->_internal_has_next_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::next_item(this),
        _Internal::next_item(this).GetCachedSize(), target, stream);
  }

  // repeated .comm.Player connected_players = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connected_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_connected_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.InitialInfo)
  return target;
}

size_t InitialInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.InitialInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Player connected_players = 4;
  total_size += 1UL * this->_internal_connected_players_size();
  for (const auto& msg : this->_impl_.connected_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .comm.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .comm.Item next_item = 3;
  if (this->_internal_has_next_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_item_);
  }

  // int64 seed = 2;
  if (this->_internal_seed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitialInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitialInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitialInfo::GetClassData() const { return &_class_data_; }


void InitialInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitialInfo*>(&to_msg);
  auto& from = static_cast<const InitialInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.InitialInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connected_players_.MergeFrom(from._impl_.connected_players_);
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::comm::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_next_item()) {
    _this->_internal_mutable_next_item()->::comm::Item::MergeFrom(
        from._internal_next_item());
  }
  if (from._internal_seed() != 0) {
    _this->_internal_set_seed(from._internal_seed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitialInfo::CopyFrom(const InitialInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.InitialInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialInfo::IsInitialized() const {
  return true;
}

void InitialInfo::InternalSwap(InitialInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connected_players_.InternalSwap(&other->_impl_.connected_players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitialInfo, _impl_.seed_)
      + sizeof(InitialInfo::_impl_.seed_)
      - PROTOBUF_FIELD_OFFSET(InitialInfo, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[3]);
}

// ===================================================================

class Room::_Internal {
 public:
};

Room::Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Room* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:comm.Room)
}

inline void Room::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:comm.Room)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Room::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Room::GetClassData() const { return &_class_data_; }


void Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Room)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, _impl_.y_)
      + sizeof(Room::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Room, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[4]);
}

// ===================================================================

class Obstacle::_Internal {
 public:
};

Obstacle::Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Obstacle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){}
    , decltype(_impl_.top_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.left_, &from._impl_.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.top_) -
    reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.top_));
  // @@protoc_insertion_point(copy_constructor:comm.Obstacle)
}

inline void Obstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){0}
    , decltype(_impl_.top_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:comm.Obstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Obstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Obstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Obstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.top_) -
      reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.top_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Obstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Obstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 left = 1;
  if (this->_internal_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_left(), target);
  }

  // int32 top = 2;
  if (this->_internal_top() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_top(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Obstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 left = 1;
  if (this->_internal_left() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_left());
  }

  // int32 top = 2;
  if (this->_internal_top() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Obstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Obstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Obstacle::GetClassData() const { return &_class_data_; }


void Obstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Obstacle*>(&to_msg);
  auto& from = static_cast<const Obstacle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Obstacle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_left() != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  if (from._internal_top() != 0) {
    _this->_internal_set_top(from._internal_top());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obstacle, _impl_.top_)
      + sizeof(Obstacle::_impl_.top_)
      - PROTOBUF_FIELD_OFFSET(Obstacle, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[5]);
}

// ===================================================================

class Enemy::_Internal {
 public:
  static const ::comm::TextureData& texture_data(const Enemy* msg);
  static const ::comm::CollisionData& collision_data(const Enemy* msg);
};

const ::comm::TextureData&
Enemy::_Internal::texture_data(const Enemy* msg) {
  return *msg->_impl_.texture_data_;
}
const ::comm::CollisionData&
Enemy::_Internal::collision_data(const Enemy* msg) {
  return *msg->_impl_.collision_data_;
}
Enemy::Enemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.Enemy)
}
Enemy::Enemy(const Enemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Enemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.texture_data_){nullptr}
    , decltype(_impl_.collision_data_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.position_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_texture_data()) {
    _this->_impl_.texture_data_ = new ::comm::TextureData(*from._impl_.texture_data_);
  }
  if (from._internal_has_collision_data()) {
    _this->_impl_.collision_data_ = new ::comm::CollisionData(*from._impl_.collision_data_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_y_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.position_y_));
  // @@protoc_insertion_point(copy_constructor:comm.Enemy)
}

inline void Enemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.texture_data_){nullptr}
    , decltype(_impl_.collision_data_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.position_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Enemy::~Enemy() {
  // @@protoc_insertion_point(destructor:comm.Enemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Enemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.texture_data_;
  if (this != internal_default_instance()) delete _impl_.collision_data_;
}

void Enemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Enemy::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.Enemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.texture_data_ != nullptr) {
    delete _impl_.texture_data_;
  }
  _impl_.texture_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.collision_data_ != nullptr) {
    delete _impl_.collision_data_;
  }
  _impl_.collision_data_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.position_y_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.position_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Enemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "comm.Enemy.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "comm.Enemy.name"));
        } else
          goto handle_unusual;
        continue;
      // double hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double damage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .comm.TextureData texture_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.CollisionData collision_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_collision_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Enemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.Enemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_position_x(), target);
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_position_y(), target);
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "comm.Enemy.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "comm.Enemy.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // double hp = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hp = this->_internal_hp();
  uint64_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_hp(), target);
  }

  // double damage = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = this->_internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_damage(), target);
  }

  // .comm.TextureData texture_data = 8;
  if (this->_internal_has_texture_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::texture_data(this),
        _Internal::texture_data(this).GetCachedSize(), target, stream);
  }

  // .comm.CollisionData collision_data = 9;
  if (this->_internal_has_collision_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::collision_data(this),
        _Internal::collision_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.Enemy)
  return target;
}

size_t Enemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.Enemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 4;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .comm.TextureData texture_data = 8;
  if (this->_internal_has_texture_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.texture_data_);
  }

  // .comm.CollisionData collision_data = 9;
  if (this->_internal_has_collision_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collision_data_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // double hp = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hp = this->_internal_hp();
  uint64_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    total_size += 1 + 8;
  }

  // double damage = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = this->_internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    total_size += 1 + 8;
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Enemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Enemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Enemy::GetClassData() const { return &_class_data_; }


void Enemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Enemy*>(&to_msg);
  auto& from = static_cast<const Enemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.Enemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_texture_data()) {
    _this->_internal_mutable_texture_data()->::comm::TextureData::MergeFrom(
        from._internal_texture_data());
  }
  if (from._internal_has_collision_data()) {
    _this->_internal_mutable_collision_data()->::comm::CollisionData::MergeFrom(
        from._internal_collision_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_hp = from._internal_hp();
  uint64_t raw_hp;
  memcpy(&raw_hp, &tmp_hp, sizeof(tmp_hp));
  if (raw_hp != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_damage = from._internal_damage();
  uint64_t raw_damage;
  memcpy(&raw_damage, &tmp_damage, sizeof(tmp_damage));
  if (raw_damage != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = from._internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    _this->_internal_set_position_y(from._internal_position_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Enemy::CopyFrom(const Enemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.Enemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enemy::IsInitialized() const {
  return true;
}

void Enemy::InternalSwap(Enemy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Enemy, _impl_.position_y_)
      + sizeof(Enemy::_impl_.position_y_)
      - PROTOBUF_FIELD_OFFSET(Enemy, _impl_.texture_data_)>(
          reinterpret_cast<char*>(&_impl_.texture_data_),
          reinterpret_cast<char*>(&other->_impl_.texture_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Enemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[6]);
}

// ===================================================================

class TextureData::_Internal {
 public:
};

TextureData::TextureData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.TextureData)
}
TextureData::TextureData(const TextureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TextureData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tile_set_){}
    , decltype(_impl_.tile_id_){}
    , decltype(_impl_.tile_layer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tile_set_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tile_set_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tile_set().empty()) {
    _this->_impl_.tile_set_.Set(from._internal_tile_set(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tile_id_, &from._impl_.tile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tile_layer_) -
    reinterpret_cast<char*>(&_impl_.tile_id_)) + sizeof(_impl_.tile_layer_));
  // @@protoc_insertion_point(copy_constructor:comm.TextureData)
}

inline void TextureData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tile_set_){}
    , decltype(_impl_.tile_id_){0u}
    , decltype(_impl_.tile_layer_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tile_set_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tile_set_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TextureData::~TextureData() {
  // @@protoc_insertion_point(destructor:comm.TextureData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TextureData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tile_set_.Destroy();
}

void TextureData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TextureData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.TextureData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tile_set_.ClearToEmpty();
  ::memset(&_impl_.tile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tile_layer_) -
      reinterpret_cast<char*>(&_impl_.tile_id_)) + sizeof(_impl_.tile_layer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextureData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tile_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tile_set();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "comm.TextureData.tile_set"));
        } else
          goto handle_unusual;
        continue;
      // int32 tile_layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tile_layer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TextureData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.TextureData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tile_id = 1;
  if (this->_internal_tile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tile_id(), target);
  }

  // string tile_set = 2;
  if (!this->_internal_tile_set().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tile_set().data(), static_cast<int>(this->_internal_tile_set().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "comm.TextureData.tile_set");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tile_set(), target);
  }

  // int32 tile_layer = 3;
  if (this->_internal_tile_layer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tile_layer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.TextureData)
  return target;
}

size_t TextureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.TextureData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tile_set = 2;
  if (!this->_internal_tile_set().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tile_set());
  }

  // uint32 tile_id = 1;
  if (this->_internal_tile_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_id());
  }

  // int32 tile_layer = 3;
  if (this->_internal_tile_layer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tile_layer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TextureData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TextureData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TextureData::GetClassData() const { return &_class_data_; }


void TextureData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TextureData*>(&to_msg);
  auto& from = static_cast<const TextureData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.TextureData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tile_set().empty()) {
    _this->_internal_set_tile_set(from._internal_tile_set());
  }
  if (from._internal_tile_id() != 0) {
    _this->_internal_set_tile_id(from._internal_tile_id());
  }
  if (from._internal_tile_layer() != 0) {
    _this->_internal_set_tile_layer(from._internal_tile_layer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TextureData::CopyFrom(const TextureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.TextureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextureData::IsInitialized() const {
  return true;
}

void TextureData::InternalSwap(TextureData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tile_set_, lhs_arena,
      &other->_impl_.tile_set_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TextureData, _impl_.tile_layer_)
      + sizeof(TextureData::_impl_.tile_layer_)
      - PROTOBUF_FIELD_OFFSET(TextureData, _impl_.tile_id_)>(
          reinterpret_cast<char*>(&_impl_.tile_id_),
          reinterpret_cast<char*>(&other->_impl_.tile_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TextureData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[7]);
}

// ===================================================================

class CollisionData::_Internal {
 public:
};

CollisionData::CollisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.CollisionData)
}
CollisionData::CollisionData(const CollisionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollisionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.x_offset_){}
    , decltype(_impl_.y_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_offset_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_offset_));
  // @@protoc_insertion_point(copy_constructor:comm.CollisionData)
}

inline void CollisionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.x_offset_){0}
    , decltype(_impl_.y_offset_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollisionData::~CollisionData() {
  // @@protoc_insertion_point(destructor:comm.CollisionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollisionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollisionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.CollisionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_offset_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollisionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.x_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.y_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollisionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.CollisionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // float width = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_width(), target);
  }

  // float height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_height(), target);
  }

  // float x_offset = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_offset = this->_internal_x_offset();
  uint32_t raw_x_offset;
  memcpy(&raw_x_offset, &tmp_x_offset, sizeof(tmp_x_offset));
  if (raw_x_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_x_offset(), target);
  }

  // float y_offset = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_offset = this->_internal_y_offset();
  uint32_t raw_y_offset;
  memcpy(&raw_y_offset, &tmp_y_offset, sizeof(tmp_y_offset));
  if (raw_y_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_y_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.CollisionData)
  return target;
}

size_t CollisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.CollisionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // float width = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  // float height = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  // float x_offset = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_offset = this->_internal_x_offset();
  uint32_t raw_x_offset;
  memcpy(&raw_x_offset, &tmp_x_offset, sizeof(tmp_x_offset));
  if (raw_x_offset != 0) {
    total_size += 1 + 4;
  }

  // float y_offset = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_offset = this->_internal_y_offset();
  uint32_t raw_y_offset;
  memcpy(&raw_y_offset, &tmp_y_offset, sizeof(tmp_y_offset));
  if (raw_y_offset != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollisionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollisionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollisionData::GetClassData() const { return &_class_data_; }


void CollisionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollisionData*>(&to_msg);
  auto& from = static_cast<const CollisionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.CollisionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x_offset = from._internal_x_offset();
  uint32_t raw_x_offset;
  memcpy(&raw_x_offset, &tmp_x_offset, sizeof(tmp_x_offset));
  if (raw_x_offset != 0) {
    _this->_internal_set_x_offset(from._internal_x_offset());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y_offset = from._internal_y_offset();
  uint32_t raw_y_offset;
  memcpy(&raw_y_offset, &tmp_y_offset, sizeof(tmp_y_offset));
  if (raw_y_offset != 0) {
    _this->_internal_set_y_offset(from._internal_y_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionData::CopyFrom(const CollisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.CollisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionData::IsInitialized() const {
  return true;
}

void CollisionData::InternalSwap(CollisionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CollisionData, _impl_.y_offset_)
      + sizeof(CollisionData::_impl_.y_offset_)
      - PROTOBUF_FIELD_OFFSET(CollisionData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CollisionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[8]);
}

// ===================================================================

class EnemyGotHitUpdate::_Internal {
 public:
};

EnemyGotHitUpdate::EnemyGotHitUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.EnemyGotHitUpdate)
}
EnemyGotHitUpdate::EnemyGotHitUpdate(const EnemyGotHitUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnemyGotHitUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.enemy_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enemy_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.enemy_id_));
  // @@protoc_insertion_point(copy_constructor:comm.EnemyGotHitUpdate)
}

inline void EnemyGotHitUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0u}
    , decltype(_impl_.enemy_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnemyGotHitUpdate::~EnemyGotHitUpdate() {
  // @@protoc_insertion_point(destructor:comm.EnemyGotHitUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnemyGotHitUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnemyGotHitUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnemyGotHitUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.EnemyGotHitUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enemy_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.enemy_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnemyGotHitUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enemy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enemy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnemyGotHitUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.EnemyGotHitUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 enemy_id = 2;
  if (this->_internal_enemy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enemy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.EnemyGotHitUpdate)
  return target;
}

size_t EnemyGotHitUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.EnemyGotHitUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // uint32 enemy_id = 2;
  if (this->_internal_enemy_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enemy_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnemyGotHitUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnemyGotHitUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnemyGotHitUpdate::GetClassData() const { return &_class_data_; }


void EnemyGotHitUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnemyGotHitUpdate*>(&to_msg);
  auto& from = static_cast<const EnemyGotHitUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.EnemyGotHitUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_enemy_id() != 0) {
    _this->_internal_set_enemy_id(from._internal_enemy_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnemyGotHitUpdate::CopyFrom(const EnemyGotHitUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.EnemyGotHitUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyGotHitUpdate::IsInitialized() const {
  return true;
}

void EnemyGotHitUpdate::InternalSwap(EnemyGotHitUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnemyGotHitUpdate, _impl_.enemy_id_)
      + sizeof(EnemyGotHitUpdate::_impl_.enemy_id_)
      - PROTOBUF_FIELD_OFFSET(EnemyGotHitUpdate, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnemyGotHitUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[9]);
}

// ===================================================================

class EnemyPositionsUpdate::_Internal {
 public:
};

EnemyPositionsUpdate::EnemyPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.EnemyPositionsUpdate)
}
EnemyPositionsUpdate::EnemyPositionsUpdate(const EnemyPositionsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnemyPositionsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enemy_positions_){from._impl_.enemy_positions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.EnemyPositionsUpdate)
}

inline void EnemyPositionsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enemy_positions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnemyPositionsUpdate::~EnemyPositionsUpdate() {
  // @@protoc_insertion_point(destructor:comm.EnemyPositionsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnemyPositionsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enemy_positions_.~RepeatedPtrField();
}

void EnemyPositionsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnemyPositionsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.EnemyPositionsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enemy_positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnemyPositionsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .comm.Enemy enemy_positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemy_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnemyPositionsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.EnemyPositionsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .comm.Enemy enemy_positions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enemy_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_enemy_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.EnemyPositionsUpdate)
  return target;
}

size_t EnemyPositionsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.EnemyPositionsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Enemy enemy_positions = 1;
  total_size += 1UL * this->_internal_enemy_positions_size();
  for (const auto& msg : this->_impl_.enemy_positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnemyPositionsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnemyPositionsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnemyPositionsUpdate::GetClassData() const { return &_class_data_; }


void EnemyPositionsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnemyPositionsUpdate*>(&to_msg);
  auto& from = static_cast<const EnemyPositionsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.EnemyPositionsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enemy_positions_.MergeFrom(from._impl_.enemy_positions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnemyPositionsUpdate::CopyFrom(const EnemyPositionsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.EnemyPositionsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyPositionsUpdate::IsInitialized() const {
  return true;
}

void EnemyPositionsUpdate::InternalSwap(EnemyPositionsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enemy_positions_.InternalSwap(&other->_impl_.enemy_positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnemyPositionsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[10]);
}

// ===================================================================

class MapPositionsUpdate::_Internal {
 public:
};

MapPositionsUpdate::MapPositionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.MapPositionsUpdate)
}
MapPositionsUpdate::MapPositionsUpdate(const MapPositionsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapPositionsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.enemies_){from._impl_.enemies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.MapPositionsUpdate)
}

inline void MapPositionsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.enemies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapPositionsUpdate::~MapPositionsUpdate() {
  // @@protoc_insertion_point(destructor:comm.MapPositionsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapPositionsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.enemies_.~RepeatedPtrField();
}

void MapPositionsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapPositionsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.MapPositionsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.enemies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapPositionsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .comm.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .comm.Enemy enemies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapPositionsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.MapPositionsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .comm.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .comm.Enemy enemies = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enemies_size()); i < n; i++) {
    const auto& repfield = this->_internal_enemies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MapPositionsUpdate)
  return target;
}

size_t MapPositionsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.MapPositionsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .comm.Enemy enemies = 2;
  total_size += 1UL * this->_internal_enemies_size();
  for (const auto& msg : this->_impl_.enemies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapPositionsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapPositionsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapPositionsUpdate::GetClassData() const { return &_class_data_; }


void MapPositionsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapPositionsUpdate*>(&to_msg);
  auto& from = static_cast<const MapPositionsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.MapPositionsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.enemies_.MergeFrom(from._impl_.enemies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapPositionsUpdate::CopyFrom(const MapPositionsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.MapPositionsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPositionsUpdate::IsInitialized() const {
  return true;
}

void MapPositionsUpdate::InternalSwap(MapPositionsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.enemies_.InternalSwap(&other->_impl_.enemies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPositionsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[11]);
}

// ===================================================================

class MapDimensionsUpdate::_Internal {
 public:
};

MapDimensionsUpdate::MapDimensionsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.MapDimensionsUpdate)
}
MapDimensionsUpdate::MapDimensionsUpdate(const MapDimensionsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MapDimensionsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacles_){from._impl_.obstacles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.MapDimensionsUpdate)
}

inline void MapDimensionsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MapDimensionsUpdate::~MapDimensionsUpdate() {
  // @@protoc_insertion_point(destructor:comm.MapDimensionsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapDimensionsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacles_.~RepeatedPtrField();
}

void MapDimensionsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapDimensionsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.MapDimensionsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obstacles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapDimensionsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .comm.Obstacle obstacles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapDimensionsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.MapDimensionsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .comm.Obstacle obstacles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacles_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MapDimensionsUpdate)
  return target;
}

size_t MapDimensionsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.MapDimensionsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .comm.Obstacle obstacles = 1;
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->_impl_.obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapDimensionsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MapDimensionsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapDimensionsUpdate::GetClassData() const { return &_class_data_; }


void MapDimensionsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MapDimensionsUpdate*>(&to_msg);
  auto& from = static_cast<const MapDimensionsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.MapDimensionsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.obstacles_.MergeFrom(from._impl_.obstacles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapDimensionsUpdate::CopyFrom(const MapDimensionsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.MapDimensionsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapDimensionsUpdate::IsInitialized() const {
  return true;
}

void MapDimensionsUpdate::InternalSwap(MapDimensionsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.obstacles_.InternalSwap(&other->_impl_.obstacles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapDimensionsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[12]);
}

// ===================================================================

class SpawningEnemiesResponse::_Internal {
 public:
};

SpawningEnemiesResponse::SpawningEnemiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.SpawningEnemiesResponse)
}
SpawningEnemiesResponse::SpawningEnemiesResponse(const SpawningEnemiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawningEnemiesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enemy_id_){from._impl_.enemy_id_}
    , /*decltype(_impl_._enemy_id_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:comm.SpawningEnemiesResponse)
}

inline void SpawningEnemiesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enemy_id_){arena}
    , /*decltype(_impl_._enemy_id_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawningEnemiesResponse::~SpawningEnemiesResponse() {
  // @@protoc_insertion_point(destructor:comm.SpawningEnemiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawningEnemiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enemy_id_.~RepeatedField();
}

void SpawningEnemiesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawningEnemiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.SpawningEnemiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enemy_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawningEnemiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 enemy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_enemy_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawningEnemiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.SpawningEnemiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 enemy_id = 1;
  {
    int byte_size = _impl_._enemy_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_enemy_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.SpawningEnemiesResponse)
  return target;
}

size_t SpawningEnemiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.SpawningEnemiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 enemy_id = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._enemy_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawningEnemiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawningEnemiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawningEnemiesResponse::GetClassData() const { return &_class_data_; }


void SpawningEnemiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawningEnemiesResponse*>(&to_msg);
  auto& from = static_cast<const SpawningEnemiesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.SpawningEnemiesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enemy_id_.MergeFrom(from._impl_.enemy_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawningEnemiesResponse::CopyFrom(const SpawningEnemiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.SpawningEnemiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawningEnemiesResponse::IsInitialized() const {
  return true;
}

void SpawningEnemiesResponse::InternalSwap(SpawningEnemiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enemy_id_.InternalSwap(&other->_impl_.enemy_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawningEnemiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[13]);
}

// ===================================================================

class BytePrefix::_Internal {
 public:
};

BytePrefix::BytePrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.BytePrefix)
}
BytePrefix::BytePrefix(const BytePrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BytePrefix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.bytes_ = from._impl_.bytes_;
  // @@protoc_insertion_point(copy_constructor:comm.BytePrefix)
}

inline void BytePrefix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bytes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BytePrefix::~BytePrefix() {
  // @@protoc_insertion_point(destructor:comm.BytePrefix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BytePrefix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BytePrefix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BytePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.BytePrefix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bytes_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BytePrefix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BytePrefix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.BytePrefix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bytes = 1;
  if (this->_internal_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.BytePrefix)
  return target;
}

size_t BytePrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.BytePrefix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bytes = 1;
  if (this->_internal_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BytePrefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BytePrefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BytePrefix::GetClassData() const { return &_class_data_; }


void BytePrefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BytePrefix*>(&to_msg);
  auto& from = static_cast<const BytePrefix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.BytePrefix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bytes() != 0) {
    _this->_internal_set_bytes(from._internal_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BytePrefix::CopyFrom(const BytePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.BytePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytePrefix::IsInitialized() const {
  return true;
}

void BytePrefix::InternalSwap(BytePrefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.bytes_, other->_impl_.bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BytePrefix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[14]);
}

// ===================================================================

class StateUpdate::_Internal {
 public:
  static const ::comm::Player& player(const StateUpdate* msg);
  static const ::comm::Item& item(const StateUpdate* msg);
  static const ::comm::Room& room(const StateUpdate* msg);
  static const ::comm::MapPositionsUpdate& map_positions_update(const StateUpdate* msg);
  static const ::comm::MovementUpdate& movement_update(const StateUpdate* msg);
  static const ::comm::EnemyPositionsUpdate& enemy_positions_update(const StateUpdate* msg);
  static const ::comm::MapDimensionsUpdate& map_dimensions_update(const StateUpdate* msg);
  static const ::comm::EnemyGotHitUpdate& enemy_got_hit_update(const StateUpdate* msg);
};

const ::comm::Player&
StateUpdate::_Internal::player(const StateUpdate* msg) {
  return *msg->_impl_.player_;
}
const ::comm::Item&
StateUpdate::_Internal::item(const StateUpdate* msg) {
  return *msg->_impl_.item_;
}
const ::comm::Room&
StateUpdate::_Internal::room(const StateUpdate* msg) {
  return *msg->_impl_.room_;
}
const ::comm::MapPositionsUpdate&
StateUpdate::_Internal::map_positions_update(const StateUpdate* msg) {
  return *msg->_impl_.map_positions_update_;
}
const ::comm::MovementUpdate&
StateUpdate::_Internal::movement_update(const StateUpdate* msg) {
  return *msg->_impl_.movement_update_;
}
const ::comm::EnemyPositionsUpdate&
StateUpdate::_Internal::enemy_positions_update(const StateUpdate* msg) {
  return *msg->_impl_.enemy_positions_update_;
}
const ::comm::MapDimensionsUpdate&
StateUpdate::_Internal::map_dimensions_update(const StateUpdate* msg) {
  return *msg->_impl_.map_dimensions_update_;
}
const ::comm::EnemyGotHitUpdate&
StateUpdate::_Internal::enemy_got_hit_update(const StateUpdate* msg) {
  return *msg->_impl_.enemy_got_hit_update_;
}
StateUpdate::StateUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:comm.StateUpdate)
}
StateUpdate::StateUpdate(const StateUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StateUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compressed_map_dimensions_update_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.map_positions_update_){nullptr}
    , decltype(_impl_.movement_update_){nullptr}
    , decltype(_impl_.enemy_positions_update_){nullptr}
    , decltype(_impl_.map_dimensions_update_){nullptr}
    , decltype(_impl_.enemy_got_hit_update_){nullptr}
    , decltype(_impl_.variant_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.compressed_map_dimensions_update_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compressed_map_dimensions_update_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compressed_map_dimensions_update().empty()) {
    _this->_impl_.compressed_map_dimensions_update_.Set(from._internal_compressed_map_dimensions_update(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::comm::Player(*from._impl_.player_);
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::comm::Item(*from._impl_.item_);
  }
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::comm::Room(*from._impl_.room_);
  }
  if (from._internal_has_map_positions_update()) {
    _this->_impl_.map_positions_update_ = new ::comm::MapPositionsUpdate(*from._impl_.map_positions_update_);
  }
  if (from._internal_has_movement_update()) {
    _this->_impl_.movement_update_ = new ::comm::MovementUpdate(*from._impl_.movement_update_);
  }
  if (from._internal_has_enemy_positions_update()) {
    _this->_impl_.enemy_positions_update_ = new ::comm::EnemyPositionsUpdate(*from._impl_.enemy_positions_update_);
  }
  if (from._internal_has_map_dimensions_update()) {
    _this->_impl_.map_dimensions_update_ = new ::comm::MapDimensionsUpdate(*from._impl_.map_dimensions_update_);
  }
  if (from._internal_has_enemy_got_hit_update()) {
    _this->_impl_.enemy_got_hit_update_ = new ::comm::EnemyGotHitUpdate(*from._impl_.enemy_got_hit_update_);
  }
  _this->_impl_.variant_ = from._impl_.variant_;
  // @@protoc_insertion_point(copy_constructor:comm.StateUpdate)
}

inline void StateUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compressed_map_dimensions_update_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.item_){nullptr}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.map_positions_update_){nullptr}
    , decltype(_impl_.movement_update_){nullptr}
    , decltype(_impl_.enemy_positions_update_){nullptr}
    , decltype(_impl_.map_dimensions_update_){nullptr}
    , decltype(_impl_.enemy_got_hit_update_){nullptr}
    , decltype(_impl_.variant_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.compressed_map_dimensions_update_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compressed_map_dimensions_update_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StateUpdate::~StateUpdate() {
  // @@protoc_insertion_point(destructor:comm.StateUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StateUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compressed_map_dimensions_update_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.item_;
  if (this != internal_default_instance()) delete _impl_.room_;
  if (this != internal_default_instance()) delete _impl_.map_positions_update_;
  if (this != internal_default_instance()) delete _impl_.movement_update_;
  if (this != internal_default_instance()) delete _impl_.enemy_positions_update_;
  if (this != internal_default_instance()) delete _impl_.map_dimensions_update_;
  if (this != internal_default_instance()) delete _impl_.enemy_got_hit_update_;
}

void StateUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.StateUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compressed_map_dimensions_update_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.map_positions_update_ != nullptr) {
    delete _impl_.map_positions_update_;
  }
  _impl_.map_positions_update_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.movement_update_ != nullptr) {
    delete _impl_.movement_update_;
  }
  _impl_.movement_update_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enemy_positions_update_ != nullptr) {
    delete _impl_.enemy_positions_update_;
  }
  _impl_.enemy_positions_update_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.map_dimensions_update_ != nullptr) {
    delete _impl_.map_dimensions_update_;
  }
  _impl_.map_dimensions_update_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enemy_got_hit_update_ != nullptr) {
    delete _impl_.enemy_got_hit_update_;
  }
  _impl_.enemy_got_hit_update_ = nullptr;
  _impl_.variant_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .comm.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.Item item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.StateVariant variant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_variant(static_cast<::comm::StateVariant>(val));
        } else
          goto handle_unusual;
        continue;
      // .comm.Room room = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.MapPositionsUpdate map_positions_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_positions_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.MovementUpdate movement_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.EnemyPositionsUpdate enemy_positions_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_enemy_positions_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.MapDimensionsUpdate map_dimensions_update = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_dimensions_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .comm.EnemyGotHitUpdate enemy_got_hit_update = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_enemy_got_hit_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes compressed_map_dimensions_update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_compressed_map_dimensions_update();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StateUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.StateUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .comm.Player player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .comm.Item item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // .comm.StateVariant variant = 3;
  if (this->_internal_variant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_variant(), target);
  }

  // .comm.Room room = 4;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // .comm.MapPositionsUpdate map_positions_update = 5;
  if (this->_internal_has_map_positions_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::map_positions_update(this),
        _Internal::map_positions_update(this).GetCachedSize(), target, stream);
  }

  // .comm.MovementUpdate movement_update = 6;
  if (this->_internal_has_movement_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::movement_update(this),
        _Internal::movement_update(this).GetCachedSize(), target, stream);
  }

  // .comm.EnemyPositionsUpdate enemy_positions_update = 7;
  if (this->_internal_has_enemy_positions_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::enemy_positions_update(this),
        _Internal::enemy_positions_update(this).GetCachedSize(), target, stream);
  }

  // .comm.MapDimensionsUpdate map_dimensions_update = 8;
  if (this->_internal_has_map_dimensions_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::map_dimensions_update(this),
        _Internal::map_dimensions_update(this).GetCachedSize(), target, stream);
  }

  // .comm.EnemyGotHitUpdate enemy_got_hit_update = 9;
  if (this->_internal_has_enemy_got_hit_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::enemy_got_hit_update(this),
        _Internal::enemy_got_hit_update(this).GetCachedSize(), target, stream);
  }

  // bytes compressed_map_dimensions_update = 10;
  if (!this->_internal_compressed_map_dimensions_update().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_compressed_map_dimensions_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.StateUpdate)
  return target;
}

size_t StateUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.StateUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes compressed_map_dimensions_update = 10;
  if (!this->_internal_compressed_map_dimensions_update().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_compressed_map_dimensions_update());
  }

  // .comm.Player player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .comm.Item item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // .comm.Room room = 4;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // .comm.MapPositionsUpdate map_positions_update = 5;
  if (this->_internal_has_map_positions_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_positions_update_);
  }

  // .comm.MovementUpdate movement_update = 6;
  if (this->_internal_has_movement_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.movement_update_);
  }

  // .comm.EnemyPositionsUpdate enemy_positions_update = 7;
  if (this->_internal_has_enemy_positions_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enemy_positions_update_);
  }

  // .comm.MapDimensionsUpdate map_dimensions_update = 8;
  if (this->_internal_has_map_dimensions_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_dimensions_update_);
  }

  // .comm.EnemyGotHitUpdate enemy_got_hit_update = 9;
  if (this->_internal_has_enemy_got_hit_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enemy_got_hit_update_);
  }

  // .comm.StateVariant variant = 3;
  if (this->_internal_variant() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_variant());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StateUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StateUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StateUpdate::GetClassData() const { return &_class_data_; }


void StateUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StateUpdate*>(&to_msg);
  auto& from = static_cast<const StateUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:comm.StateUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_compressed_map_dimensions_update().empty()) {
    _this->_internal_set_compressed_map_dimensions_update(from._internal_compressed_map_dimensions_update());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::comm::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::comm::Item::MergeFrom(
        from._internal_item());
  }
  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::comm::Room::MergeFrom(
        from._internal_room());
  }
  if (from._internal_has_map_positions_update()) {
    _this->_internal_mutable_map_positions_update()->::comm::MapPositionsUpdate::MergeFrom(
        from._internal_map_positions_update());
  }
  if (from._internal_has_movement_update()) {
    _this->_internal_mutable_movement_update()->::comm::MovementUpdate::MergeFrom(
        from._internal_movement_update());
  }
  if (from._internal_has_enemy_positions_update()) {
    _this->_internal_mutable_enemy_positions_update()->::comm::EnemyPositionsUpdate::MergeFrom(
        from._internal_enemy_positions_update());
  }
  if (from._internal_has_map_dimensions_update()) {
    _this->_internal_mutable_map_dimensions_update()->::comm::MapDimensionsUpdate::MergeFrom(
        from._internal_map_dimensions_update());
  }
  if (from._internal_has_enemy_got_hit_update()) {
    _this->_internal_mutable_enemy_got_hit_update()->::comm::EnemyGotHitUpdate::MergeFrom(
        from._internal_enemy_got_hit_update());
  }
  if (from._internal_variant() != 0) {
    _this->_internal_set_variant(from._internal_variant());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StateUpdate::CopyFrom(const StateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.StateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateUpdate::IsInitialized() const {
  return true;
}

void StateUpdate::InternalSwap(StateUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compressed_map_dimensions_update_, lhs_arena,
      &other->_impl_.compressed_map_dimensions_update_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateUpdate, _impl_.variant_)
      + sizeof(StateUpdate::_impl_.variant_)
      - PROTOBUF_FIELD_OFFSET(StateUpdate, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_comm_2eproto_getter, &descriptor_table_comm_2eproto_once,
      file_level_metadata_comm_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace comm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::comm::MovementUpdate*
Arena::CreateMaybeMessage< ::comm::MovementUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::MovementUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Player*
Arena::CreateMaybeMessage< ::comm::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Item*
Arena::CreateMaybeMessage< ::comm::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::InitialInfo*
Arena::CreateMaybeMessage< ::comm::InitialInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::InitialInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Room*
Arena::CreateMaybeMessage< ::comm::Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Room >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Obstacle*
Arena::CreateMaybeMessage< ::comm::Obstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::Enemy*
Arena::CreateMaybeMessage< ::comm::Enemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::Enemy >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::TextureData*
Arena::CreateMaybeMessage< ::comm::TextureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::TextureData >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::CollisionData*
Arena::CreateMaybeMessage< ::comm::CollisionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::CollisionData >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::EnemyGotHitUpdate*
Arena::CreateMaybeMessage< ::comm::EnemyGotHitUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::EnemyGotHitUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::EnemyPositionsUpdate*
Arena::CreateMaybeMessage< ::comm::EnemyPositionsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::EnemyPositionsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::MapPositionsUpdate*
Arena::CreateMaybeMessage< ::comm::MapPositionsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::MapPositionsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::MapDimensionsUpdate*
Arena::CreateMaybeMessage< ::comm::MapDimensionsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::MapDimensionsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::SpawningEnemiesResponse*
Arena::CreateMaybeMessage< ::comm::SpawningEnemiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::SpawningEnemiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::BytePrefix*
Arena::CreateMaybeMessage< ::comm::BytePrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::BytePrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::comm::StateUpdate*
Arena::CreateMaybeMessage< ::comm::StateUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comm::StateUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
